{"version":3,"sources":["assets/images/Retirement/policypal-retirement-insurance-1.svg","assets/images/Retirement/policypal-retirement-insurance-2.svg","assets/images/Retirement/policypal-retirement-insurance-3.svg","components/Retirement/RetirementEditDetail.js","components/Retirement/RetirementMain.js","containers/Retirement/RetirementMainContainer.js","components/Retirement/RetirementChoosePlan.js","containers/Retirement/RetirementChoosePlanContainer.js","components/Retirement/RetirementDetail.js","containers/Retirement/RetirementDetailContainer.js","containers/Retirement/RetirementRouteContainer.js","assets/images/MainFormIcons/Avatar.svg","components/Templates/MultiCompareView/MultiCompareInner.js","components/Templates/MultiCompareView/MultiCompareView.js","assets/images/MainFormIcons/Dollar.svg","assets/images/MainFormIcons/Umbrella.svg"],"names":["module","exports","__webpack_require__","p","RetirementEditDetail","props","_this","Object","classCallCheck","this","retirementFields","possibleConstructorReturn","getPrototypeOf","call","state","errorStringData","birthDate","data","remapFormFields","form_fields","handleSubmit","bind","assertThisInitialized","handleCloseEdit","handleRevert","validateForm","nextProps","prevState","storeForm","birth_date","_this$props","setCloseCallBack","originalValues","date","age","getAge","e","errorResult","smoker","type","options","start","slashedStringDateToDate","min_date","end","max_date","retirement_monthly_sum","retirement_age","premium_term","payout_term","setState","_this2","isFirstValidate","arguments","length","undefined","_this$props2","closePopUp","setInsurFormState","setSubmit","submitCallback","history","isEmptyResult","_","isEmpty","dateReValidate","error","gaEvent","event_category","event_label","storeStringToDate","ampTag","gender","amount","start-from","term","period","FORMSTATES","CHOOSEPLAN","index","push","concat","path","_this3","_this$props3","change","resetForm","keys","forEach","key","_this4","_this$state","_this$props4","form","ageStyle","react_default","a","createElement","reactstrap_es","className","xs","sm","DatePickerV2","name","size","zIndex","desc","display_name","startDate","endDate","currDate","default_date","errorString","_this5","_this$state2","_this$props5","noGutters","src","Avatar","alt","Selection","noEmptyTextSelection","map","option","description","sizeInSM","renderBirthDate","style","marginTop","Dollar","Slider","hideWidth","inputList","displayList","simplifyCostArray","suffix","Umbrella","DropDownV2","placeholderString","dropList","_this6","_this$props6","isPopUp","onSubmit","renderFields","Button","variant","width","height","onClick","RestrictionsPopup","ref","node","resPopup","Component","defaultProps","withRouter","reduxForm","destroyOnUnmount","connect","getFormValues","isRevert","editForm","dispatch","reset","setInsuranceFormState","invokeSubmit","setRestrictionPopup","RetirementMain","retirementPromoGiveAway","FormLanding","img1","Retirement1","img2","Retirement2","img3","Retirement3","imgAlt","promo","react","Retirement_RetirementEditDetail","RetirementMainContainer","loading","clearData","getRetirementFields","setFormState","MAIN","window","scrollTo","gaTag","page_title","page_path","location","search","prevProps","loadingEnd","Retirement_RetirementMain","retirement","insurance","promoGiveaways","callBack","errorMsg","time","setLoading","clearLoading","clearRetirementData","RetirementChoosePlan","selectedPlanData","planType","partner","info","insurer_slug","price","policyInfo","net_price","console","log","message","MultiCompareView","assign","category","valuesToListen","value","extra","editDetail","buttonDesc","forceFixedOnDesktop","trackingTags","default","getAmpTags","RetirementChoosePlanContainer","retirementForm","getPlans","getInsurersList","plansData","validInsurersList","Retirement_RetirementChoosePlan","mainForm","parseForm","parseRetirementForm","setSelectedPlanData","DETAILFORM","loadingFailBackState","goBack","parsedForm","getRetirementPlans","getValidInsurersList","RetirementDetail","sessionId","errorArray","setTimeout","checkoutComplete","openCheckoutComplete","checkOutOthers","popup","openPopupWithJSX","getSynergyJSX","document","body","scrollHeight","planDetails","isLoggedIn","piggyCallback","changePlan","DetailForm","checkoutButtonDesc","TextInput","email","Date","mobile_number","PopupWithText","showCancelButton","CheckoutComplete","isQuoteOnly","isSellLeads","wrappedComponentRef","constants","RetirementDetailContainer","profileValues","selectedData","logo","Logos","others","logoDesc","planName","planTotal","insurer_name","product_name","toFixed","Retirement_RetirementDetail","userDetails","getAnonymousSession","params","propsFromState","propsFromDispatch","ownProps","objectSpread","detailForm","getSessionParams","RetirementRouteContainer","formIndex","resetStoreForm","replace","resetCompare","resetInsuranceForm","getPromoGiveaways","setInitialFormState","renderStepProgress","renderLifeForms","changeUserDetails","isMounted","formState","match","routeResult","routeHandler","changeForm","surname","firstname","firstName","dateOfBirth","contact","StepProgressBar","maxWidth","stateList","stateDescriptions","main","charged","Retirement_RetirementChoosePlanContainer","Retirement_RetirementDetailContainer","Retirement_RetirementMainContainer","meta","isProduction","Helmet","content","RefreshTimer","refresher","invokeNewTimer","resultToMatch","MultiCompareInner","tabIndex","currentTab","tabs","policyTypes","handleTabClick","renderTabs","setPlanType","lowerCase","nextState","isEqual","selectedIndex","initialIndex","categoryTab","wrappedInstance","isCameFromBackButton","currIncomingIndex","tabIndexToUse","goToIndex","setSelectedIndex","isInitial","_this$state3","oldPolicyTypes","planImages","policyTypesToUse","reduce","result","findIndex","theIndex","image","startCase","img","tabInfo","currentTabIndex","tab","newTab","_this$state4","scrollPopUpCallback","tabStyle","TabView","isDataFadeOnly","isDisableDropdown","big","CompareView","notAccordion","productChangable","ChangeInitialFormData","headerValue","conditions","Enquiry","compare","defaultInsurers","selectedInsurers","currentInsurers","parsedData","parseData","trip_type","parsedParams","setSelectedInsurers","getNewData","onInsurerClick","newDefaultInsurers","plan","slice","isLoading","hoveredIndex","insurer","insurerSlug","incomingInsurers","MultiCompareView_MultiCompareInner","mainMsg","array"],"mappings":"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","file":"static/js/retirement.361ecc8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/policypal-retirement-insurance-1.21cafa4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-retirement-insurance-2.0de8e110.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-retirement-insurance-3.271a03cc.svg\";","/**\r\n * RetirementEditDetail.js\r\n * Edit Detail View for Retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues, reset } from 'redux-form';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport Avatar from 'assets/images/MainFormIcons/Avatar.svg';\r\nimport Dollar from 'assets/images/MainFormIcons/Dollar.svg';\r\nimport Umbrella from 'assets/images/MainFormIcons/Umbrella.svg';\r\n\r\nimport Button from 'components/FormsV3/Button/Button';\r\nimport Selection from '../Forms/Selection/Selection';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport Slider from '../Forms/Slider/Slider';\r\nimport DropDownV2 from '../Forms/DropDown/DropDownV2';\r\n\r\nimport RestrictionsPopup from '../Templates/RestrictionsPopup/RestrictionsPopup';\r\n\r\nimport { invokeSubmit } from '../../actions/editFormActions';\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { setRestrictionPopup } from '../../actions/restrictionsActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { storeStringToDate, getAge, slashedStringDateToDate } from '../../lib/dateFunctions';\r\nimport { remapFormFields, simplifyCostArray } from '../../lib/helperFunctions';\r\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\n// import './Life.scss';\r\n\r\nconst formName = 'retirement';\r\n\r\nclass RetirementEditDetail extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { storeForm } = nextProps;\r\n    if (storeForm && storeForm.birth_date !== prevState.birthDate) {\r\n      return { birthDate: storeForm.birth_date };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { retirementFields } = this.props;\r\n\r\n    this.state = {\r\n      errorStringData: {},\r\n      birthDate: null,\r\n      data: remapFormFields(retirementFields.form_fields),\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\r\n    this.handleRevert = this.handleRevert.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { storeForm, setCloseCallBack } = this.props;\r\n    this.originalValues = storeForm;\r\n\r\n    if (setCloseCallBack) {\r\n      setCloseCallBack(this.handleRevert);\r\n    }\r\n  }\r\n\r\n  getAge(date) {\r\n    let age = '';\r\n    if (date && date !== -1) {\r\n      age = getAge(date);\r\n    }\r\n\r\n    return age;\r\n  }\r\n\r\n  validateForm(e) {\r\n    const { data } = this.state;\r\n\r\n    const fieldsToCheck = [\r\n      'gender',\r\n      'smoker',\r\n      'birth_date',\r\n      'retirement_monthly_sum',\r\n      'retirement_age',\r\n      'premium_term',\r\n      'payout_term',\r\n    ];\r\n\r\n    const errorResult = validateForm(e, fieldsToCheck, {\r\n      smoker: { type: 'ARRAY', data: data.smoker.options },\r\n      birth_date: { type: 'DATE', start: slashedStringDateToDate(data.birth_date.min_date), end: slashedStringDateToDate(data.birth_date.max_date) },\r\n      retirement_monthly_sum: { type: 'ARRAY', data: data.retirement_monthly_sum.options },\r\n      retirement_age: { type: 'ARRAY', data: data.retirement_age.options },\r\n      premium_term: { type: 'ARRAY', data: data.premium_term.options },\r\n      payout_term: { type: 'ARRAY', data: data.payout_term.options },\r\n    });\r\n\r\n    this.setState({\r\n      errorStringData: errorResult,\r\n    });\r\n\r\n    return errorResult;\r\n  }\r\n\r\n  handleSubmit(e, isFirstValidate = true) {\r\n    // e.preventDefault();\r\n    // console.log(e);\r\n    const { birthDate } = this.state;\r\n    const {\r\n      closePopUp,\r\n      setInsurFormState,\r\n      setSubmit,\r\n      storeForm,\r\n      submitCallback,\r\n      history,\r\n    } = this.props;\r\n\r\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      setSubmit();\r\n      this.originalValues = storeForm;\r\n\r\n      if (submitCallback) {\r\n        submitCallback();\r\n      } else {\r\n        gaEvent('Retirement - Get Quote', {\r\n          event_category: 'Retirement',\r\n          event_label: 'Button - Retirement - Get Quote',\r\n        });\r\n        const date = storeStringToDate(birthDate);\r\n        const age = this.getAge(date);\r\n\r\n        ampTag('RetireGetQuoteA', {\r\n          gender: e.gender,\r\n          smoker: e.smoker,\r\n          age,\r\n          amount: e.retirement_monthly_sum,\r\n          'start-from': e.retirement_age,\r\n          term: e.premium_term,\r\n          period: e.payout_term,\r\n        });\r\n      }\r\n\r\n      setInsurFormState(FORMSTATES.CHOOSEPLAN.index);\r\n      history.push(`/retirement${FORMSTATES.CHOOSEPLAN.path}`);\r\n\r\n\r\n      if (closePopUp) {\r\n        closePopUp();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleRevert() {\r\n    const { change, resetForm } = this.props;\r\n    resetForm();\r\n    Object.keys(this.originalValues).forEach((key) => {\r\n      change(key, this.originalValues[key]);\r\n    });\r\n  }\r\n\r\n  handleCloseEdit() {\r\n    const { closePopUp } = this.props;\r\n    closePopUp(this.handleRevert);\r\n  }\r\n\r\n  renderBirthDate() {\r\n    const { errorStringData, birthDate, data } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n\r\n    const date = storeStringToDate(birthDate);\r\n    const ageStyle = date ? 'active' : 'inactive';\r\n    const age = this.getAge(date);\r\n\r\n    return (\r\n      <Col className=\"birth-date-container\" xs={12} sm={10}>\r\n        <p className=\"age\">\r\n          <span className={ageStyle}>Age</span>\r\n          <span className=\"age-value\">{age}</span>\r\n        </p>\r\n        <DatePickerV2\r\n          form={form}\r\n          change={change}\r\n          name=\"birth_date\"\r\n          size=\"medium\"\r\n          zIndex={97}\r\n          desc={data.birth_date.display_name}\r\n          startDate={slashedStringDateToDate(data.birth_date.min_date)}\r\n          endDate={slashedStringDateToDate(data.birth_date.max_date)}\r\n          currDate={slashedStringDateToDate(data.birth_date.default_date)}\r\n          errorString={errorStringData.birth_date}\r\n          validateForm={() => this.validateForm(storeForm)}\r\n        />\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  renderFields() {\r\n    const { errorStringData, data } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n\r\n    // console.log(data);\r\n\r\n    return (\r\n      <Row noGutters>\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img src={Avatar} alt=\"Avatar.svg\" />\r\n        </Col>\r\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n          <Selection\r\n            form={form}\r\n            change={change}\r\n            name=\"gender\"\r\n            type=\"text-selection\"\r\n            noEmptyTextSelection\r\n            options={_.map(data.gender.options, option => ({\r\n              key: option,\r\n              description: option,\r\n            }))}\r\n            sizeInSM={6}\r\n            desc={data.gender.display_name}\r\n            zIndex={99}\r\n            errorString={errorStringData.gender}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\r\n          <Selection\r\n            form={form}\r\n            change={change}\r\n            name=\"smoker\"\r\n            type=\"text-selection\"\r\n            noEmptyTextSelection\r\n            options={_.map(data.smoker.options, option => ({\r\n              key: option,\r\n              description: option,\r\n            }))}\r\n            sizeInSM={6}\r\n            zIndex={98}\r\n            desc={data.smoker.display_name}\r\n            errorString={errorStringData.smoker}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\r\n        {this.renderBirthDate()}\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img style={{ marginTop: 32 }} src={Dollar} alt=\"Dollar.svg\" />\r\n        </Col>\r\n        <Col xs={12} sm={10}>\r\n          <Slider\r\n            form={form}\r\n            change={change}\r\n            name=\"retirement_monthly_sum\"\r\n            desc={data.retirement_monthly_sum.display_name}\r\n            zIndex={96}\r\n            hideWidth={576}\r\n            inputList={data.retirement_monthly_sum.options}\r\n            displayList={simplifyCostArray(data.retirement_monthly_sum.options)}\r\n            suffix=\"monthly retirement\"\r\n            errorString={errorStringData.retirement_monthly_sum}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img src={Umbrella} alt=\"Umbrella.svg\" />\r\n        </Col>\r\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n          <DropDownV2\r\n            form={form}\r\n            change={change}\r\n            name=\"retirement_age\"\r\n            placeholderString=\"Age\"\r\n            dropList={data.retirement_age.options}\r\n            size=\"medium\"\r\n            zIndex={95}\r\n            desc={data.retirement_age.display_name}\r\n            errorString={errorStringData.retirement_age}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\r\n          <DropDownV2\r\n            form={form}\r\n            change={change}\r\n            name=\"premium_term\"\r\n            placeholderString=\"Term\"\r\n            dropList={data.premium_term.options}\r\n            size=\"medium\"\r\n            zIndex={94}\r\n            desc={data.premium_term.display_name}\r\n            errorString={errorStringData.premium_term}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\r\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n          <DropDownV2\r\n            form={form}\r\n            change={change}\r\n            name=\"payout_term\"\r\n            placeholderString=\"Payout\"\r\n            dropList={data.payout_term.options}\r\n            size=\"medium\"\r\n            zIndex={93}\r\n            desc={data.payout_term.display_name}\r\n            errorString={errorStringData.payout_term}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      handleSubmit,\r\n      isPopUp,\r\n      form,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"landing-form-container\">\r\n        {\r\n          isPopUp ?\r\n            <p className=\"edit-header\">Edit Retirement Insurance Details</p>\r\n          :\r\n            null\r\n        }\r\n        <form onSubmit={handleSubmit(this.handleSubmit)}>\r\n          <Row className=\"input-offset\" noGutters>\r\n            {this.renderFields()}\r\n          </Row>\r\n          <Row className=\"align-items-center button-container\" noGutters>\r\n            {\r\n              isPopUp ?\r\n                <Col className=\"justify-content-center button\" xs={12}>\r\n                  <Row noGutters>\r\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\r\n                      <Button\r\n                        className=\"button-left\"\r\n                        variant=\"medium-flat\"\r\n                        width={165}\r\n                        height={72}\r\n                        onClick={() => this.handleCloseEdit()}\r\n                      >\r\n                        <p>Cancel</p>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"medium-flat-green\"\r\n                        width={165}\r\n                        height={72}\r\n                      >\r\n                        <p>Save</p>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              :\r\n                <Col className=\"justify-content-center button\" xs={12}>\r\n                  <Button type=\"submit\" variant=\"medium-flat-green\" width={165} height={72}>\r\n                    <p>Get Quote</p>\r\n                  </Button>\r\n                </Col>\r\n            }\r\n          </Row>\r\n        </form>\r\n        <RestrictionsPopup ref={node => this.resPopup = node} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRetirementEditDetail.defaultProps = {\r\n  isPopUp: false,\r\n  setCloseCallBack: null,\r\n  storeForm: null,\r\n  closePopUp: null,\r\n  submitCallback: null,\r\n};\r\n\r\nRetirementEditDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  isPopUp: PropTypes.bool,\r\n  resetForm: PropTypes.func.isRequired,\r\n  closePopUp: PropTypes.func,\r\n  setInsurFormState: PropTypes.func.isRequired,\r\n  setSubmit: PropTypes.func.isRequired,\r\n  storeForm: PropTypes.object,\r\n  setCloseCallBack: PropTypes.func,\r\n  submitCallback: PropTypes.func,\r\n  retirementFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  isRevert: state.editForm.isRevert,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetForm: () => {\r\n    dispatch(reset(formName));\r\n  },\r\n  setInsurFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  setSubmit: () => {\r\n    dispatch(invokeSubmit());\r\n  },\r\n  setRestrictionPopup: (data) => {\r\n    dispatch(setRestrictionPopup(data));\r\n  },\r\n});\r\n\r\nexport default withRouter(reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, mapDispatchToProps)(RetirementEditDetail)));\r\n","/**\r\n * RetirementMain.js\r\n * Main Landing View for Retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Retirement1 from 'assets/images/Retirement/policypal-retirement-insurance-1.svg';\r\nimport Retirement2 from 'assets/images/Retirement/policypal-retirement-insurance-2.svg';\r\nimport Retirement3 from 'assets/images/Retirement/policypal-retirement-insurance-3.svg';\r\n\r\nimport RetirementEditDetail from './RetirementEditDetail';\r\nimport FormLanding from '../Templates/FormLanding/FormLanding';\r\n\r\nimport './Retirement.scss';\r\n\r\nclass RetirementMain extends Component {\r\n  render() {\r\n    const { retirementFields, retirementPromoGiveAway } = this.props;\r\n\r\n    return (\r\n      <div className=\"retirement-container\">\r\n        <FormLanding\r\n          img1={Retirement1}\r\n          img2={Retirement2}\r\n          img3={Retirement3}\r\n          imgAlt=\"PolicyPal Retirement Insurance\"\r\n          promo={retirementPromoGiveAway}\r\n          desc={\r\n            <Fragment>\r\n              <p>Get your Retirement Quotation</p>\r\n              <p>in minutes!</p>\r\n            </Fragment>\r\n          }\r\n        >\r\n          <RetirementEditDetail\r\n            retirementFields={retirementFields}\r\n          />\r\n        </FormLanding>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRetirementMain.defaultProps = {\r\n  retirementPromoGiveAway: null,\r\n};\r\n\r\nRetirementMain.propTypes = {\r\n  retirementFields: PropTypes.object.isRequired,\r\n  retirementPromoGiveAway: PropTypes.object,\r\n};\r\n\r\nexport default RetirementMain;\r\n","/**\r\n * RetirementMainContainer.js\r\n * The main container for retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport RetirementMain from '../../components/Retirement/RetirementMain';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { getRetirementFields, clearRetirementData } from '../../actions/retirementActions';\r\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\r\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass RetirementMainContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      loading,\r\n      retirementFields,\r\n      history,\r\n      clearData,\r\n    } = this.props;\r\n\r\n    clearData();\r\n\r\n    if (!retirementFields) {\r\n      loading(() => history.push('/'));\r\n      this.props.getRetirementFields();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { setFormState, history } = this.props;\r\n    setFormState(FORMSTATES.MAIN.index);\r\n\r\n    window.scrollTo(0, 0);\r\n\r\n    gaTag({\r\n      page_title: 'Retirement',\r\n      page_path: `/retirement${history.location.search}`,\r\n    });\r\n    ampTag('RetireFormS');\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { retirementFields, loadingEnd } = this.props;\r\n    if (!prevProps.retirementFields && retirementFields) {\r\n      loadingEnd();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { retirementFields, retirementPromoGiveAway } = this.props;\r\n\r\n    if (!retirementFields) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <RetirementMain\r\n        retirementFields={retirementFields}\r\n        retirementPromoGiveAway={retirementPromoGiveAway}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nRetirementMainContainer.defaultProps = {\r\n  retirementFields: null,\r\n  retirementPromoGiveAway: null,\r\n};\r\n\r\nRetirementMainContainer.propTypes = {\r\n  retirementFields: PropTypes.object,\r\n  getRetirementFields: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n  retirementPromoGiveAway: PropTypes.object,\r\n  clearData: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  retirementFields: state.retirement.retirementFields,\r\n  retirementPromoGiveAway: state.insurance.promoGiveaways.retirement,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getRetirementFields: () => {\r\n    dispatch(getRetirementFields());\r\n  },\r\n  loading: (callBack, errorMsg, time) => {\r\n    dispatch(setLoading(callBack, errorMsg, time));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearRetirementData());\r\n  },\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RetirementMainContainer));\r\n","/**\r\n * RetirementChoosePlan.js\r\n * Choose Plan View for retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport MultiCompareView from '../Templates/MultiCompareView/MultiCompareView';\r\n\r\nimport RetirementEditDetail from './RetirementEditDetail';\r\n\r\nimport { ampTag } from '../../lib/tagFunctions';\r\n\r\nclass RetirementChoosePlan extends Component {\r\n  getAmpTags(selectedPlanData, planType) {\r\n    try {\r\n      return ({\r\n        partner: selectedPlanData.info.insurer_slug,\r\n        price: selectedPlanData.policyInfo[planType].net_price,\r\n      });\r\n    } catch (error) {\r\n      console.log(`Retirement choose plan Buy now Amp tag failed: ${error.message}`);\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  render() {\r\n    const { retirementFields } = this.props;\r\n\r\n    return (\r\n      <MultiCompareView\r\n        {...this.props}\r\n        category=\"retirement\"\r\n        form=\"retirement\"\r\n        editForm={{\r\n          valuesToListen: [\r\n            { value: 'gender', desc: 'Gender' },\r\n            { value: 'smoker', desc: 'S.Status' },\r\n            { value: 'birth_date', desc: 'Age' },\r\n            { value: 'retirement_monthly_sum', desc: 'R. Sum', extra: 'cost_simplify' },\r\n            { value: 'retirement_age', desc: 'R. Age' },\r\n            { value: 'premium_term', desc: 'Period' },\r\n            { value: 'payout_term', desc: 'Pay for' },\r\n          ],\r\n          editDetail: <RetirementEditDetail retirementFields={retirementFields} isPopUp />,\r\n        }}\r\n        buttonDesc=\"Select\"\r\n        forceFixedOnDesktop\r\n        trackingTags={{\r\n          default: (selectedPlanData) => {\r\n            ampTag('RetireSelectA', this.getAmpTags(selectedPlanData, 'default'));\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nRetirementChoosePlan.defaultProps = {\r\n};\r\n\r\nRetirementChoosePlan.propTypes = {\r\n  retirementFields: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RetirementChoosePlan;\r\n","/**\r\n * RetirementChoosePlanContainer.js\r\n * The choose plan container for retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { parseRetirementForm, getRetirementPlans, getValidInsurersList, clearRetirementData, setSelectedPlanData } from '../../actions/retirementActions';\r\n\r\nimport RetirementChoosePlan from '../../components/Retirement/RetirementChoosePlan';\r\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass RetirementChoosePlanContainer extends Component {\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.CHOOSEPLAN.index);\r\n\r\n    gaTag({\r\n      page_title: 'Retirement - Choose Plan',\r\n      page_path: '/retirement/chooseplan',\r\n    });\r\n    ampTag('RetireResultsS');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      retirementForm,\r\n      getPlans,\r\n      getInsurersList,\r\n      clearData,\r\n      setFormState,\r\n      plansData,\r\n      validInsurersList,\r\n      retirementFields,\r\n      history,\r\n    } = this.props;\r\n\r\n    return (\r\n      <RetirementChoosePlan\r\n        mainForm={retirementForm}\r\n        retirementFields={retirementFields}\r\n        parseForm={parseRetirementForm}\r\n        getPlans={getPlans}\r\n        getInsurersList={getInsurersList}\r\n        clearData={clearData}\r\n        setSelectedPlanData={this.props.setSelectedPlanData}\r\n        setFormState={() => {\r\n          setFormState(FORMSTATES.DETAILFORM.index);\r\n          history.push(`/retirement${FORMSTATES.DETAILFORM.path}`);\r\n        }}\r\n        loadingFailBackState={() => {\r\n          history.goBack();\r\n        }}\r\n        plansData={plansData}\r\n        validInsurersList={validInsurersList}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nRetirementChoosePlanContainer.defaultProps = {\r\n  plansData: null,\r\n  validInsurersList: null,\r\n};\r\n\r\nRetirementChoosePlanContainer.propTypes = {\r\n  retirementForm: PropTypes.object.isRequired,\r\n  getPlans: PropTypes.func.isRequired,\r\n  getInsurersList: PropTypes.func.isRequired,\r\n  clearData: PropTypes.func.isRequired,\r\n  setSelectedPlanData: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  plansData: PropTypes.array,\r\n  validInsurersList: PropTypes.array,\r\n  retirementFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  retirementForm: getFormValues('retirement')(state),\r\n  retirementFields: state.retirement.retirementFields,\r\n  plansData: state.retirement.plansData,\r\n  validInsurersList: state.retirement.validInsurersList,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  getPlans: (parsedForm) => {\r\n    dispatch(getRetirementPlans(parsedForm));\r\n  },\r\n  getInsurersList: (parsedForm) => {\r\n    dispatch(getValidInsurersList(parsedForm));\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearRetirementData());\r\n  },\r\n  setSelectedPlanData: (data) => {\r\n    dispatch(setSelectedPlanData(data));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RetirementChoosePlanContainer));\r\n","/**\r\n * RetirementDetail.js\r\n * Detail view for Retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues } from 'redux-form';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport DetailForm from '../Templates/DetailForm/DetailForm';\r\n\r\nimport TextInput from '../Forms/TextInput/TextInput';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport CheckoutComplete from '../Templates/CheckoutPopup/CheckoutComplete';\r\nimport PopupWithText from '../Templates/PopupWithText/PopupWithText';\r\n\r\nimport { getSynergyJSX } from '../../actions/insuranceActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\r\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nconst formName = 'retirement-detail';\r\n\r\nclass RetirementDetail extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      sessionId,\r\n    } = nextProps;\r\n\r\n    if (sessionId !== prevState.sessionId) {\r\n      return ({\r\n        sessionId,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sessionId: null,\r\n      errorStringData: {},\r\n      errorArray: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { sessionId } = this.state;\r\n    const { loadingEnd } = this.props;\r\n\r\n    if (sessionId) {\r\n      loadingEnd();\r\n      setTimeout(() => {\r\n        this.checkoutComplete.openCheckoutComplete();\r\n        ampTag('RetireConfirmationS');\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateForm(e) {\r\n    const fieldsToCheck = [\r\n      'email',\r\n      'name',\r\n      'birth_date',\r\n      'mobile_number',\r\n    ];\r\n\r\n    const error = validateForm(e, fieldsToCheck);\r\n\r\n    this.setState({\r\n      errorStringData: error,\r\n    });\r\n\r\n    let errorArray = [];\r\n    if (!_.isEmpty(error)) {\r\n      errorArray = [<p className=\"error-string\" key=\"error-1\">Fields are not properly filled, please check again.</p>];\r\n    }\r\n\r\n    this.setState({\r\n      errorArray,\r\n    });\r\n\r\n    return error;\r\n  }\r\n\r\n  handleSubmit(e, isFirstValidate = true) {\r\n    // console.log(e);\r\n    const { checkOutOthers, loading, storeForm } = this.props;\r\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error, errorArray: null }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      ampTag('RetireConfirm1A');\r\n      ampTag('RetireNoticeS');\r\n      this.popup.openPopupWithJSX(getSynergyJSX(), true, () => {\r\n        setTimeout(() => {\r\n          loading();\r\n          checkOutOthers(e);\r\n\r\n          gaEvent('Retirement - DetailForm - Checkout', {\r\n            event_category: 'Retirement',\r\n            event_label: 'Retirement - DetailForm - Checkout',\r\n          });\r\n          ampTag('RetireConfirm2A');\r\n        }, 350);\r\n      });\r\n    }\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  }\r\n\r\n  render() {\r\n    const { errorStringData, errorArray } = this.state;\r\n    const {\r\n      form,\r\n      change,\r\n      planDetails,\r\n      isLoggedIn,\r\n      piggyCallback,\r\n      changePlan,\r\n      storeForm,\r\n    } = this.props;\r\n\r\n    // console.log(petMinDate, petMaxDate);\r\n    return (\r\n      <Fragment>\r\n        <DetailForm\r\n          category=\"retirement\"\r\n          changePlan={changePlan}\r\n          handleSubmit={this.props.handleSubmit}\r\n          onSubmit={this.handleSubmit}\r\n          change={change}\r\n          form={form}\r\n          planDetails={planDetails}\r\n          isLoggedIn={isLoggedIn}\r\n          piggyCallback={piggyCallback}\r\n          errorArray={errorArray}\r\n          checkoutButtonDesc=\"Confirm\"\r\n        >\r\n          <Row className=\"main-form\" noGutters>\r\n            <Col xs={12}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"email\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={99}\r\n                desc=\"Email Address\"\r\n                errorString={errorStringData.email}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n            <Col className=\"right-padding\" xs={12} sm={6}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"name\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={98}\r\n                desc=\"Full Name\"\r\n                errorString={errorStringData.name}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n            <Col className=\"left-padding\" xs={12} sm={6}>\r\n              <DatePickerV2\r\n                form={form}\r\n                change={change}\r\n                name=\"birth_date\"\r\n                size=\"medium\"\r\n                zIndex={97}\r\n                desc=\"Date of Birth\"\r\n                errorString={errorStringData.birth_date}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n                endDate={new Date()}\r\n              />\r\n            </Col>\r\n            <Col className=\"right-padding\" xs={12} sm={6}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"mobile_number\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={96}\r\n                desc=\"Mobile Number\"\r\n                errorString={errorStringData.mobile_number}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </DetailForm>\r\n        <PopupWithText\r\n          ref={node => this.popup = node}\r\n          showCancelButton\r\n        />\r\n        <CheckoutComplete\r\n          isQuoteOnly\r\n          isSellLeads\r\n          wrappedComponentRef={node => this.checkoutComplete = node}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nRetirementDetail.defaultProps = {\r\n  storeForm: null,\r\n};\r\n\r\nRetirementDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  checkOutOthers: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  planDetails: PropTypes.object.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  changePlan: PropTypes.func.isRequired,\r\n  storeForm: PropTypes.object,\r\n  loading: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  constants: state.insurance.constants,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loading: (callBack, errorMsg, time) => {\r\n    dispatch(setLoading(callBack, errorMsg, time));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n});\r\n\r\nexport default reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, mapDispatchToProps)(RetirementDetail));\r\n","/**\r\n * RetirementDetailContainer.js\r\n * The detail container for retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport Logos from 'assets/images/InsurerLogos';\r\n\r\nimport RetirementDetail from '../../components/Retirement/RetirementDetail';\r\nimport { setInsuranceFormState, getAnonymousSession, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { getSessionParams } from '../../actions/retirementActions';\r\nimport { gaTag, gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass RetirementDetailContainer extends Component {\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.DETAILFORM.index);\r\n    gaTag({\r\n      page_title: 'Retirement - Detail Form',\r\n      page_path: '/retirement/detailform',\r\n    });\r\n    ampTag('RetireDetailsS');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      plansData,\r\n      isLoggedIn,\r\n      profileValues,\r\n      piggyCallback,\r\n      retirementFields,\r\n      checkOutOthers,\r\n      sessionId,\r\n      history,\r\n    } = this.props;\r\n\r\n    if (!plansData) {\r\n      return null;\r\n    }\r\n\r\n    const selectedData = plansData;\r\n\r\n    let planDetails = {\r\n      logo: Logos.others,\r\n      logoDesc: '',\r\n      planName: '',\r\n      planTotal: null,\r\n    };\r\n\r\n    try {\r\n      planDetails = {\r\n        logo: Logos[selectedData.info.insurer_slug],\r\n        logoDesc: `${selectedData.info.insurer_name}.svg`,\r\n        planName: selectedData.info.product_name,\r\n        planTotal: `$${selectedData.policyInfo[selectedData.planType].net_price.toFixed(2)}`,\r\n      };\r\n    } catch (error) {\r\n      console.log('Get plan details failed');\r\n    }\r\n\r\n    return (\r\n      <RetirementDetail\r\n        checkOutOthers={checkOutOthers}\r\n        retirementFields={retirementFields}\r\n        sessionId={sessionId}\r\n        selectedData={selectedData}\r\n        planDetails={planDetails}\r\n        isLoggedIn={isLoggedIn}\r\n        piggyCallback={piggyCallback}\r\n        changePlan={() => {\r\n          history.goBack();\r\n          gaEvent('Retirement - DetailForm - ChangePlan', {\r\n            event_category: 'Retirement',\r\n            event_label: 'Retirement - DetailForm - ChangePlan',\r\n          });\r\n        }}\r\n        profileValues={profileValues}\r\n        // submitCallback={() => { setFormState(FORMSTATES.CHECKOUT); }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nRetirementDetailContainer.defaultProps = {\r\n  sessionId: null,\r\n  plansData: null,\r\n};\r\n\r\nRetirementDetailContainer.propTypes = {\r\n  plansData: PropTypes.object,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  profileValues: PropTypes.object.isRequired,\r\n  retirementFields: PropTypes.object.isRequired,\r\n  checkOutOthers: PropTypes.func.isRequired,\r\n  sessionId: PropTypes.string,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  retirementForm: getFormValues('retirement')(state),\r\n  retirementFields: state.retirement.retirementFields,\r\n  profileValues: state.userDetails,\r\n  plansData: state.retirement.selectedPlanData,\r\n  sessionId: state.insurance.sessionId,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  getAnonymousSession: (params) => {\r\n    dispatch(getAnonymousSession(params, true));\r\n  },\r\n});\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => ({\r\n  ...ownProps,\r\n  ...propsFromState,\r\n  ...propsFromDispatch,\r\n  checkOutOthers: (detailForm) => {\r\n    propsFromDispatch.getAnonymousSession(getSessionParams(\r\n      propsFromState.retirementForm,\r\n      detailForm,\r\n      propsFromState.plansData,\r\n    ), true);\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(RetirementDetailContainer));\r\n","/**\r\n * RetirementRouteContainer.js\r\n * The wrapper container for retirement\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { connect } from 'react-redux';\r\nimport { change, reset } from 'redux-form';\r\nimport { /* Prompt, */ withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { resetCompare } from '../../actions/compareActions';\r\nimport { getPromoGiveaways, resetInsuranceForm, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { clearRetirementData } from '../../actions/retirementActions';\r\nimport { isProduction } from '../../lib/tagFunctions';\r\n\r\nimport StepProgressBar from '../../components/Templates/StepProgressBar/StepProgressBar';\r\nimport RefreshTimer from '../../components/Templates/RefreshTimer/RefreshTimer';\r\n\r\nimport RetirementMainContainer from './RetirementMainContainer';\r\nimport RetirementChoosePlanContainer from './RetirementChoosePlanContainer';\r\nimport RetirementDetailContainer from './RetirementDetailContainer';\r\n\r\nimport { routeHandler } from '../../lib/helperFunctions';\r\n\r\nconst formName = 'retirement';\r\nconst detailFormName = 'retirement-detail';\r\n\r\nclass RetirementRouteContainer extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { formIndex, isMounted } = prevState;\r\n    const { formState, match, history } = nextProps;\r\n\r\n    if (isMounted) {\r\n      const routeResult = routeHandler(formName, formState, formIndex, match, history);\r\n      if (routeResult && routeResult.formIndex !== null) {\r\n        return ({\r\n          formIndex: routeResult.formIndex,\r\n        });\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      formIndex: 0,\r\n    };\r\n\r\n    const {\r\n      resetStoreForm,\r\n      retirementPromoGiveAway,\r\n      clearData,\r\n      history,\r\n    } = this.props;\r\n\r\n    history.replace(`/retirement${history.location.search}`);\r\n\r\n    clearData();\r\n    this.props.resetCompare();\r\n    this.props.resetInsuranceForm();\r\n\r\n    resetStoreForm('retirement');\r\n    resetStoreForm('retirement-detail');\r\n\r\n    if (retirementPromoGiveAway === undefined) {\r\n      this.props.getPromoGiveaways();\r\n    }\r\n\r\n    this.setInitialFormState = this.setInitialFormState.bind(this);\r\n    this.renderStepProgress = this.renderStepProgress.bind(this);\r\n    this.renderLifeForms = this.renderLifeForms.bind(this);\r\n    this.changeUserDetails = this.changeUserDetails.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // window.addEventListener('beforeunload', this.handleLeavePage);\r\n    this.setInitialFormState();\r\n    this.setState({\r\n      // eslint-disable-next-line\r\n      isMounted: true,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { clearData, resetStoreForm } = this.props;\r\n    clearData();\r\n    this.props.resetCompare();\r\n    this.props.resetInsuranceForm();\r\n\r\n    resetStoreForm('retirement');\r\n    resetStoreForm('retirement-detail');\r\n  }\r\n\r\n  setInitialFormState() {\r\n    const { changeForm } = this.props;\r\n\r\n    changeForm(formName, 'birth_date', '01 Jan 1990');\r\n    changeForm(formName, 'retirement_age', '60');\r\n    changeForm(formName, 'premium_term', '15 years');\r\n    changeForm(formName, 'payout_term', '15 years');\r\n\r\n    this.changeUserDetails();\r\n  }\r\n\r\n  changeUserDetails() {\r\n    const { userDetails, changeForm } = this.props;\r\n\r\n    if (userDetails) {\r\n      const surname = userDetails && userDetails.surname ? userDetails.surname : '';\r\n      const firstname = userDetails && userDetails.firstName ? ` ${userDetails.firstName}` : '';\r\n\r\n      changeForm(detailFormName, 'email', userDetails.email);\r\n      changeForm(detailFormName, 'name', `${surname}${firstname}`);\r\n      changeForm(detailFormName, 'birth_date', userDetails.dateOfBirth);\r\n      changeForm(detailFormName, 'mobile_number', userDetails.contact);\r\n    }\r\n  }\r\n\r\n  renderStepProgress() {\r\n    const { formIndex } = this.state;\r\n    return (\r\n      <StepProgressBar\r\n        maxWidth=\"556px\"\r\n        formState={formIndex}\r\n        inputList={[\r\n          'Choose Plan',\r\n          'Details',\r\n        ]}\r\n        form=\"life\"\r\n        stateList={[\r\n          FORMSTATES.CHOOSEPLAN,\r\n          FORMSTATES.DETAILFORM,\r\n        ]}\r\n        stateDescriptions={[\r\n          { main: '' /* 'Choose your Plan', sub: 'Compare price plans from multiple companies' */},\r\n          { main: 'Fill in your details - Get $5 Credits' },\r\n        ]}\r\n        charged={false}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderLifeForms() {\r\n    const { formIndex } = this.state;\r\n    const {\r\n      userDetails,\r\n    } = this.props;\r\n\r\n    const isLoggedIn = !_.isEmpty(userDetails);\r\n\r\n\r\n    switch (formIndex) {\r\n      case FORMSTATES.CHOOSEPLAN.index:\r\n        return <RetirementChoosePlanContainer isLoggedIn={isLoggedIn} />;\r\n      case FORMSTATES.DETAILFORM.index:\r\n        return (\r\n          <RetirementDetailContainer\r\n            isLoggedIn={isLoggedIn}\r\n            piggyCallback={this.changeUserDetails}\r\n          />\r\n        );\r\n      default:\r\n        return <RetirementMainContainer isLoggedIn={isLoggedIn} />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { retirementPromoGiveAway, constants } = this.props;\r\n\r\n    if (!constants || retirementPromoGiveAway === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const meta = isProduction ? 'PolicyPal, retirement insurance, singapore retirement insurance, retirement planning, retirement, CPF, annuity, financial planning, pension, 401k, retirement calculator, retiree, retirement accounts, retirement quotes, best retirement plans, retirement fund, insured retirement plan, retirement planning singapore, 401k plan, early retirement, pension plan' : '';\r\n    return (\r\n      <Fragment>\r\n        <Helmet>\r\n          <meta name=\"keywords\" content={meta} />\r\n          <title>PolicyPal 2.0 - Retirement Insurance</title>\r\n          <meta name=\"title\" content=\"PolicyPal 2.0 - Retirement Insurance\" />\r\n          <meta name=\"description\" content=\"Browse products for retirement insurance.\" />\r\n        </Helmet>\r\n        {/* {\r\n          formState !== FORMSTATES.MAIN ?\r\n            <Prompt\r\n              when={true}\r\n              message=\"Are you sure you want to leave current page?\"\r\n            />\r\n          :\r\n            null\r\n        } */}\r\n        {this.renderStepProgress()}\r\n        {this.renderLifeForms()}\r\n        <RefreshTimer ref={(node) => {\r\n            if (!this.refresher) {\r\n              node.invokeNewTimer();\r\n            }\r\n            this.refresher = node;\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nRetirementRouteContainer.defaultProps = {\r\n  userDetails: null,\r\n  retirementPromoGiveAway: undefined,\r\n  constants: null,\r\n};\r\n\r\nRetirementRouteContainer.propTypes = {\r\n  clearData: PropTypes.func.isRequired,\r\n  resetCompare: PropTypes.func.isRequired,\r\n  getPromoGiveaways: PropTypes.func.isRequired,\r\n  resetInsuranceForm: PropTypes.func.isRequired,\r\n  changeForm: PropTypes.func.isRequired,\r\n  resetStoreForm: PropTypes.func.isRequired,\r\n  userDetails: PropTypes.object,\r\n  retirementPromoGiveAway: PropTypes.object,\r\n  constants: PropTypes.object,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  retirementPromoGiveAway: state.insurance.promoGiveaways.retirement,\r\n  formState: state.insurance.formState,\r\n  constants: state.insurance.constants,\r\n  userDetails: state.userDetails.data,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeForm: (form, key, value) => (\r\n    dispatch(change(form, key, value))\r\n  ),\r\n  resetInsuranceForm: () => (\r\n    dispatch(resetInsuranceForm())\r\n  ),\r\n  resetStoreForm: form => (\r\n    dispatch(reset(form))\r\n  ),\r\n  getPromoGiveaways: () => {\r\n    dispatch(getPromoGiveaways('retirement'));\r\n  },\r\n  resetCompare: () => {\r\n    dispatch(resetCompare());\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearRetirementData());\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RetirementRouteContainer));\r\n","module.exports = __webpack_public_path__ + \"static/media/Avatar.95378d46.svg\";","/**\r\n * MultiCompareInner.js\r\n * Multi Compare view with different insurers\r\n * Contains the main policy type tab view logic\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Row } from 'reactstrap';\r\n\r\nimport TabView from '../../Templates/TabView/TabView';\r\nimport CompareView from '../../Templates/CompareView/CompareView';\r\nimport ChangeInitialFormData from '../../Templates/ChangeInitialFormData/ChangeInitialFormData';\r\n\r\nimport Enquiry from '../../Templates/Enquiry/Enquiry';\r\n\r\nimport { setPlanType, setSelectedIndex } from '../../../actions/compareActions';\r\n\r\n// The default tabs array\r\nconst resultToMatch = ['basic', 'essential', 'elite', 'default'];\r\n\r\nclass MultiCompareInner extends Component {\r\n  /**\r\n   * Lifecycle Method - getDerivedStateFromProps\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    // Goes here first before did mount\r\n    // Get new policy available policy types\r\n    if (nextProps.data.policyTypes !== prevState.policyTypes) {\r\n      return ({\r\n        policyTypes: nextProps.data.policyTypes,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { data } = this.props;\r\n    // tabIndex - The current tab index in effect\r\n    // currentTab - The name of the current tab\r\n    // tabs - The tabs array data\r\n    // policyTypes - The possible policy types to display\r\n    this.state = {\r\n      tabIndex: 0,\r\n      currentTab: null,\r\n      tabs: null,\r\n      policyTypes: data.policyTypes,\r\n    };\r\n\r\n    this.handleTabClick = this.handleTabClick.bind(this);\r\n    this.renderTabs = this.renderTabs.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    // Render inital tabs\r\n    const tabs = this.renderTabs(null, true);\r\n    // Set initial plan type\r\n    this.props.setPlanType(_.lowerCase(tabs.currentTab));\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   */\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { policyTypes, tabs, currentTab } = this.state;\r\n    const { data } = this.props;\r\n\r\n    // Render new tabs if policy types are changed\r\n    if (!_.isEqual(policyTypes, nextState.policyTypes)) {\r\n      this.renderTabs(nextState.policyTypes);\r\n    }\r\n\r\n    // Update only when tabs or data are updated\r\n    return tabs !== nextState.tabs ||\r\n          currentTab !== nextState.currentTab ||\r\n          data !== nextProps.data;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { tabs, tabIndex } = this.state;\r\n    const { selectedIndex, initialIndex } = this.props;\r\n\r\n    // If new tabs\r\n    if (tabs !== prevState.tabs) {\r\n      if (this.categoryTab && this.categoryTab.wrappedInstance) {\r\n        // If using back previous selected index and not the same state as local index\r\n        const isCameFromBackButton = selectedIndex && selectedIndex !== tabIndex;\r\n        // If this is the first time user enter compare view\r\n        const isFirstTime = selectedIndex === null && initialIndex;\r\n\r\n        if (isCameFromBackButton || isFirstTime) {\r\n          const currIncomingIndex = isCameFromBackButton ? selectedIndex : initialIndex;\r\n          // Check if previous selected index is still within range\r\n          const tabIndexToUse = currIncomingIndex < tabs.length ? currIncomingIndex : 0;\r\n          // Go to the tab and set new state;\r\n          this.categoryTab.wrappedInstance.goToIndex(tabIndexToUse, true);\r\n          this.setState({ tabIndex: tabIndexToUse });\r\n\r\n          // Set index to store\r\n          this.props.setSelectedIndex(tabIndexToUse);\r\n          return;\r\n        }\r\n\r\n        // This happens when tabs are not the same when changing form within\r\n        // compare view. It will try to go to the last selected plan type\r\n        this.categoryTab.wrappedInstance.goToIndex(tabIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When clicked on main tabs\r\n   *\r\n   * @param {string} type - Selected plan type\r\n   * @param {number} index - Tab index\r\n   */\r\n  handleTabClick(type, index) {\r\n    // Set current plan type\r\n    this.setState({\r\n      currentTab: type,\r\n    });\r\n\r\n    this.props.setPlanType(type);\r\n    this.props.setSelectedIndex(index);\r\n  }\r\n\r\n  /**\r\n   * Render Main tabs\r\n   *\r\n   * @param {array} policyTypes - The avaliable policy types\r\n   * @param {bool} isInitial - If is initial first time load\r\n   */\r\n  renderTabs(policyTypes = null, isInitial = false) {\r\n    const { policyTypes: oldPolicyTypes, currentTab } = this.state;\r\n    const { planImages } = this.props;\r\n\r\n    // Use new policy types if avaliable\r\n    const policyTypesToUse = policyTypes || oldPolicyTypes;\r\n\r\n    // The tab index\r\n    let index = 0;\r\n\r\n    // Match possible policy types to default types,\r\n    // with positioning in consideration\r\n    const tabs = _.reduce(resultToMatch, (result, type) => {\r\n      if (_.findIndex(policyTypesToUse, planType => planType === type) !== -1) {\r\n        const theIndex = index;\r\n        const image = planImages ? planImages[type] : null;\r\n        // Set desc, image, and onClick for the tab\r\n        result.push({\r\n          desc: _.startCase(type),\r\n          img: image,\r\n          onClick: () => {\r\n            this.handleTabClick(type, theIndex);\r\n          },\r\n        });\r\n        index += 1;\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // Default currenTab name is from first item\r\n    let tabInfo = { currentTab: _.lowerCase(tabs[0].desc) };\r\n\r\n    // If tabs is changed while navigating in compare view\r\n    if (!isInitial) {\r\n      // Try to find if the old tab name still exists in new one\r\n      const currentTabIndex = _.findIndex(tabs, tab => _.lowerCase(tab.desc) === currentTab);\r\n      // Use 0 if no longer exists\r\n      const tabIndexToUse = currentTabIndex !== -1 ? currentTabIndex : 0;\r\n      // New tab\r\n      const newTab = _.lowerCase(tabs[tabIndexToUse].desc);\r\n      // Set new tab info\r\n      tabInfo = {\r\n        tabIndex: tabIndexToUse,\r\n        currentTab: newTab,\r\n      };\r\n\r\n      // Set store data\r\n      this.props.setPlanType(newTab);\r\n      this.props.setSelectedIndex(tabIndexToUse);\r\n    }\r\n\r\n    // Return tabs\r\n    const result = {\r\n      ...tabInfo,\r\n      tabs,\r\n    };\r\n\r\n    this.setState(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  render() {\r\n    const {\r\n      currentTab,\r\n      tabs,\r\n    } = this.state;\r\n\r\n    const {\r\n      data,\r\n      scrollPopUpCallback,\r\n      submitCallback,\r\n      editForm,\r\n      form,\r\n      buttonDesc,\r\n      forceFixedOnDesktop,\r\n      category,\r\n    } = this.props;\r\n\r\n    // console.log(plansData);\r\n    if (!data || !tabs || !currentTab) {\r\n      return null;\r\n    }\r\n\r\n    const tabStyle = currentTab === 'default' ? 'inner-form-no-tabs' : '';\r\n\r\n    return (\r\n      <Fragment>\r\n        <Row className={`inner-form-container ${tabStyle} inner-form-extra-padding`} noGutters>\r\n          <TabView\r\n            tabs={tabs}\r\n            isDataFadeOnly\r\n            isDisableDropdown\r\n            big\r\n            name={`${form}-tab`}\r\n            ref={node => this.categoryTab = node}\r\n          >\r\n            {[<CompareView\r\n              category={category}\r\n              key=\"overview\"\r\n              className=\"overview-container-padding\"\r\n              notAccordion\r\n              data={data}\r\n              currentTab={currentTab}\r\n              scrollPopUpCallback={scrollPopUpCallback}\r\n              productChangable\r\n              editForm={\r\n                <ChangeInitialFormData\r\n                  submitCallback={submitCallback}\r\n                  form={form}\r\n                  headerValue={editForm.headerValue}\r\n                  valuesToListen={editForm.valuesToListen}\r\n                  conditions={editForm.conditions}\r\n                >\r\n                  {editForm.editDetail}\r\n                </ChangeInitialFormData>\r\n              }\r\n              buttonDesc={buttonDesc}\r\n              forceFixedOnDesktop={forceFixedOnDesktop}\r\n            />]}\r\n          </TabView>\r\n          <Enquiry />\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nMultiCompareInner.defaultProps = {\r\n  initialIndex: 0,\r\n  selectedIndex: null,\r\n  data: null,\r\n  planImages: null,\r\n  buttonDesc: null,\r\n  forceFixedOnDesktop: false,\r\n  category: null,\r\n};\r\n\r\nMultiCompareInner.propTypes = {\r\n  initialIndex: PropTypes.number,\r\n  selectedIndex: PropTypes.number,\r\n  setSelectedIndex: PropTypes.func.isRequired,\r\n  setPlanType: PropTypes.func.isRequired,\r\n  data: PropTypes.object,\r\n  planImages: PropTypes.object,\r\n  scrollPopUpCallback: PropTypes.func.isRequired,\r\n  submitCallback: PropTypes.func.isRequired,\r\n  editForm: PropTypes.object.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  buttonDesc: PropTypes.string,\r\n  forceFixedOnDesktop: PropTypes.bool,\r\n  category: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedIndex: state.compare.selectedIndex,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedIndex: (index) => {\r\n    dispatch(setSelectedIndex(index));\r\n  },\r\n  setPlanType: (type) => {\r\n    dispatch(setPlanType(type));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareInner);\r\n","/**\r\n * MultiCompareView.js\r\n * Multi Compare view with different insurers\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { parseData } from '../../../actions/insuranceActions';\r\nimport { setSelectedInsurers } from '../../../actions/compareActions';\r\nimport { setLoading, clearLoading } from '../../../actions/loadingScreenActions';\r\nimport { setRestrictionPopup } from '../../../actions/restrictionsActions';\r\nimport MultiCompareInner from './MultiCompareInner';\r\n\r\nclass MultiCompareView extends Component {\r\n  /**\r\n   * Lifecycle Method - getDerivedStateFromProps\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    try {\r\n      const {\r\n        currentInsurers,\r\n      } = prevState;\r\n\r\n      const {\r\n        plansData,\r\n        validInsurersList,\r\n        setFormState,\r\n        loadingEnd,\r\n        mainForm,\r\n        setSelectedPlanData,\r\n        trackingTags,\r\n      } = nextProps;\r\n\r\n      if (plansData && plansData[0] === 'INVALID') {\r\n        return null;\r\n      }\r\n\r\n      // If plansData and validInsurersList are retrieved, parse data for display\r\n      if (validInsurersList && plansData) {\r\n        let newDefaultInsurers = currentInsurers || {};\r\n        if (!currentInsurers && plansData) {\r\n          newDefaultInsurers = _.map(plansData, plan => plan.info.insurer_slug);\r\n          newDefaultInsurers = newDefaultInsurers.slice(0, 3);\r\n          nextProps.setSelectedInsurers(newDefaultInsurers);\r\n        }\r\n\r\n        return {\r\n          parsedData: parseData(\r\n            plansData,\r\n            validInsurersList,\r\n            newDefaultInsurers,\r\n            mainForm.trip_type,\r\n            () => {\r\n              setFormState();\r\n            },\r\n            setSelectedPlanData,\r\n            loadingEnd,\r\n            nextProps.setRestrictionPopup,\r\n            null,\r\n            trackingTags,\r\n          ),\r\n          currentInsurers: newDefaultInsurers,\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      mainForm,\r\n      parseForm,\r\n      getPlans,\r\n      getInsurersList,\r\n      loading,\r\n      defaultInsurers,\r\n      plansData,\r\n      validInsurersList,\r\n      selectedInsurers,\r\n      setSelectedPlanData,\r\n      loadingEnd,\r\n      setFormState,\r\n      loadingFailBackState,\r\n      clearData,\r\n      trackingTags,\r\n    } = this.props;\r\n\r\n    try {\r\n      // If fresh init\r\n      if (!plansData || !validInsurersList) {\r\n        // Initally, get the params from mainform and default insurers\r\n        const parsedParams = parseForm(mainForm, defaultInsurers);\r\n\r\n        // Set loading\r\n        loading(() => {\r\n          clearData();\r\n          loadingFailBackState();\r\n        }, 'No available plans found.', 30000, '');\r\n\r\n        // Get plans and valid insurers list\r\n        getPlans(parsedParams);\r\n        getInsurersList(parsedParams);\r\n\r\n        // Set initial default insurers\r\n        this.props.setSelectedInsurers(defaultInsurers);\r\n\r\n        // currentInsurers: Current selected list of insurers\r\n        // parsedData: The parsed data to display\r\n        // hoveredIndex: The current hovered index on the insurer selection dropdown, default is 0\r\n        this.state = {\r\n          currentInsurers: defaultInsurers,\r\n          parsedData: null,\r\n        };\r\n      } else {\r\n        // Set existing selected insurers and get old parsed data\r\n        // (Will reach this condition when using the back button)\r\n        this.state = {\r\n          currentInsurers: selectedInsurers,\r\n          parsedData: parseData(\r\n            plansData,\r\n            validInsurersList,\r\n            selectedInsurers,\r\n            mainForm.trip_type,\r\n            () => setFormState(),\r\n            setSelectedPlanData,\r\n            loadingEnd,\r\n            this.props.setRestrictionPopup,\r\n            null,\r\n            trackingTags,\r\n          ),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      // eslint-disable-next-line\r\n    }\r\n\r\n    this.getNewData = this.getNewData.bind(this);\r\n    this.onInsurerClick = this.onInsurerClick.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      plansData,\r\n      loadingEnd,\r\n      loading,\r\n      clearData,\r\n      loadingFailBackState,\r\n    } = this.props;\r\n\r\n    if (plansData && plansData[0] === 'INVALID') {\r\n      loadingEnd();\r\n      if (!this.isLoading) {\r\n        this.isLoading = true;\r\n        setTimeout(() =>\r\n          loading(() => {\r\n            clearData();\r\n            loadingFailBackState();\r\n            this.isLoading = false;\r\n          }, 'No available plans found.', 50, ''), 500);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   */\r\n  /* shouldComponentUpdate(nextProps, nextState) {\r\n    const { parsedData } = this.state;\r\n\r\n    // Render only is new or policyTypes changed\r\n    return !(parsedData && nextState.parsedData) ||\r\n          !_.isEqual(parsedData.policyTypes, nextState.parsedData.policyTypes);\r\n  } */\r\n\r\n  /**\r\n   * Handle selection on insurer list\r\n   *\r\n   * @param {object} data - The insurer list item data\r\n   */\r\n  onInsurerClick(data, hoveredIndex) {\r\n    // parsedData: The parsed data to display\r\n    const { parsedData } = this.state;\r\n\r\n    // Remap current insurers as sometimes when change form data, the insurers\r\n    // can be less than 3.\r\n    // console.log(parsedData.selectedInsurers, hoveredIndex);\r\n    const currentInsurers = _.reduce(parsedData.selectedInsurers, (result, insurer) => {\r\n      if (insurer) {\r\n        result.push(insurer.insurerSlug);\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // Change insurer of current selected position\r\n    currentInsurers[hoveredIndex] = data.insurer_slug;\r\n\r\n    // Set current insurers\r\n    this.setState({\r\n      currentInsurers,\r\n    });\r\n\r\n    // Set current insurers in store\r\n    this.props.setSelectedInsurers(currentInsurers);\r\n\r\n    // Get new compare data based on the new selected insurers\r\n    this.getNewData(currentInsurers);\r\n  }\r\n\r\n  /**\r\n   * Get new compare data.\r\n   * Used when changing insurers or changing form fields.\r\n   *\r\n   * @param {array} incomingInsurers - selected insurers\r\n   */\r\n  getNewData(incomingInsurers = null) {\r\n    const { currentInsurers } = this.state;\r\n    const {\r\n      loading,\r\n      getPlans,\r\n      getInsurersList,\r\n      clearData,\r\n      mainForm,\r\n      parseForm,\r\n      loadingFailBackState,\r\n    } = this.props;\r\n\r\n    // If init, use default, else the current array\r\n    const insurerToUse = incomingInsurers || currentInsurers;\r\n    // Parse the form for params\r\n    const parsedParams = parseForm(mainForm, insurerToUse);\r\n    // Clear data in store first, so it will detect as fresh props from store\r\n    clearData();\r\n    // Set loading screen\r\n    loading(() => {\r\n      clearData();\r\n      loadingFailBackState();\r\n    }, 'No available plans found.', 30000, '');\r\n    // Get plans and insurer lists\r\n    getPlans(parsedParams);\r\n    getInsurersList(parsedParams);\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  render() {\r\n    try {\r\n      const { parsedData } = this.state;\r\n      const {\r\n        editForm,\r\n        form,\r\n        planImages,\r\n        initialIndex,\r\n        buttonDesc,\r\n        forceFixedOnDesktop,\r\n        category,\r\n      } = this.props;\r\n\r\n      // Do not render if no data\r\n      if (!parsedData) {\r\n        return null;\r\n      }\r\n\r\n      // console.log(parsedData);\r\n      return (\r\n        <MultiCompareInner\r\n          category={category}\r\n          initialIndex={initialIndex}\r\n          planImages={planImages}\r\n          data={parsedData}\r\n          form={form}\r\n          editForm={editForm}\r\n          scrollPopUpCallback={this.onInsurerClick}\r\n          submitCallback={this.getNewData}\r\n          buttonDesc={buttonDesc}\r\n          forceFixedOnDesktop={forceFixedOnDesktop}\r\n        />\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nMultiCompareView.defaultProps = {\r\n  initialIndex: 0,\r\n  plansData: null,\r\n  validInsurersList: null,\r\n  selectedInsurers: null,\r\n  trackingTags: null,\r\n  planImages: null,\r\n  defaultInsurers: null,\r\n  buttonDesc: null,\r\n  forceFixedOnDesktop: false,\r\n  category: null,\r\n};\r\n\r\nMultiCompareView.propTypes = {\r\n  setSelectedInsurers: PropTypes.func.isRequired,\r\n  mainForm: PropTypes.object.isRequired,\r\n  parseForm: PropTypes.func.isRequired,\r\n  getPlans: PropTypes.func.isRequired,\r\n  getInsurersList: PropTypes.func.isRequired,\r\n  clearData: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  defaultInsurers: PropTypes.array,\r\n  editForm: PropTypes.object.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  planImages: PropTypes.object,\r\n  initialIndex: PropTypes.number,\r\n  plansData: PropTypes.array,\r\n  validInsurersList: PropTypes.array,\r\n  selectedInsurers: PropTypes.array,\r\n  setSelectedPlanData: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  setRestrictionPopup: PropTypes.func.isRequired,\r\n  loadingFailBackState: PropTypes.func.isRequired,\r\n  trackingTags: PropTypes.object,\r\n  buttonDesc: PropTypes.string,\r\n  forceFixedOnDesktop: PropTypes.bool,\r\n  category: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedInsurers: state.compare.selectedInsurers,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loading: (callBack, errorMsg, time, mainMsg) => {\r\n    dispatch(setLoading(callBack, errorMsg, time, mainMsg));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n  setRestrictionPopup: (data) => {\r\n    dispatch(setRestrictionPopup(data));\r\n  },\r\n  setSelectedInsurers: (array) => {\r\n    dispatch(setSelectedInsurers(array));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareView);\r\n","module.exports = __webpack_public_path__ + \"static/media/Dollar.962423c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Umbrella.d081f752.svg\";"],"sourceRoot":""}