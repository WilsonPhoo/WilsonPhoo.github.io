{"version":3,"sources":["components/FormsV3/FormInputWrapper/FormInputWrapper.js","components/Templates/ModalPopup/ModalPopup.js","components/FormsV3/DropDown/DropDown.js","components/FormsV3/Checkbox/Checkbox.js"],"names":["FormInputWrapper","_this$props","this","props","extraInfo","desc","errorString","smallMargin","className","isDateRange","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","join","children","Component","defaultProps","ModalPopup","_this","Object","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","showModal","setHiddenAuto","bind","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","nextProps","setState","clearInterval","setHiddenInterval","_this2","setInterval","_","includes","document","body","style","overflow","closeModal","header","footer","backdropClassName","zIndex","react__WEBPACK_IMPORTED_MODULE_7___default","reactstrap__WEBPACK_IMPORTED_MODULE_8__","isOpen","size","concat","tag","toggle","maxItemsDisplay","defaultHeight","resultNullString","display_name","value","DropDown","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","dropList","numItemsDisplay","isMultiple","height","numItems","maxheight","min","length","isOpened","listItems","selectedString","listHeight","multipleSelectedElements","listElementsCounter","clientHeight","extraPadding","noTransition","updateDimensions","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","handleClickOutside","renderListItems","renderTextInput","handleSelectClick","handleOnInputChange","handleSetMultipleSelectedItem","handleDestroySelected","handleInputKeyPress","handleItemKeyPress","handleChange","handleExit","handleBlur","handleFocus","prevState","isEqual","initialListItems","_this$props2","addEventListener","window","overrideValue","prevProps","_this$props3","isElements","isEmpty","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","removeEventListener","_this$state","newHeight","selectedItemsContainer","childElementCount","getBoundingClientRect","bottom","top","error","inputValue","_this$props4","name","onChange","notForm","valueChangeCallback","inputField","event","wrapperRef","contains","target","isFromFocus","_this$state2","_this$props5","placeholderString","key","preventDefault","index","Math","max","listElements","focus","stopPropagation","isOpenOnly","arguments","undefined","_this$state3","_this$props6","item","_this$state4","_this$state5","newArr","find","i","push","selectedContainer","slice","indexOf","splice","result","filter","toString","toUpperCase","relatedTarget","_this$state7","_this$props7","resultValue","isError","finalString","some","obj","toLowerCase","_this3","_this$state8","map","react__WEBPACK_IMPORTED_MODULE_10___default","onClick","handleSelectItemClick","role","tabIndex","onKeyDown","ref","node","_this4","type","onMouseUp","src","Cross","alt","_this5","_this$props8","isDisableTyping","reactstrap__WEBPACK_IMPORTED_MODULE_11__","placeholder","autoComplete","disabled","_this6","_this$state9","_this$props9","maxWidth","noInternalDesc","logo","actualListheight","dropDownOpenStyle","arrowStyle","transitionStyle","listStyle","multipleStyle","isErrorStyle","noInternalDescStyle","titleStyle","marginTop","marginBottom","logoImg","MagnifyGlass","zIndexStyle","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_13__","onBlur","onFocus","minHeight","paddingTop","paddingBottom","renderMultipleSelectedElements","onKeyPress","Arrow","react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_12__","listContainer","Checkbox","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","id","checked"],"mappings":"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","file":"static/js/5.12013a06.chunk.js","sourcesContent":["/**\r\n * FormInputWrapper.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FormInputWrapper.scss';\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass FormInputWrapper extends Component {\r\n  render() {\r\n    const {\r\n      extraInfo,\r\n      desc,\r\n      errorString,\r\n      smallMargin,\r\n      className,\r\n      isDateRange,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className={['input-wrapper-main-v3 input-wrapper-error', smallMargin && 'my-1', className].join(' ')}\r\n      >\r\n        {\r\n          // eslint-disable-next-line\r\n          isDateRange ?\r\n            <div className=\"d-flex\">\r\n              <p className=\"input-wrapper-desc w-50\">Start Date</p>\r\n              <p className=\"input-wrapper-desc w-50\">End Date</p>\r\n            </div>\r\n          :\r\n          desc !== null ?\r\n            <p className=\"input-wrapper-desc\">{desc}</p>\r\n          :\r\n            null\r\n        }\r\n        {this.props.children}\r\n        {\r\n          extraInfo !== null ?\r\n            <div className=\"extra-info-container\">\r\n              {extraInfo}\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n        {\r\n          errorString !== null ?\r\n            <div className=\"input-wrapper-error-text\">\r\n              <p>{errorString}</p>\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormInputWrapper.defaultProps = {\r\n  desc: null,\r\n  extraInfo: null,\r\n  errorString: null,\r\n  smallMargin: false,\r\n  className: '',\r\n  isDateRange: false,\r\n};\r\n\r\n\r\nFormInputWrapper.propTypes = {\r\n  desc: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n  errorString: PropTypes.string,\r\n  smallMargin: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  isDateRange: PropTypes.bool,\r\n};\r\n\r\nexport default FormInputWrapper;\r\n","/**\r\n * ChangeInitialFormData.js\r\n * This is the green pencil button that appears mainly on\r\n * the compare view which will render the Edit Detail forms\r\n * of each category.\r\n *\r\n * Users will be able to change that form through this component\r\n * and will do a callback to update any changes, eg for compare view.\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n} from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ModalPopup.scss';\r\n\r\nclass ModalPopup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showModal: props.showModal,\r\n    };\r\n\r\n    this.setHiddenAuto = this.setHiddenAuto.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { showModal } = this.props;\r\n\r\n    if (!showModal) {\r\n      this.setHiddenAuto();\r\n    }\r\n  }\r\n\r\n  // Toggle modal\r\n  componentWillReceiveProps(nextProps) {\r\n    const { showModal } = this.props;\r\n    if (nextProps.showModal !== showModal) {\r\n      this.setState({ showModal: nextProps.showModal });\r\n\r\n      if (!nextProps.showModal) {\r\n        this.setHiddenAuto();\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.setHiddenInterval);\r\n  }\r\n\r\n\r\n  setHiddenAuto() {\r\n    clearInterval(this.setHiddenInterval);\r\n    this.setHiddenInterval = setInterval(() => {\r\n      if (!this.props.showModal && !_.includes(document.body.style.overflow, 'auto')) {\r\n        document.body.style.overflow = 'hidden auto';\r\n        clearInterval(this.setHiddenInterval);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  render() {\r\n    const { showModal } = this.state;\r\n    const {\r\n      closeModal,\r\n      header,\r\n      body,\r\n      footer,\r\n      className,\r\n      backdropClassName,\r\n      zIndex,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Modal\r\n        isOpen={showModal}\r\n        size=\"lg\"\r\n        className={`modal-popup-custom ${className}`}\r\n        backdropClassName={backdropClassName}\r\n        zIndex={zIndex}\r\n      >\r\n        {\r\n          header &&\r\n          <ModalHeader\r\n            tag=\"h3\"\r\n            toggle={closeModal}\r\n          >\r\n            {header}\r\n          </ModalHeader>\r\n        }\r\n        {\r\n          body &&\r\n          <ModalBody>\r\n            {body}\r\n          </ModalBody>\r\n        }\r\n        {\r\n          footer &&\r\n          <ModalFooter>\r\n            {footer}\r\n          </ModalFooter>\r\n        }\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nModalPopup.defaultProps = {\r\n  showModal: false,\r\n  header: null,\r\n  body: null,\r\n  footer: null,\r\n  className: null,\r\n  backdropClassName: null,\r\n  zIndex: 1050,\r\n};\r\n\r\nModalPopup.propTypes = {\r\n  showModal: PropTypes.bool,\r\n  closeModal: PropTypes.func.isRequired,\r\n  header: PropTypes.object,\r\n  body: PropTypes.object,\r\n  footer: PropTypes.object,\r\n  className: PropTypes.string,\r\n  backdropClassName: PropTypes.string,\r\n  zIndex: PropTypes.number,\r\n};\r\n\r\nexport default ModalPopup;\r\n","/**\r\n * DropDown.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\n\r\nimport Arrow from '../../../assets/images/forms/arrow.svg';\r\nimport Cross from '../../../assets/images/forms/cross.svg';\r\nimport MagnifyGlass from '../../../assets/images/forms/magnifyGlass.svg';\r\n\r\nimport './DropDown.scss';\r\nimport './MultipleSelectDropDown.scss';\r\n\r\n// How many items to display\r\nconst maxItemsDisplay = 5;\r\n// Height for dropdown\r\nconst defaultHeight = 48;\r\n// Padding for when multiple items overflow\r\nconst extraPaddingForMultiple = 5;\r\n// Error text to display when error\r\nconst resultNullString = {\r\n  display_name: 'No results found',\r\n  value: null,\r\n};\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass DropDown extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      dropList,\r\n      numItemsDisplay,\r\n    } = nextProps;\r\n\r\n    if (!_.isEqual(dropList, prevState.initialListItems)) {\r\n      const height = defaultHeight;\r\n      const numItems = numItemsDisplay || maxItemsDisplay;\r\n      const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n\r\n      return {\r\n        initialListItems: dropList,\r\n        listItems: dropList,\r\n        maxheight,\r\n        listHeight: maxheight,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {object} props Component props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // dropList - The passed down dropdown list items\r\n    // placeholderString - Placeholder string for input\r\n    // size - Size of this control\r\n    // numItemsDisplay - Max items to display on view\r\n    const {\r\n      dropList,\r\n      numItemsDisplay,\r\n      value,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Get the control height\r\n    const height = defaultHeight;\r\n    // Get number of items to display\r\n    const numItems = numItemsDisplay || maxItemsDisplay;\r\n    // Get the max height of list\r\n    const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n    // isOpened - Whether dropdown is opened\r\n    // isError - Whether there is input error\r\n    // listItems - The actual dropdown list\r\n    // selectedString - The selected item string\r\n    // height - Preferred Control height\r\n    // numItemsDisplay - How many items to display\r\n    // maxheight - Max height of the list\r\n    // listHeight - Height of the list. (Items count + control)\r\n    // multipleSelectedElements - Array of multiple selected items\r\n    // listElementsCounter - Up down selection position\r\n    // clientHeight - Actual height of the control\r\n    this.state = {\r\n      isOpened: false,\r\n      listItems: dropList,\r\n      selectedString: (!isMultiple && value && value.display_name) || '',\r\n      height,\r\n      numItemsDisplay: numItems,\r\n      maxheight,\r\n      listHeight: maxheight,\r\n      multipleSelectedElements: null,\r\n      listElementsCounter: -1,\r\n      clientHeight: height,\r\n      extraPadding: 0,\r\n      noTransition: true,\r\n    };\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    this.renderListItems = this.renderListItems.bind(this);\r\n    this.renderTextInput = this.renderTextInput.bind(this);\r\n    this.handleSelectClick = this.handleSelectClick.bind(this);\r\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\r\n    this.handleSetMultipleSelectedItem = this.handleSetMultipleSelectedItem.bind(this);\r\n    this.handleDestroySelected = this.handleDestroySelected.bind(this);\r\n    this.handleInputKeyPress = this.handleInputKeyPress.bind(this);\r\n    this.handleItemKeyPress = this.handleItemKeyPress.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleExit = this.handleExit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    const { value, isMultiple } = this.props;\r\n\r\n    // Add Handler to handle click outside of screen\r\n    document.addEventListener('mousedown', this.handleClickOutside);\r\n    // Update control height on resize in case it squeezes down\r\n    window.addEventListener('resize', this.updateDimensions);\r\n    // Update for the first time\r\n    this.updateDimensions();\r\n\r\n    const { overrideValue } = this.props;\r\n\r\n    if (value) {\r\n      if (isMultiple) {\r\n        this.setState({\r\n          multipleSelectedElements: value,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (overrideValue) {\r\n      this.handleChange(overrideValue);\r\n    }\r\n\r\n    this.setState({ noTransition: false });\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate(prevProps) {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { overrideValue, value, isMultiple } = this.props;\r\n\r\n    // Use override mode if not using form\r\n    if (!_.isEqual(overrideValue, prevProps.overrideValue)) {\r\n      this.handleChange(overrideValue);\r\n    }\r\n\r\n    const isElements = !_.isEmpty(multipleSelectedElements);\r\n\r\n    if (!_.isEqual(value, prevProps.value)) {\r\n      this.setState({\r\n        selectedString: (value && value.display_name) || '',\r\n      });\r\n    }\r\n\r\n    if (value) {\r\n      if (!isElements || (isElements && !_.isEqual(value, multipleSelectedElements))) {\r\n        if (isMultiple) {\r\n          this.setState({\r\n            multipleSelectedElements: [...value],\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // For re-render fix where multiple changed to single\r\n    if (isElements && !value) {\r\n      this.setState({\r\n        multipleSelectedElements: null,\r\n      });\r\n    }\r\n    // Update control height if necessary, since the\r\n    // height may change after render\r\n    this.updateDimensions();\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentWillUnmount\r\n   */\r\n  componentWillUnmount() {\r\n    // Remove Handler to handle click outside of screen\r\n    document.removeEventListener('mousedown', this.handleClickOutside);\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  /**\r\n   * Get client height of the selection container\r\n   * to determine the height of the whole control.\r\n   * (For multiple only)\r\n   *\r\n   * @param {object} event\r\n   */\r\n  updateDimensions() {\r\n    const { isMultiple } = this.props;\r\n\r\n    // Only multiple will expand\r\n    if (!isMultiple) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      clientHeight,\r\n      height,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    let newHeight = defaultHeight;\r\n    try {\r\n      newHeight = this.selectedItemsContainer.children[this.selectedItemsContainer.childElementCount - 1].getBoundingClientRect().bottom - this.selectedItemsContainer.children[0].getBoundingClientRect().top;\r\n      newHeight = newHeight < defaultHeight ? defaultHeight : newHeight + 10;\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-empty\r\n    }\r\n\r\n    // if client height is not same as DOM, update with padding if expanded\r\n    if (clientHeight !== newHeight) {\r\n      this.setState({\r\n        clientHeight: newHeight,\r\n        extraPadding: newHeight - 2 * extraPadding > height ? extraPaddingForMultiple : 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange(inputValue) {\r\n    const {\r\n      name,\r\n      onChange,\r\n      notForm,\r\n      valueChangeCallback,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    if (notForm) {\r\n      if (valueChangeCallback) {\r\n        valueChangeCallback(inputValue);\r\n      }\r\n      this.inputField.value = inputValue.display_name;\r\n      return;\r\n    }\r\n\r\n    onChange(isMultiple ? 'multiple_select' : 'select', name, inputValue);\r\n  }\r\n\r\n  /**\r\n   * End selection if click on outside\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleClickOutside(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // If clicked outside, go to exit\r\n    if (\r\n      isOpened &&\r\n      this.wrapperRef &&\r\n      !this.wrapperRef.contains(event.target)\r\n    ) {\r\n      // Close it\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n\r\n      // Unset from focus\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle on enter key\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleInputKeyPress(event) {\r\n    const {\r\n      isOpened,\r\n      listElementsCounter,\r\n      selectedString,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const { isMultiple, placeholderString } = this.props;\r\n\r\n    // If pressed on enter, go to exit\r\n    if (event.key === 'Enter') {\r\n      this.handleExit();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Press down arrow from input\r\n    if (event.key === 'ArrowDown') {\r\n      if (isOpened) {\r\n        if (listElementsCounter === -1) {\r\n          event.preventDefault();\r\n        }\r\n        this.handleItemKeyPress(event);\r\n      } else {\r\n        this.setState({\r\n          isOpened: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (\r\n      isMultiple &&\r\n      event.key === 'Backspace' &&\r\n      (selectedString === '' || selectedString === placeholderString) &&\r\n      !_.isEmpty(multipleSelectedElements)\r\n    ) {\r\n      this.handleDestroySelected(multipleSelectedElements[multipleSelectedElements.length - 1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Key press on list items\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleItemKeyPress(event, inputValue) {\r\n    const {\r\n      listElementsCounter,\r\n    } = this.state;\r\n\r\n    let index = listElementsCounter;\r\n\r\n    // If click enter on list item\r\n    if (event.key === 'Enter') {\r\n      // Focus input field\r\n      // this.inputField.focus();\r\n      // Handle exit with the item value\r\n      this.handleExit(inputValue);\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Navigate list with up down arrow\r\n    if (event.key === 'ArrowDown') {\r\n      index = listElementsCounter + 1;\r\n    } else if (event.key === 'ArrowUp') {\r\n      index = listElementsCounter - 1;\r\n    }\r\n\r\n    // Cap index within list\r\n    index = Math.max(0, Math.min(index, this.listElements.length - 1));\r\n    // Focus on the next item\r\n    this.listElements[index].focus();\r\n\r\n    // If index changed, update state\r\n    if (index !== listElementsCounter) {\r\n      this.setState({\r\n        listElementsCounter: index,\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of dropdown list\r\n   *\r\n   * @param {bool} isOpenOnly - Only can open\r\n   */\r\n  handleSelectClick(isOpenOnly = false) {\r\n    const {\r\n      isOpened,\r\n      selectedString,\r\n      maxheight,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const {\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // If this frame is not from focus\r\n    if (!this.isFromFocus) {\r\n      // Set open state\r\n      if (!isOpenOnly || (isOpenOnly && !isOpened)) {\r\n        this.setState({\r\n          isOpened: !isOpened,\r\n        });\r\n      }\r\n\r\n      // If previously invalid, reset list\r\n      if (!selectedString || selectedString === resultNullString.display_name) {\r\n        this.setState({\r\n          listItems: dropList,\r\n          listHeight: maxheight,\r\n          listElementsCounter: -1,\r\n        });\r\n\r\n        if (!isMultiple || (isMultiple && _.isEmpty(multipleSelectedElements))) {\r\n          this.handleChange(null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Unlock from focus\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles selection of dropdown item\r\n   *\r\n   * @param {object} event - Click event\r\n   * @param {string} item - Input string\r\n   */\r\n  handleSelectItemClick(event, item) {\r\n    // If click on null item return\r\n    if (item.value === resultNullString.value) {\r\n      return;\r\n    }\r\n\r\n    const { numItemsDisplay, height } = this.state;\r\n    const { dropList } = this.props;\r\n\r\n    const {\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Reset drop list items to all, set selected string,\r\n    // and reset any errors\r\n    this.setState({\r\n      listItems: dropList,\r\n      listHeight: (_.min([(dropList && dropList.length) || 0, numItemsDisplay]) + 1) * height,\r\n    });\r\n\r\n    // this.formParent.clearErrorString();\r\n\r\n    if (isMultiple) {\r\n      // If multiple dropdown, reset selected string\r\n      this.setState({\r\n        selectedString: '',\r\n      });\r\n\r\n      // Set input field text to empty\r\n      this.inputField.value = '';\r\n      // Refocus input bar\r\n      // this.inputField.focus();\r\n\r\n      // Set multiple selected item\r\n      this.handleSetMultipleSelectedItem(item);\r\n    } else {\r\n      this.setState({\r\n        selectedString: item.display_name,\r\n      }, () => {\r\n        // Toggle the dropdown menu\r\n        this.handleSelectClick();\r\n\r\n        // Update redux state\r\n        this.handleChange(item);\r\n\r\n        // Close dropdown\r\n        this.setState({\r\n          isOpened: false,\r\n        });\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Selection of multi select dropdown\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleSetMultipleSelectedItem(item) {\r\n    const { multipleSelectedElements, height } = this.state;\r\n\r\n    const newArr = multipleSelectedElements || [];\r\n\r\n    // If item does not exists in the selected list\r\n    if (!_.find(newArr, i => i.value === item.value)) {\r\n      // Add item to list\r\n      newArr.push(item);\r\n\r\n      // Change state\r\n      this.setState({\r\n        multipleSelectedElements: newArr,\r\n        clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n        isOpened: false,\r\n      });\r\n\r\n      // Update redux store\r\n      this.handleChange(newArr);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys multi selected item\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleDestroySelected(item) {\r\n    const { height } = this.state;\r\n\r\n    const { multipleSelectedElements } = this.state;\r\n    // Duplicate clean copy\r\n    let newArr = multipleSelectedElements.slice();\r\n    // Delete chosen item\r\n    const index = newArr.indexOf(item);\r\n    newArr.splice(index, 1);\r\n    // Set null if empty\r\n    newArr = newArr.length === 0 ? null : newArr;\r\n\r\n    // Update state\r\n    this.setState({\r\n      multipleSelectedElements: newArr,\r\n      clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n    });\r\n\r\n    // Update redux state\r\n    this.handleChange(newArr);\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles on input changes\r\n   *\r\n   * @param {object} event\r\n   */\r\n  async handleOnInputChange(event) {\r\n    // Get current input value\r\n    const { value } = event.target;\r\n\r\n    const { dropList } = this.props;\r\n    const { height, numItemsDisplay } = this.state;\r\n\r\n    // Attempt to match value to list\r\n    const result = _.filter(\r\n      dropList,\r\n      item => item.display_name.toString().toUpperCase().indexOf(value.toString().toUpperCase()) === 0,\r\n    );\r\n\r\n    // Get length of new list, min 1 which is error string\r\n    const length = result.length ? result.length : 1;\r\n\r\n    // Set new list items, height of dropdown list,\r\n    // Force open list on type, and set selected string to value\r\n    this.setState({\r\n      listItems: result.length ? result : [resultNullString],\r\n      listHeight: (_.min([length, numItemsDisplay]) + 1) * height,\r\n      isOpened: true,\r\n      selectedString: value,\r\n      listElementsCounter: -1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle Blur event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleBlur(event) {\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n\r\n    // If outside of children\r\n    if (!isChildren) {\r\n      // Close dropdown\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n      // Handle exit case\r\n      this.handleExit();\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Focus event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleFocus(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n    // If not from children\r\n    if (!isChildren) {\r\n      // Open dropdown\r\n      if (!isOpened) {\r\n        this.handleSelectClick(true);\r\n        // Prevent double click\r\n        this.isFromFocus = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle exit selection of entered input\r\n   *\r\n   * @param {string} inputValue - From selection\r\n   */\r\n  handleExit(inputValue = null) {\r\n    const {\r\n      selectedString,\r\n      listItems,\r\n    } = this.state;\r\n\r\n    const {\r\n      placeholderString,\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Result string if match original list\r\n    let resultValue = null;\r\n    // If input causes an error\r\n    let isError = false;\r\n    // The string to use\r\n    const finalString = inputValue !== null ? inputValue.display_name : selectedString;\r\n\r\n    // If possible valid input\r\n    if (\r\n      finalString &&\r\n      finalString !== placeholderString &&\r\n      finalString !== ''\r\n    ) {\r\n      // Attempt to match finalString to original list\r\n      listItems.some((obj) => {\r\n        const result = obj.display_name.toString().toLowerCase() === finalString.toString().toLowerCase();\r\n        if (result) {\r\n          resultValue = obj;\r\n        }\r\n\r\n        return result;\r\n      });\r\n\r\n      // Check error if no match\r\n      isError = !resultValue;\r\n      // Set result string to match value or error value\r\n      resultValue = isError ? null : resultValue;\r\n\r\n      if (isMultiple) {\r\n        if (!isError) {\r\n          this.handleSetMultipleSelectedItem(resultValue);\r\n        }\r\n\r\n        this.inputField.value = '';\r\n      } else {\r\n        // Update redux value\r\n        this.handleChange(resultValue);\r\n\r\n        this.setState({\r\n          isOpened: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    // If not error, reset list to list all,\r\n    // Set selected string and error if possible\r\n    // and close the list\r\n    this.setState({\r\n      listItems: isError ? listItems : dropList,\r\n      selectedString: (resultValue && resultValue.display_name) || '',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Renders the dropdown list items\r\n   */\r\n  renderListItems() {\r\n    const { listItems, height } = this.state;\r\n    this.listElements = [];\r\n\r\n    const result = _.map(listItems, item => (\r\n      <li key={item.value}>\r\n        <div\r\n          className=\"list-item text-style\"\r\n          style={{ height }}\r\n          onClick={event => this.handleSelectItemClick(event, item)}\r\n          role=\"button\"\r\n          tabIndex={-1}\r\n          onKeyDown={(event) => { this.handleItemKeyPress(event, item); }}\r\n          ref={(node) => { if (node !== null) this.listElements.push(node); }}\r\n        >\r\n          <p>{item.display_name}</p>\r\n        </div>\r\n      </li>\r\n    ));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render the multiple selected elements in the input container\r\n   */\r\n  renderMultipleSelectedElements() {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { isMultiple } = this.props;\r\n\r\n    if (!isMultiple) {\r\n      return null;\r\n    }\r\n\r\n    return _.map(multipleSelectedElements, item => (\r\n      <div className=\"selected-item-container\" key={item.value}>\r\n        <div className=\"selected-item\">\r\n          <p>{item.display_name}</p>\r\n          <button\r\n            type=\"button\"\r\n            className=\"selected-item-destroy\"\r\n            onMouseUp={() => this.handleDestroySelected(item)}\r\n            tabIndex={-1}\r\n          >\r\n            <img src={Cross} alt=\"cross.svg\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  renderTextInput() {\r\n    const { selectedString } = this.state;\r\n    const {\r\n      isMultiple,\r\n      isDisableTyping,\r\n      placeholderString,\r\n      name,\r\n      notForm,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Input\r\n        value={selectedString || ''}\r\n        name={name}\r\n        placeholder={((isMultiple || notForm) && placeholderString) || ''}\r\n        autoComplete=\"off\"\r\n        ref={node => (this.inputField = node)}\r\n        onChange={event => this.handleOnInputChange(event)}\r\n        onKeyDown={event => this.handleInputKeyPress(event)}\r\n        onClick={() => this.handleSelectClick(true)}\r\n        disabled={isDisableTyping}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render component\r\n   */\r\n  render() {\r\n    const {\r\n      isOpened,\r\n      listHeight,\r\n      height,\r\n      clientHeight,\r\n      extraPadding,\r\n      noTransition,\r\n    } = this.state;\r\n\r\n    // const isOpened = true;\r\n\r\n    if (height && listHeight) {\r\n      const {\r\n        maxWidth,\r\n        isMultiple,\r\n        desc,\r\n        extraInfo,\r\n        errorString,\r\n        noInternalDesc,\r\n        logo,\r\n        placeholderString,\r\n        value,\r\n      } = this.props;\r\n\r\n      // Actual height of the whole control\r\n      const actualheight = isOpened ? listHeight : height;\r\n      // Actual height of only the list\r\n      const actualListheight = actualheight - height;\r\n\r\n      // Dynamic styles\r\n      const dropDownOpenStyle = isOpened ? 'dropdown-container-opened' : 'dropdown-container-closed';\r\n      const arrowStyle = isOpened ? 'angle-up' : 'angle-down';\r\n      const transitionStyle = noTransition ? '' : 'do-transition';\r\n      const listStyle = isOpened ? `list-opened ${transitionStyle}` : `list-closed ${transitionStyle}`;\r\n      const multipleStyle = isMultiple || logo ? 'multi-drop-v3' : '';\r\n      const isErrorStyle = errorString ? 'error' : '';\r\n\r\n      const noInternalDescStyle = noInternalDesc ? 'no-internal-desc' : '';\r\n\r\n      const titleStyle = value ? 'focused-title' : '';\r\n      const marginTop = clientHeight > defaultHeight || isOpened ? clientHeight : 0;\r\n      const marginBottom = clientHeight > defaultHeight ? 6 : 0;\r\n\r\n      const logoImg = isMultiple ? MagnifyGlass : logo;\r\n      const zIndexStyle = isOpened ? 'drop-open' : 'drop-close';\r\n\r\n      return (\r\n        <FormInputWrapper\r\n          desc={desc}\r\n          extraInfo={extraInfo}\r\n          errorString={errorString}\r\n        >\r\n          <div\r\n            className={`dropdown-container-v3 ${zIndexStyle} ${multipleStyle} ${noInternalDescStyle}`}\r\n            style={{\r\n              height: clientHeight,\r\n              maxWidth,\r\n              marginBottom,\r\n            }}\r\n            ref={node => (this.wrapperRef = node)}\r\n            onBlur={event => this.handleBlur(event)}\r\n            onFocus={event => this.handleFocus(event)}\r\n          >\r\n            <div\r\n              className={`dropdown-container ${dropDownOpenStyle} ${isErrorStyle}`}\r\n            >\r\n              {\r\n                isMultiple || noInternalDesc ? null :\r\n                <div className={`title-header ${titleStyle}`}>\r\n                  {placeholderString}\r\n                </div>\r\n              }\r\n              <div\r\n                className=\"selected-container\"\r\n                onKeyDown={event => this.handleInputKeyPress(event)}\r\n                role=\"button\"\r\n                style={{ minHeight: height }}\r\n                tabIndex={-1}\r\n                ref={node => (this.selectedContainer = node)}\r\n              >\r\n                {\r\n                  logoImg ?\r\n                    <div className=\"icon-container\" style={{ minHeight: height }}>\r\n                      <img\r\n                        src={logoImg}\r\n                        alt=\"DropdownImage.svg\"\r\n                      />\r\n                    </div>\r\n                  :\r\n                    null\r\n                }\r\n                <div\r\n                  className=\"selected-items-container\"\r\n                  ref={node => this.selectedItemsContainer = node}\r\n                  style={{ paddingTop: extraPadding, paddingBottom: extraPadding }}\r\n                >\r\n                  {this.renderMultipleSelectedElements()}\r\n                  <div className=\"selected-text selected-text-multi\">\r\n                    {this.renderTextInput()}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"selected-arrow\"\r\n                  onClick={() => this.handleSelectClick()}\r\n                  onKeyPress={() => {}}\r\n                  role=\"button\"\r\n                  tabIndex={-1}\r\n                >\r\n                  <img\r\n                    src={Arrow}\r\n                    alt=\"arrow.svg\"\r\n                    className={`selected-arrow-style ${arrowStyle}`}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Scrollbars\r\n                className={`list-container ${listStyle}`}\r\n                style={{\r\n                  minHeight: actualListheight,\r\n                  marginTop,\r\n                }}\r\n                ref={node => this.listContainer = node}\r\n                tabIndex={-1}\r\n              >\r\n                {\r\n                  isOpened ?\r\n                    this.renderListItems()\r\n                  :\r\n                    null\r\n                }\r\n              </Scrollbars>\r\n            </div>\r\n          </div>\r\n        </FormInputWrapper>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nDropDown.defaultProps = {\r\n  maxWidth: '100%',\r\n  numItemsDisplay: maxItemsDisplay,\r\n  isMultiple: false,\r\n  desc: null,\r\n  isDisableTyping: false,\r\n  extraInfo: null,\r\n  notForm: false,\r\n  overrideValue: null,\r\n  errorString: null,\r\n  dropList: null,\r\n  valueChangeCallback: null,\r\n  name: null,\r\n  noInternalDesc: false,\r\n  logo: null,\r\n  value: null,\r\n};\r\n\r\nDropDown.propTypes = {\r\n  dropList: PropTypes.array,\r\n  placeholderString: PropTypes.string.isRequired,\r\n  maxWidth: PropTypes.string,\r\n  name: PropTypes.string,\r\n  numItemsDisplay: PropTypes.number,\r\n  isMultiple: PropTypes.bool,\r\n  desc: PropTypes.string,\r\n  isDisableTyping: PropTypes.bool,\r\n  extraInfo: PropTypes.object,\r\n  notForm: PropTypes.bool,\r\n  overrideValue: PropTypes.string,\r\n  errorString: PropTypes.string,\r\n  valueChangeCallback: PropTypes.func,\r\n  noInternalDesc: PropTypes.bool,\r\n  logo: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n};\r\n\r\nexport default DropDown;\r\n","import React, { Component } from 'react';\r\nimport { CustomInput } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\n\r\nimport './Checkbox.scss';\r\n\r\nexport default class Checkbox extends Component {\r\n  render() {\r\n    const {\r\n      name,\r\n      value,\r\n      desc,\r\n      onChange,\r\n      errorString,\r\n      extraInfo,\r\n    } = this.props;\r\n\r\n    return (\r\n      <FormInputWrapper\r\n        errorString={errorString}\r\n        extraInfo={extraInfo}\r\n        smallMargin\r\n      >\r\n        <div className=\"checkbox-container-v3\">\r\n          <CustomInput\r\n            id={name}\r\n            className=\"checkbox-input\"\r\n            type=\"checkbox\"\r\n            onChange={() => onChange('checkbox', name, !value)}\r\n            checked={!!value}\r\n          />\r\n          {/* eslint-disable-next-line */}\r\n          <p\r\n            className=\"checkbox-input-desc\"\r\n            // onClick={() => onChange('checkbox', name, !value)}\r\n          >\r\n            {desc}\r\n          </p>\r\n        </div>\r\n      </FormInputWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nCheckbox.defaultProps = {\r\n  value: null,\r\n  errorString: null,\r\n  extraInfo: null,\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  value: PropTypes.bool,\r\n  name: PropTypes.string.isRequired,\r\n  desc: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.array]).isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  errorString: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n};\r\n"],"sourceRoot":""}