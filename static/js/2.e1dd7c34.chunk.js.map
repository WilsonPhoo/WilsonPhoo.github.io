{"version":3,"sources":["assets/images/forms/arrow.svg","components/Forms/FormInputWrapper/FormInputWrapper.js","components/Forms/DropDown/DropDownV2.js","assets/images/forms/magnifyGlass.svg","assets/images/forms/cross.svg"],"names":["module","exports","__webpack_require__","p","FormInputWrapper","props","_this","Object","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","state","errorString","setErrorString","bind","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","clearErrorString","nextProps","prevState","refValue","validateForm","message","setState","_this$props","desc","extraInfo","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","children","Component","defaultProps","maxItemsDisplay","mediumHeight","bigHeight","DropDownV2","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","dropList","placeholderString","size","numItemsDisplay","height","numItems","maxheight","_","min","length","isOpened","listItems","selectedString","listHeight","multipleSelectedElements","listElementsCounter","clientHeight","extraPadding","updateDimensions","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","handleClickOutside","renderListItems","renderTextInput","handleSelectClick","handleOnInputChange","handleSetMultipleSelectedItem","handleDestroySelected","handleInputKeyPress","handleItemKeyPress","handleChange","handleExit","handleBlur","handleFocus","initialListItems","document","addEventListener","window","_this$props2","formStore","name","overrideValue","formValues","constructor","Array","_this$props3","isForm","isElements","isEmpty","isEqual","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","removeEventListener","isMultiple","_this$state","selectedContainer","value","_this$props4","form","formChange","notForm","valueChangeCallback","inputField","event","wrapperRef","contains","target","isFromFocus","_this$state2","key","preventDefault","index","listElements","getAttribute","Math","max","focus","stopPropagation","isOpenOnly","arguments","undefined","_this$state3","_this$props5","item","_this$state4","newArr","indexOf","push","slice","splice","result","filter","toString","toUpperCase","relatedTarget","inputString","_this$state6","_this$props6","resultString","isError","finalString","some","obj","toLowerCase","_this2","_this$state7","map","react__WEBPACK_IMPORTED_MODULE_12___default","style","onClick","handleSelectItemClick","role","tabIndex","onKeyDown","ref","node","_this3","onMouseUp","src","Cross","alt","_this4","_this$props7","isDisableTyping","component","type","placeholder","autoComplete","onChange","disabled","redux_form__WEBPACK_IMPORTED_MODULE_14__","_this5","_this$state8","_this$props8","zIndex","maxWidth","actualListheight","dropDownOpenStyle","arrowStyle","listStyle","isErrorStyle","multipleStyle","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_18__","formParent","concat","onBlur","onFocus","minHeight","MagnifyGlass","paddingTop","paddingBottom","renderMultipleSelectedElements","onKeyPress","Arrow","react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_17__","listContainer","connect","ownProps","getFormValues","dispatch","change"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yICelCC,sBAsBJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,YAAa,MAGfR,EAAKS,eAAiBT,EAAKS,eAAeC,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACtBA,EAAKY,iBAAmBZ,EAAKY,iBAAiBF,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARPA,6FArBaa,EAAWC,GACzC,OAAIA,EAAUN,cAAgBK,EAAUL,YAC/B,CACLA,YAAaK,EAAUL,YACvBO,SAAUF,EAAUE,UAIpBF,EAAUG,cAAgBF,EAAUN,aAAeM,EAAUC,WAAaF,EAAUE,UACtFF,EAAUG,eACH,CACLR,YAAa,OAGV,6DAkBMS,GACbd,KAAKe,SAAS,CACZV,YAAaS,+CAKfd,KAAKe,SAAS,CACZV,YAAa,wCAIR,IAELA,EACEL,KAAKI,MADPC,YAFKW,EAQHhB,KAAKJ,MAFPqB,EANKD,EAMLC,KACAC,EAPKF,EAOLE,UAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CAEF,OAATL,EACEE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsBL,GAEnC,KAEHjB,KAAKJ,MAAM2B,SAEI,OAAdL,EACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZJ,GAGH,KAGc,OAAhBb,EACEc,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BACVjB,GAGH,aA9EmBmB,cAqF/B7B,EAAiB8B,aAAe,CAC9BR,KAAM,KACNC,UAAW,MASEvB,ySCpFT+B,iBAAkB,GAElBC,EAAe,GAEfC,EAAY,GASZC,cA4BJ,SAAAA,EAAYjC,GAAO,IAAAC,EAAAC,OAAAgC,EAAA,EAAAhC,CAAAE,KAAA6B,GAAA,IAAAb,GACjBnB,EAAAC,OAAAiC,EAAA,EAAAjC,CAAAE,KAAAF,OAAAkC,EAAA,EAAAlC,CAAA+B,GAAA1B,KAAAH,KAAMJ,KAWGA,MAJPqC,EARejB,EAQfiB,SACAC,EATelB,EASfkB,kBACAC,EAVenB,EAUfmB,KACAC,EAXepB,EAWfoB,gBAIIC,EAAkB,QAATF,EAAiBP,EAAYD,EAEtCW,EAAWF,GAAmBV,EAE9Ba,GAAaC,IAAEC,IAAI,CAACR,EAAWA,EAASS,OAAS,EAAGJ,IAAa,GAAKD,EAnB3D,OA+BjBxC,EAAKO,MAAQ,CACXuC,UAAU,EACVC,UAAWX,EACXY,eAAgBX,EAChBG,SACAD,gBAAiBE,EACjBC,YACAO,WAAYP,EACZQ,yBAA0B,KAC1BC,qBAAsB,EACtBC,aAAcZ,EACda,aAAc,GAGhBrD,EAAKsD,iBAAmBtD,EAAKsD,iBAAiB5C,KAAtBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KACxBA,EAAKwD,mBAAqBxD,EAAKwD,mBAAmB9C,KAAxBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAC1BA,EAAKyD,gBAAkBzD,EAAKyD,gBAAgB/C,KAArBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KACvBA,EAAK0D,gBAAkB1D,EAAK0D,gBAAgBhD,KAArBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KACvBA,EAAK2D,kBAAoB3D,EAAK2D,kBAAkBjD,KAAvBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KACzBA,EAAK4D,oBAAsB5D,EAAK4D,oBAAoBlD,KAAzBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAC3BA,EAAK6D,8BAAgC7D,EAAK6D,8BAA8BnD,KAAnCT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KACrCA,EAAK8D,sBAAwB9D,EAAK8D,sBAAsBpD,KAA3BT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAC7BA,EAAK+D,oBAAsB/D,EAAK+D,oBAAoBrD,KAAzBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAC3BA,EAAKgE,mBAAqBhE,EAAKgE,mBAAmBtD,KAAxBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAC1BA,EAAKiE,aAAejE,EAAKiE,aAAavD,KAAlBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KACpBA,EAAKkE,WAAalE,EAAKkE,WAAWxD,KAAhBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAClBA,EAAKmE,WAAanE,EAAKmE,WAAWzD,KAAhBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KAClBA,EAAKoE,YAAcpE,EAAKoE,YAAY1D,KAAjBT,OAAAsD,EAAA,EAAAtD,QAAAsD,EAAA,EAAAtD,CAAAD,KA1DFA,6FA3Baa,EAAWC,GAAW,IAElDsB,EAGEvB,EAHFuB,SACAG,EAEE1B,EAFF0B,gBACAD,EACEzB,EADFyB,KAGF,GAAIF,IAAatB,EAAUuD,iBAAkB,CAC3C,IAAM7B,EAAkB,QAATF,EAAiBP,EAAYD,EACtCW,EAAWF,GAAmBV,EAC9Ba,GAAaC,IAAEC,IAAI,CAACR,EAAWA,EAASS,OAAS,EAAGJ,IAAa,GAAKD,EAE5E,MAAO,CACL6B,iBAAkBjC,EAClBW,UAAWX,EACXM,YACAO,WAAYP,GAIhB,OAAO,kEAyEP4B,IAASC,iBAAiB,YAAapE,KAAKqD,oBAE5CgB,IAAOD,iBAAiB,SAAUpE,KAAKmD,kBAEvCnD,KAAKmD,mBANa,IAAAmB,EAQyBtE,KAAKJ,MAAxC2E,EARUD,EAQVC,UAAWC,EARDF,EAQCE,KAAMC,EARPH,EAQOG,cACzB,GAAIF,GAAaA,EAAUC,GAAO,CAChC,IAAME,EAAaH,EAAUC,GACzBE,EAAWC,cAAgBC,OAC7B5E,KAAKe,SAAS,CACZgC,yBAA0B2B,IAK5BD,GACFzE,KAAK8D,aAAaW,iDAWA/D,GAgBpB,OAN0BV,KAAKJ,MAAvB6E,gBAEc/D,EAAU+D,eAC9BzE,KAAK8D,aAAapD,EAAU+D,gBAGvB,+CAeY,IACX1B,EAA6B/C,KAAKI,MAAlC2C,yBADW8B,EAES7E,KAAKJ,MAAzB2E,EAFWM,EAEXN,UAAWC,EAFAK,EAEAL,KACbM,EAASP,GAAaA,EAAUC,GAEhCO,GAAcvC,IAAEwC,QAAQjC,GAC9B,GAAI+B,EAAQ,CACV,IAAMJ,EAAaH,EAAUC,KAExBO,GAAeA,IAAevC,IAAEyC,QAAQP,EAAY3B,KACnD2B,EAAWC,cAAgBC,OAC7B5E,KAAKe,SAAS,CACZgC,yBAAyBjD,OAAAoF,EAAA,EAAApF,CAAK4E,KAMlCK,IAAeD,GACjB9E,KAAKe,SAAS,CACZgC,yBAA0B,OAK9B/C,KAAKmD,kEAiBLgB,IAASgB,oBAAoB,YAAanF,KAAKqD,oBAC/CgB,IAAOc,oBAAoB,SAAUnF,KAAKmD,6DAc1C,GAHuBnD,KAAKJ,MAApBwF,WAGR,CAJiB,IAAAC,EAYbrF,KAAKI,MAHP6C,EATeoC,EASfpC,aACAZ,EAVegD,EAUfhD,OACAa,EAXemC,EAWfnC,aAIED,IAAiBjD,KAAKsF,kBAAkBrC,cAC1CjD,KAAKe,SAAS,CACZkC,aAAcjD,KAAKsF,kBAAkBrC,aACrCC,aAAclD,KAAKsF,kBAAkBrC,aAAe,EAAIC,EAAeb,EAvO/C,EAuOkF,0CAKnGkD,GAAO,IAAAC,EAOdxF,KAAKJ,MALP4E,EAFgBgB,EAEhBhB,KACAiB,EAHgBD,EAGhBC,KACAC,EAJgBF,EAIhBE,WACAC,EALgBH,EAKhBG,QACAC,EANgBJ,EAMhBI,oBAGF,GAAID,EAKF,OAJIC,GACFA,EAAoBL,QAEtBvF,KAAK6F,WAAWN,MAAQA,GAI1BG,EAAWD,EAAMjB,EAAMe,8CAQNO,GACI9F,KAAKI,MAAlBuC,UAKN3C,KAAK+F,aACJ/F,KAAK+F,WAAWC,SAASF,EAAMG,UAGhCjG,KAAKe,SAAS,CACZ4B,UAAU,IAIZ3C,KAAKkG,aAAc,+CASHJ,GAAO,IAAAK,EAIrBnG,KAAKI,MAFPuC,EAFuBwD,EAEvBxD,SACAK,EAHuBmD,EAGvBnD,oBAIF,GAAkB,UAAd8C,EAAMM,IAGR,OAFApG,KAAK+D,kBACL+B,EAAMO,iBAKU,cAAdP,EAAMM,MACJzD,IAC2B,IAAzBK,GACF8C,EAAMO,iBAERrG,KAAK6D,mBAAmBiC,IAExB9F,KAAKe,SAAS,CACZ4B,UAAU,gDAWCmD,GAAO,IAEtB9C,EACEhD,KAAKI,MADP4C,oBAGEsD,EAAQtD,EAGZ,GAAkB,UAAd8C,EAAMM,IAMR,OAFApG,KAAK+D,WAAW/D,KAAKuG,aAAaD,GAAOE,aAAa,eACtDV,EAAMO,iBAKU,cAAdP,EAAMM,IACRE,EAAQtD,EAAsB,EACP,YAAd8C,EAAMM,MACfE,EAAQtD,EAAsB,GAIhCsD,EAAQG,KAAKC,IAAI,EAAGD,KAAKhE,IAAI6D,EAAOtG,KAAKuG,aAAa7D,OAAS,IAE/D1C,KAAKuG,aAAaD,GAAOK,QAGrBL,IAAUtD,GACZhD,KAAKe,SAAS,CACZiC,oBAAqBsD,IAIzBR,EAAMc,8DAQ8B,IAApBC,EAAoBC,UAAApE,OAAA,QAAAqE,IAAAD,UAAA,IAAAA,UAAA,GAAAE,EAMhChH,KAAKI,MAJPuC,EAFkCqE,EAElCrE,SACAE,EAHkCmE,EAGlCnE,eACAN,EAJkCyE,EAIlCzE,UACAQ,EALkCiE,EAKlCjE,yBALkCkE,EAWhCjH,KAAKJ,MAFPqC,EATkCgF,EASlChF,SACAmD,EAVkC6B,EAUlC7B,WAIGpF,KAAKkG,gBAEHW,GAAeA,IAAelE,IACjC3C,KAAKe,SAAS,CACZ4B,UAAWA,IAKVE,GA/Xc,qBA+XIA,IACrB7C,KAAKe,SAAS,CACZ6B,UAAWX,EACXa,WAAYP,EACZS,qBAAsB,MAGnBoC,GAAeA,GAAc5C,IAAEwC,QAAQjC,KAC1C/C,KAAK8D,aAAa,QAMxB9D,KAAKkG,aAAc,gDASCJ,EAAOoB,GAE3B,GAxZqB,qBAwZjBA,EAAJ,CAFiC,IAMzBjF,EAAajC,KAAKJ,MAAlBqC,SAGNmD,EACEpF,KAAKJ,MADPwF,WAKFpF,KAAKe,SAAS,CACZ6B,UAAWX,IAKTmD,GAEFpF,KAAKe,SAAS,CACZ8B,eAAgB,KAIlB7C,KAAK6F,WAAWN,MAAQ,GAExBvF,KAAK6F,WAAWc,QAGhB3G,KAAK0D,8BAA8BwD,KAEnClH,KAAKe,SAAS,CACZ8B,eAAgBqE,IAIlBlH,KAAKwD,oBAGLxD,KAAK8D,aAAaoD,GAGlBlH,KAAKe,SAAS,CACZ4B,UAAU,KAIdmD,EAAMc,yEAQsBM,GAAM,IAAAC,EACWnH,KAAKI,MAA1C2C,EAD0BoE,EAC1BpE,yBAA0BV,EADA8E,EACA9E,OAE5B+E,EAASrE,GAA4B,GAGvCqE,EAAOC,QAAQH,GAAQ,IAEzBE,EAAOE,KAAKJ,GAGZlH,KAAKe,SAAS,CACZgC,yBAA0BqE,EAC1BnE,aAAcjD,KAAKsF,kBAAoBtF,KAAKsF,kBAAkBrC,aAAeZ,EAC7EM,UAAU,IAIZ3C,KAAK8D,aAAasD,kDASAF,GAAM,IAClB7E,EAAWrC,KAAKI,MAAhBiC,OAIJ+E,EAFiCpH,KAAKI,MAAlC2C,yBAE8BwE,QAEhCjB,EAAQc,EAAOC,QAAQH,GAC7BE,EAAOI,OAAOlB,EAAO,GAErBc,EAA2B,IAAlBA,EAAO1E,OAAe,KAAO0E,EAGtCpH,KAAKe,SAAS,CACZgC,yBAA0BqE,EAC1BnE,aAAcjD,KAAKsF,kBAAoBtF,KAAKsF,kBAAkBrC,aAAeZ,IAI/ErC,KAAK8D,aAAasD,GAClBpH,KAAKkG,aAAc,sFAQKJ,qFAEhBP,EAAUO,EAAMG,OAAhBV,MAEAtD,EAAajC,KAAKJ,MAAlBqC,WAC4BjC,KAAKI,MAAjCiC,WAAQD,oBAGVqF,EAASjF,IAAEkF,OACfzF,EACA,SAAAiF,GAAI,OAA8E,IAA1EA,EAAKS,WAAWC,cAAcP,QAAQ9B,EAAMoC,WAAWC,iBAI3DlF,EAAS+E,EAAO/E,OAAS+E,EAAO/E,OAAS,EAI/C1C,KAAKe,SAAS,CACZ6B,UAAW6E,EAAO/E,OAAS+E,EAAS,CA1hBjB,oBA2hBnB3E,YAAaN,IAAEC,IAAI,CAACC,EAAQN,IAAoB,GAAKC,EACrDM,UAAU,EACVE,eAAgB0C,EAChBvC,qBAAsB,0IASf8C,GAEU9F,KAAK+F,WAAWC,SAASF,EAAM+B,iBAKhD7H,KAAKe,SAAS,CACZ4B,UAAU,IAGZ3C,KAAK+D,aACL/D,KAAKkG,aAAc,uCASXJ,GAAO,IACTnD,EAAa3C,KAAKI,MAAlBuC,SAGW3C,KAAK+F,WAAWC,SAASF,EAAM+B,gBAI3ClF,IACH3C,KAAKwD,mBAAkB,GAEvBxD,KAAKkG,aAAc,wCAUM,IAApB4B,EAAoBhB,UAAApE,OAAA,QAAAqE,IAAAD,UAAA,GAAAA,UAAA,GAAN,KAAMiB,EAIzB/H,KAAKI,MAFPyC,EAF2BkF,EAE3BlF,eACAD,EAH2BmF,EAG3BnF,UAH2BoF,EAUzBhI,KAAKJ,MAHPsC,EAP2B8F,EAO3B9F,kBACAD,EAR2B+F,EAQ3B/F,SACAmD,EAT2B4C,EAS3B5C,WAIE6C,EAAe,KAEfC,GAAU,EAERC,EAA8B,OAAhBL,EAAuBA,EAAcjF,EAGvDsF,GACAA,IAAgBjG,GACA,KAAhBiG,IAGAvF,EAAUwF,KAAK,SAACC,GACd,IAAMZ,EAASY,EAAIV,WAAWW,gBAAkBH,EAAYR,WAAWW,cAKvE,OAJIb,IACFQ,EAAeI,GAGVZ,IAMTQ,GAFAC,GAAWD,GAEc,KAAOA,EAE5B7C,GACG8C,GACHlI,KAAK0D,8BAA8BuE,GAGrCjI,KAAK6F,WAAWN,MAAQ,KAGxBvF,KAAK8D,aAAamE,GAElBjI,KAAKe,SAAS,CACZ4B,UAAU,MAQhB3C,KAAKe,SAAS,CACZ6B,UAAWsF,EAAUtF,EAAYX,EACjCY,eAAgBoF,8CAaF,IAAAM,EAAAvI,KAAAwI,EACcxI,KAAKI,MAA3BwC,EADQ4F,EACR5F,UAAWP,EADHmG,EACGnG,OAoBnB,OAnBArC,KAAKuG,aAAe,GAEL/D,IAAEiG,IAAI7F,EAAW,SAAAsE,GAAI,OAClCwB,EAAAtH,EAAAC,cAAA,MAAI+E,IAAKc,GACPwB,EAAAtH,EAAAC,cAAA,OACEC,UAAU,uBACVqH,MAAO,CAAEtG,UACTuG,QAAS,SAAA9C,GAAK,OAAIyC,EAAKM,sBAAsB/C,EAAOoB,IACpD4B,KAAK,SACLC,UAAW,EACXxD,MAAO2B,EACP8B,UAAW,SAAClD,GAAYyC,EAAK1E,mBAAmBiC,IAChDmD,IAAK,SAACC,GAAwB,OAATA,GAAeX,EAAKhC,aAAae,KAAK4B,KAE3DR,EAAAtH,EAAAC,cAAA,SAAI6F,gEAWqB,IAAAiC,EAAAnJ,KACvB+C,EAA6B/C,KAAKI,MAAlC2C,yBAER,OAAOP,IAAEiG,IAAI1F,EAA0B,SAAAmE,GAAI,OACzCwB,EAAAtH,EAAAC,cAAA,OAAKC,UAAU,0BAA0B8E,IAAKc,GAC5CwB,EAAAtH,EAAAC,cAAA,OAAKC,UAAU,iBACboH,EAAAtH,EAAAC,cAAA,SAAI6F,GACJwB,EAAAtH,EAAAC,cAAA,UACEC,UAAU,wBACV8H,UAAW,kBAAMD,EAAKxF,sBAAsBuD,IAC5C6B,UAAW,GAEXL,EAAAtH,EAAAC,cAAA,OAAKgI,IAAKC,IAAOC,IAAI,6DAOb,IAAAC,EAAAxJ,KAAAyJ,EAOZzJ,KAAKJ,MALPwF,EAFcqE,EAEdrE,WACAsE,EAHcD,EAGdC,gBACAxH,EAJcuH,EAIdvH,kBACAsC,EALciF,EAKdjF,KACAmB,EANc8D,EAMd9D,QAGF,OAAIP,GAAcO,EAEd+D,EACEhB,EAAAtH,EAAAC,cAAA,SACEsI,UAAU,QACVC,KAAK,OACLC,YAAa3H,EACb4H,aAAa,MACbb,IAAK,SAAAC,GAAI,OAAKM,EAAK3D,WAAaqD,GAChCa,SAAU,SAAAjE,GAAK,OAAI0D,EAAK/F,oBAAoBqC,IAC5CkD,UAAW,SAAAlD,GAAK,OAAI0D,EAAK5F,oBAAoBkC,IAC7C8C,QAAS,kBAAMY,EAAKhG,mBAAkB,IACtCuF,SAAU,EACViB,UAAQ,IAGVtB,EAAAtH,EAAAC,cAAA,SACEsI,UAAU,QACVC,KAAK,OACLC,YAAa3H,EACb4H,aAAa,MACbb,IAAK,SAAAC,GAAI,OAAKM,EAAK3D,WAAaqD,GAChCa,SAAU,SAAAjE,GAAK,OAAI0D,EAAK/F,oBAAoBqC,IAC5CkD,UAAW,SAAAlD,GAAK,OAAI0D,EAAK5F,oBAAoBkC,IAC7C8C,QAAS,kBAAMY,EAAKhG,mBAAkB,IACtCuF,SAAU,IAMhBW,EACEhB,EAAAtH,EAAAC,cAAC4I,EAAA,EAAD,CACEzF,KAAMA,EACNmF,UAAU,QACVC,KAAK,OACLC,YAAa3H,EACb4H,aAAa,MACbb,IAAK,SAAAC,GAAI,OAAKM,EAAK3D,WAAaqD,GAChCa,SAAU,SAAAjE,GAAK,OAAI0D,EAAK/F,oBAAoBqC,IAC5CkD,UAAW,SAAAlD,GAAK,OAAI0D,EAAK5F,oBAAoBkC,IAC7C8C,QAAS,kBAAMY,EAAKhG,mBAAkB,IACtCuF,SAAU,EACViB,UAAQ,IAGVtB,EAAAtH,EAAAC,cAAC4I,EAAA,EAAD,CACEzF,KAAMA,EACNmF,UAAU,QACVC,KAAK,OACLC,YAAa3H,EACb4H,aAAa,MACbb,IAAK,SAAAC,GAAI,OAAKM,EAAK3D,WAAaqD,GAChCa,SAAU,SAAAjE,GAAK,OAAI0D,EAAK/F,oBAAoBqC,IAC5CkD,UAAW,SAAAlD,GAAK,OAAI0D,EAAK5F,oBAAoBkC,IAC7C8C,QAAS,kBAAMY,EAAKhG,mBAAkB,IACtCuF,SAAU,qCAQT,IAAAmB,EAAAlK,KAAAmK,EAOHnK,KAAKI,MALPuC,EAFKwH,EAELxH,SACAG,EAHKqH,EAGLrH,WACAT,EAJK8H,EAIL9H,OACAY,EALKkH,EAKLlH,aACAC,EANKiH,EAMLjH,aAGF,GAAIb,GAAUS,EAAY,KAAAsH,EAWpBpK,KAAKJ,MATPyK,EAFsBD,EAEtBC,OACAC,EAHsBF,EAGtBE,SACAlF,EAJsBgF,EAItBhF,WACAnE,EALsBmJ,EAKtBnJ,KACAC,EANsBkJ,EAMtBlJ,UACAb,EAPsB+J,EAOtB/J,YACAkE,EARsB6F,EAQtB7F,UACAC,EATsB4F,EAStB5F,KACA3D,EAVsBuJ,EAUtBvJ,aAMI0J,GAFe5H,EAAWG,EAAaT,GAELA,EAGlCmI,EAAoB7H,EAAW,4BAA8B,4BAC7D8H,EAAa9H,EAAW,WAAa,aACrC+H,EAAY/H,EAAW,cAAgB,cACvCgI,EAAetK,EAAc,QAAU,GACvCuK,EAAgBxF,EAAa,aAAe,GAC5CxE,EAAW2D,EAAYA,EAAUC,GAAQ,KAE/C,OACEkE,EAAAtH,EAAAC,cAACwJ,EAAA,EAAD,CACE5J,KAAMA,EACNgI,IAAK,SAAAC,GAAI,OAAKgB,EAAKY,WAAa5B,GAChChI,UAAWA,EACXb,YAAaA,EACbO,SAAUA,EACVC,aAAcA,GAEd6H,EAAAtH,EAAAC,cAAA,OACEC,UAAS,YAAAyJ,OAAcH,GACvBjC,MAAO,CAAEtG,OAAQY,EAAcoH,SAAQC,YACvCrB,IAAK,SAAAC,GAAI,OAAKgB,EAAKnE,WAAamD,GAChC8B,OAAQ,SAAAlF,GAAK,OAAIoE,EAAKlG,WAAW8B,IACjCmF,QAAS,SAAAnF,GAAK,OAAIoE,EAAKjG,YAAY6B,KAEnC4C,EAAAtH,EAAAC,cAAA,OACEC,UAAS,sBAAAyJ,OAAwBP,EAAxB,KAAAO,OAA6CJ,IAEtDjC,EAAAtH,EAAAC,cAAA,OACEC,UAAU,qBACV0H,UAAW,SAAAlD,GAAK,OAAIoE,EAAKtG,oBAAoBkC,IAC7CgD,KAAK,SACLH,MAAO,CAAEuC,UAAW7I,GACpB0G,UAAW,EACXE,IAAK,SAAAC,GAAI,OAAKgB,EAAK5E,kBAAoB4D,IAGrC9D,EACEsD,EAAAtH,EAAAC,cAAA,OAAKC,UAAU,gBAAgBqH,MAAO,CAAEuC,UAAW7I,IACjDqG,EAAAtH,EAAAC,cAAA,OACEC,UAAU,WACV+H,IAAK8B,IACL5B,IAAI,sBAIR,KAEJb,EAAAtH,EAAAC,cAAA,OACEC,UAAU,2BACVqH,MAAO,CAAEyC,WAAYlI,EAAcmI,cAAenI,IAEjDlD,KAAKsL,iCACN5C,EAAAtH,EAAAC,cAAA,OAAKC,UAAU,gDACZtB,KAAKuD,oBAGVmF,EAAAtH,EAAAC,cAAA,OACEC,UAAU,iBACVsH,QAAS,kBAAMsB,EAAK1G,qBACpB+H,WAAY,aACZzC,KAAK,SACLC,UAAW,GAEXL,EAAAtH,EAAAC,cAAA,OACEgI,IAAKmC,IACLjC,IAAI,YACJjI,UAAS,wBAAAyJ,OAA0BN,OAIzC/B,EAAAtH,EAAAC,cAACoK,EAAA,WAAD,CACEnK,UAAS,kBAAAyJ,OAAoBL,GAC7B/B,MAAO,CACLuC,UAAWX,GAEbtB,IAAK,SAAAC,GAAI,OAAIgB,EAAKwB,cAAgBxC,GAClCH,UAAW,GAGTpG,EACE3C,KAAKsD,kBAEL,SAShB,OAAO,YAl4Bc9B,aAs4BzBK,EAAWJ,aAAe,CACxB6I,SAAU,OACVlI,gBAAiBV,EACjB0D,YAAY,EACZnE,KAAM,KACNyI,iBAAiB,EACjBxI,UAAW,KACXyE,SAAS,EACTlB,cAAe,KACfpE,YAAa,KACb4B,SAAU,KACVsC,UAAW,KACXqB,oBAAqB,KACrBpB,KAAM,KACNiB,KAAM,KACN5E,aAAc,MAmCD8K,sBAVS,SAACvL,EAAOwL,GAAR,MAAsB,CAC5CrH,UAAYsH,YAAcD,EAASnG,KAAvBoG,CAA6BzL,KAGhB,SAAA0L,GAAQ,MAAK,CACtCpG,WAAY,SAACD,EAAMW,EAAKb,GACtBuG,EAASC,YAAOtG,EAAMW,EAAKb,OAIhBoG,CAA6C9J,wBCh+B5DtC,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/2.e1dd7c34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.6b6008ba.svg\";","/**\r\n * FormInputWrapper.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FormInputWrapper.scss';\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass FormInputWrapper extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (prevState.errorString !== nextProps.errorString) {\r\n      return {\r\n        errorString: nextProps.errorString,\r\n        refValue: nextProps.refValue,\r\n      };\r\n    }\r\n\r\n    if (nextProps.validateForm && prevState.errorString && prevState.refValue !== nextProps.refValue) {\r\n      nextProps.validateForm();\r\n      return {\r\n        errorString: null,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {object} props Component props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      errorString: null,\r\n    };\r\n\r\n    this.setErrorString = this.setErrorString.bind(this);\r\n    this.clearErrorString = this.clearErrorString.bind(this);\r\n  }\r\n\r\n  setErrorString(message) {\r\n    this.setState({\r\n      errorString: message,\r\n    });\r\n  }\r\n\r\n  clearErrorString() {\r\n    this.setState({\r\n      errorString: null,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      errorString,\r\n    } = this.state;\r\n\r\n    const {\r\n      desc,\r\n      extraInfo,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"input-wrapper-main input-wrapper-error\">\r\n        {\r\n          desc !== null ?\r\n            <p className=\"input-wrapper-desc\">{desc}</p>\r\n          :\r\n            null\r\n        }\r\n        {this.props.children}\r\n        {\r\n          extraInfo !== null ?\r\n            <div className=\"extra-info-container\">\r\n              {extraInfo}\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n        {\r\n          errorString !== null ?\r\n            <p className=\"input-wrapper-error-text\">\r\n              {errorString}\r\n            </p>\r\n          :\r\n            null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormInputWrapper.defaultProps = {\r\n  desc: null,\r\n  extraInfo: null,\r\n};\r\n\r\n\r\nFormInputWrapper.propTypes = {\r\n  desc: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n};\r\n\r\nexport default FormInputWrapper;\r\n","/**\r\n * DropDown.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport document from 'global/document';\r\nimport window from 'global/window';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, getFormValues, change } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\n\r\nimport Arrow from '../../../assets/images/forms/arrow.svg';\r\nimport Cross from '../../../assets/images/forms/cross.svg';\r\nimport MagnifyGlass from '../../../assets/images/forms/magnifyGlass.svg';\r\n\r\nimport './DropDown.scss';\r\nimport './MultipleSelectDropDown.scss';\r\n\r\n// How many items to display\r\nconst maxItemsDisplay = 5;\r\n// Height for medium dropdown\r\nconst mediumHeight = 60;\r\n// Height for big dropdown\r\nconst bigHeight = 72;\r\n// Padding for when multiple items overflow\r\nconst extraPaddingForMultiple = 5;\r\n// Error text to display when error\r\nconst resultNullString = 'No results found';\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass DropDownV2 extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      dropList,\r\n      numItemsDisplay,\r\n      size,\r\n    } = nextProps;\r\n\r\n    if (dropList !== prevState.initialListItems) {\r\n      const height = size === 'big' ? bigHeight : mediumHeight;\r\n      const numItems = numItemsDisplay || maxItemsDisplay;\r\n      const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n\r\n      return {\r\n        initialListItems: dropList,\r\n        listItems: dropList,\r\n        maxheight,\r\n        listHeight: maxheight,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {object} props Component props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // dropList - The passed down dropdown list items\r\n    // placeholderString - Placeholder string for input\r\n    // size - Size of this control\r\n    // numItemsDisplay - Max items to display on view\r\n    const {\r\n      dropList,\r\n      placeholderString,\r\n      size,\r\n      numItemsDisplay,\r\n    } = this.props;\r\n\r\n    // Get the control height\r\n    const height = size === 'big' ? bigHeight : mediumHeight;\r\n    // Get number of items to display\r\n    const numItems = numItemsDisplay || maxItemsDisplay;\r\n    // Get the max height of list\r\n    const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n    // isOpened - Whether dropdown is opened\r\n    // isError - Whether there is input error\r\n    // listItems - The actual dropdown list\r\n    // selectedString - The selected item string\r\n    // height - Preferred Control height\r\n    // numItemsDisplay - How many items to display\r\n    // maxheight - Max height of the list\r\n    // listHeight - Height of the list. (Items count + control)\r\n    // multipleSelectedElements - Array of multiple selected items\r\n    // listElementsCounter - Up down selection position\r\n    // clientHeight - Actual height of the control\r\n    this.state = {\r\n      isOpened: false,\r\n      listItems: dropList,\r\n      selectedString: placeholderString,\r\n      height,\r\n      numItemsDisplay: numItems,\r\n      maxheight,\r\n      listHeight: maxheight,\r\n      multipleSelectedElements: null,\r\n      listElementsCounter: -1,\r\n      clientHeight: height,\r\n      extraPadding: 0,\r\n    };\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    this.renderListItems = this.renderListItems.bind(this);\r\n    this.renderTextInput = this.renderTextInput.bind(this);\r\n    this.handleSelectClick = this.handleSelectClick.bind(this);\r\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\r\n    this.handleSetMultipleSelectedItem = this.handleSetMultipleSelectedItem.bind(this);\r\n    this.handleDestroySelected = this.handleDestroySelected.bind(this);\r\n    this.handleInputKeyPress = this.handleInputKeyPress.bind(this);\r\n    this.handleItemKeyPress = this.handleItemKeyPress.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleExit = this.handleExit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    // Add Handler to handle click outside of screen\r\n    document.addEventListener('mousedown', this.handleClickOutside);\r\n    // Update control height on resize in case it squeezes down\r\n    window.addEventListener('resize', this.updateDimensions);\r\n    // Update for the first time\r\n    this.updateDimensions();\r\n\r\n    const { formStore, name, overrideValue } = this.props;\r\n    if (formStore && formStore[name]) {\r\n      const formValues = formStore[name];\r\n      if (formValues.constructor === Array) {\r\n        this.setState({\r\n          multipleSelectedElements: formValues,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (overrideValue) {\r\n      this.handleChange(overrideValue);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   *\r\n   * @param {object} nextProps\r\n   * @param {object} nextState\r\n   */\r\n  shouldComponentUpdate(nextProps) {\r\n    /* const {\r\n      isOpened,\r\n      selectedString,\r\n      multipleSelectedElements,\r\n      clientHeight,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    const { formStore, name, isMultiple, overrideValue } = this.props; */\r\n    const { overrideValue } = this.props;\r\n\r\n    if (overrideValue !== nextProps.overrideValue) {\r\n      this.handleChange(nextProps.overrideValue);\r\n    }\r\n\r\n    return true;\r\n    // Render only when open state or selected string is different\r\n    /* return (\r\n      isOpened !== nextState.isOpened ||\r\n      selectedString !== nextState.selectedString ||\r\n      multipleSelectedElements !== nextState.multipleSelectedElements ||\r\n      clientHeight !== nextState.clientHeight ||\r\n      extraPadding !== nextState.extraPadding ||\r\n      !isMultiple && formStore && nextProps.formStore[name] && nextProps.formStore[name]\r\n    ); */\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate() {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { formStore, name } = this.props;\r\n    const isForm = formStore && formStore[name];\r\n\r\n    const isElements = !_.isEmpty(multipleSelectedElements);\r\n    if (isForm) {\r\n      const formValues = formStore[name];\r\n\r\n      if (!isElements || (isElements && !_.isEqual(formValues, multipleSelectedElements))) {\r\n        if (formValues.constructor === Array) {\r\n          this.setState({\r\n            multipleSelectedElements: [...formValues],\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isElements && !isForm) {\r\n      this.setState({\r\n        multipleSelectedElements: null,\r\n      });\r\n    }\r\n    // Update control height if necessary, since the\r\n    // height may change after render\r\n    this.updateDimensions();\r\n    /* const { isOpened } = this.state;\r\n    if (isOpened && !prevState.isOpened) {\r\n      setTimeout(() => {\r\n        const bodyRect = document.body.getBoundingClientRect();\r\n        const elemRect = this.wrapperRef.getBoundingClientRect();\r\n        const offset = elemRect.top - bodyRect.top;\r\n        window.scrollTo(0, offset);\r\n      }, 300);\r\n    } */\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentWillUnmount\r\n   */\r\n  componentWillUnmount() {\r\n    // Remove Handler to handle click outside of screen\r\n    document.removeEventListener('mousedown', this.handleClickOutside);\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  /**\r\n   * Get client height of the selection container\r\n   * to determine the height of the whole control.\r\n   * (For multiple only)\r\n   *\r\n   * @param {object} event\r\n   */\r\n  updateDimensions() {\r\n    const { isMultiple } = this.props;\r\n\r\n    // Only multiple will expand\r\n    if (!isMultiple) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      clientHeight,\r\n      height,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    // if client height is not same as DOM, update with padding if expanded\r\n    if (clientHeight !== this.selectedContainer.clientHeight) {\r\n      this.setState({\r\n        clientHeight: this.selectedContainer.clientHeight,\r\n        extraPadding: this.selectedContainer.clientHeight - 2 * extraPadding > height ? extraPaddingForMultiple : 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange(value) {\r\n    const {\r\n      name,\r\n      form,\r\n      formChange,\r\n      notForm,\r\n      valueChangeCallback,\r\n    } = this.props;\r\n\r\n    if (notForm) {\r\n      if (valueChangeCallback) {\r\n        valueChangeCallback(value);\r\n      }\r\n      this.inputField.value = value;\r\n      return;\r\n    }\r\n\r\n    formChange(form, name, value);\r\n  }\r\n\r\n  /**\r\n   * End selection if click on outside\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleClickOutside(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // If clicked outside, go to exit\r\n    if (\r\n      isOpened &&\r\n      this.wrapperRef &&\r\n      !this.wrapperRef.contains(event.target)\r\n    ) {\r\n      // Close it\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n\r\n      // Unset from focus\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle on enter key\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleInputKeyPress(event) {\r\n    const {\r\n      isOpened,\r\n      listElementsCounter,\r\n    } = this.state;\r\n\r\n    // If pressed on enter, go to exit\r\n    if (event.key === 'Enter') {\r\n      this.handleExit();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Press down arrow from input\r\n    if (event.key === 'ArrowDown') {\r\n      if (isOpened) {\r\n        if (listElementsCounter === -1) {\r\n          event.preventDefault();\r\n        }\r\n        this.handleItemKeyPress(event);\r\n      } else {\r\n        this.setState({\r\n          isOpened: true,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Key press on list items\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleItemKeyPress(event) {\r\n    const {\r\n      listElementsCounter,\r\n    } = this.state;\r\n\r\n    let index = listElementsCounter;\r\n\r\n    // If click enter on list item\r\n    if (event.key === 'Enter') {\r\n      // Focus input field\r\n      // this.inputField.focus();\r\n      // Handle exit with the item value\r\n      this.handleExit(this.listElements[index].getAttribute('value'));\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Navigate list with up down arrow\r\n    if (event.key === 'ArrowDown') {\r\n      index = listElementsCounter + 1;\r\n    } else if (event.key === 'ArrowUp') {\r\n      index = listElementsCounter - 1;\r\n    }\r\n\r\n    // Cap index within list\r\n    index = Math.max(0, Math.min(index, this.listElements.length - 1));\r\n    // Focus on the next item\r\n    this.listElements[index].focus();\r\n\r\n    // If index changed, update state\r\n    if (index !== listElementsCounter) {\r\n      this.setState({\r\n        listElementsCounter: index,\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of dropdown list\r\n   *\r\n   * @param {bool} isOpenOnly - Only can open\r\n   */\r\n  handleSelectClick(isOpenOnly = false) {\r\n    const {\r\n      isOpened,\r\n      selectedString,\r\n      maxheight,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const {\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // If this frame is not from focus\r\n    if (!this.isFromFocus) {\r\n      // Set open state\r\n      if (!isOpenOnly || (isOpenOnly && !isOpened)) {\r\n        this.setState({\r\n          isOpened: !isOpened,\r\n        });\r\n      }\r\n\r\n      // If previously invalid, reset list\r\n      if (!selectedString || selectedString === resultNullString) {\r\n        this.setState({\r\n          listItems: dropList,\r\n          listHeight: maxheight,\r\n          listElementsCounter: -1,\r\n        });\r\n\r\n        if (!isMultiple || (isMultiple && _.isEmpty(multipleSelectedElements))) {\r\n          this.handleChange(null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Unlock from focus\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles selection of dropdown item\r\n   *\r\n   * @param {object} event - Click event\r\n   * @param {string} item - Input string\r\n   */\r\n  handleSelectItemClick(event, item) {\r\n    // If click on null item return\r\n    if (item === resultNullString) {\r\n      return;\r\n    }\r\n\r\n    const { dropList } = this.props;\r\n\r\n    const {\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Reset drop list items to all, set selected string,\r\n    // and reset any errors\r\n    this.setState({\r\n      listItems: dropList,\r\n    });\r\n\r\n    // this.formParent.clearErrorString();\r\n\r\n    if (isMultiple) {\r\n      // If multiple dropdown, reset selected string\r\n      this.setState({\r\n        selectedString: '',\r\n      });\r\n\r\n      // Set input field text to empty\r\n      this.inputField.value = '';\r\n      // Refocus input bar\r\n      this.inputField.focus();\r\n\r\n      // Set multiple selected item\r\n      this.handleSetMultipleSelectedItem(item);\r\n    } else {\r\n      this.setState({\r\n        selectedString: item,\r\n      });\r\n\r\n      // Toggle the dropdown menu\r\n      this.handleSelectClick();\r\n\r\n      // Update redux state\r\n      this.handleChange(item);\r\n\r\n      // Close dropdown\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Selection of multi select dropdown\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleSetMultipleSelectedItem(item) {\r\n    const { multipleSelectedElements, height } = this.state;\r\n\r\n    const newArr = multipleSelectedElements || [];\r\n\r\n    // If item does not exists in the selected list\r\n    if (newArr.indexOf(item) < 0) {\r\n      // Add item to list\r\n      newArr.push(item);\r\n\r\n      // Change state\r\n      this.setState({\r\n        multipleSelectedElements: newArr,\r\n        clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n        isOpened: false,\r\n      });\r\n\r\n      // Update redux store\r\n      this.handleChange(newArr);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys multi selected item\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleDestroySelected(item) {\r\n    const { height } = this.state;\r\n\r\n    const { multipleSelectedElements } = this.state;\r\n    // Duplicate clean copy\r\n    let newArr = multipleSelectedElements.slice();\r\n    // Delete chosen item\r\n    const index = newArr.indexOf(item);\r\n    newArr.splice(index, 1);\r\n    // Set null if empty\r\n    newArr = newArr.length === 0 ? null : newArr;\r\n\r\n    // Update state\r\n    this.setState({\r\n      multipleSelectedElements: newArr,\r\n      clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n    });\r\n\r\n    // Update redux state\r\n    this.handleChange(newArr);\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles on input changes\r\n   *\r\n   * @param {object} event\r\n   */\r\n  async handleOnInputChange(event) {\r\n    // Get current input value\r\n    const { value } = event.target;\r\n\r\n    const { dropList } = this.props;\r\n    const { height, numItemsDisplay } = this.state;\r\n\r\n    // Attempt to match value to list\r\n    const result = _.filter(\r\n      dropList,\r\n      item => item.toString().toUpperCase().indexOf(value.toString().toUpperCase()) === 0,\r\n    );\r\n\r\n    // Get length of new list, min 1 which is error string\r\n    const length = result.length ? result.length : 1;\r\n\r\n    // Set new list items, height of dropdown list,\r\n    // Force open list on type, and set selected string to value\r\n    this.setState({\r\n      listItems: result.length ? result : [resultNullString],\r\n      listHeight: (_.min([length, numItemsDisplay]) + 1) * height,\r\n      isOpened: true,\r\n      selectedString: value,\r\n      listElementsCounter: -1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle Blur event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleBlur(event) {\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n\r\n    // If outside of children\r\n    if (!isChildren) {\r\n      // Close dropdown\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n      // Handle exit case\r\n      this.handleExit();\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Focus event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleFocus(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n    // If not from children\r\n    if (!isChildren) {\r\n      // Open dropdown\r\n      if (!isOpened) {\r\n        this.handleSelectClick(true);\r\n        // Prevent double click\r\n        this.isFromFocus = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle exit selection of entered input\r\n   *\r\n   * @param {string} inputString - From selection\r\n   */\r\n  handleExit(inputString = null) {\r\n    const {\r\n      selectedString,\r\n      listItems,\r\n    } = this.state;\r\n\r\n    const {\r\n      placeholderString,\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Result string if match original list\r\n    let resultString = null;\r\n    // If input causes an error\r\n    let isError = false;\r\n    // The string to use\r\n    const finalString = inputString !== null ? inputString : selectedString;\r\n    // If possible valid input\r\n    if (\r\n      finalString &&\r\n      finalString !== placeholderString &&\r\n      finalString !== ''\r\n    ) {\r\n      // Attempt to match finalString to original list\r\n      listItems.some((obj) => {\r\n        const result = obj.toString().toLowerCase() === finalString.toString().toLowerCase();\r\n        if (result) {\r\n          resultString = obj;\r\n        }\r\n\r\n        return result;\r\n      });\r\n\r\n      // Check error if no match\r\n      isError = !resultString;\r\n      // Set result string to match value or error value\r\n      resultString = isError ? null : resultString;\r\n\r\n      if (isMultiple) {\r\n        if (!isError) {\r\n          this.handleSetMultipleSelectedItem(resultString);\r\n        }\r\n\r\n        this.inputField.value = '';\r\n      } else {\r\n        // Update redux value\r\n        this.handleChange(resultString);\r\n\r\n        this.setState({\r\n          isOpened: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    // If not error, reset list to list all,\r\n    // Set selected string and error if possible\r\n    // and close the list\r\n    this.setState({\r\n      listItems: isError ? listItems : dropList,\r\n      selectedString: resultString,\r\n    });\r\n\r\n    if (isError) {\r\n      // this.formParent.setErrorString(resultNullString);\r\n    } else {\r\n      // this.formParent.clearErrorString();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the dropdown list items\r\n   */\r\n  renderListItems() {\r\n    const { listItems, height } = this.state;\r\n    this.listElements = [];\r\n\r\n    const result = _.map(listItems, item => (\r\n      <li key={item}>\r\n        <div\r\n          className=\"list-item text-style\"\r\n          style={{ height }}\r\n          onClick={event => this.handleSelectItemClick(event, item)}\r\n          role=\"button\"\r\n          tabIndex={-1}\r\n          value={item}\r\n          onKeyDown={(event) => { this.handleItemKeyPress(event); }}\r\n          ref={(node) => { if (node !== null) this.listElements.push(node); }}\r\n        >\r\n          <p>{item}</p>\r\n        </div>\r\n      </li>\r\n    ));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render the multiple selected elements in the input container\r\n   */\r\n  renderMultipleSelectedElements() {\r\n    const { multipleSelectedElements } = this.state;\r\n\r\n    return _.map(multipleSelectedElements, item => (\r\n      <div className=\"selected-item-container\" key={item}>\r\n        <div className=\"selected-item\">\r\n          <p>{item}</p>\r\n          <button\r\n            className=\"selected-item-destroy\"\r\n            onMouseUp={() => this.handleDestroySelected(item)}\r\n            tabIndex={-1}\r\n          >\r\n            <img src={Cross} alt=\"cross.svg\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  renderTextInput() {\r\n    const {\r\n      isMultiple,\r\n      isDisableTyping,\r\n      placeholderString,\r\n      name,\r\n      notForm,\r\n    } = this.props;\r\n\r\n    if (isMultiple || notForm) {\r\n      return (\r\n        isDisableTyping ?\r\n          <input\r\n            component=\"input\"\r\n            type=\"text\"\r\n            placeholder={placeholderString}\r\n            autoComplete=\"off\"\r\n            ref={node => (this.inputField = node)}\r\n            onChange={event => this.handleOnInputChange(event)}\r\n            onKeyDown={event => this.handleInputKeyPress(event)}\r\n            onClick={() => this.handleSelectClick(true)}\r\n            tabIndex={0}\r\n            disabled\r\n          />\r\n          :\r\n          <input\r\n            component=\"input\"\r\n            type=\"text\"\r\n            placeholder={placeholderString}\r\n            autoComplete=\"off\"\r\n            ref={node => (this.inputField = node)}\r\n            onChange={event => this.handleOnInputChange(event)}\r\n            onKeyDown={event => this.handleInputKeyPress(event)}\r\n            onClick={() => this.handleSelectClick(true)}\r\n            tabIndex={0}\r\n          />\r\n      );\r\n    }\r\n\r\n    return (\r\n      isDisableTyping ?\r\n        <Field\r\n          name={name}\r\n          component=\"input\"\r\n          type=\"text\"\r\n          placeholder={placeholderString}\r\n          autoComplete=\"off\"\r\n          ref={node => (this.inputField = node)}\r\n          onChange={event => this.handleOnInputChange(event)}\r\n          onKeyDown={event => this.handleInputKeyPress(event)}\r\n          onClick={() => this.handleSelectClick(true)}\r\n          tabIndex={0}\r\n          disabled\r\n        />\r\n        :\r\n        <Field\r\n          name={name}\r\n          component=\"input\"\r\n          type=\"text\"\r\n          placeholder={placeholderString}\r\n          autoComplete=\"off\"\r\n          ref={node => (this.inputField = node)}\r\n          onChange={event => this.handleOnInputChange(event)}\r\n          onKeyDown={event => this.handleInputKeyPress(event)}\r\n          onClick={() => this.handleSelectClick(true)}\r\n          tabIndex={0}\r\n        />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render component\r\n   */\r\n  render() {\r\n    const {\r\n      isOpened,\r\n      listHeight,\r\n      height,\r\n      clientHeight,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    if (height && listHeight) {\r\n      const {\r\n        zIndex,\r\n        maxWidth,\r\n        isMultiple,\r\n        desc,\r\n        extraInfo,\r\n        errorString,\r\n        formStore,\r\n        name,\r\n        validateForm,\r\n      } = this.props;\r\n\r\n      // Actual height of the whole control\r\n      const actualheight = isOpened ? listHeight : height;\r\n      // Actual height of only the list\r\n      const actualListheight = actualheight - height;\r\n\r\n      // Dynamic styles\r\n      const dropDownOpenStyle = isOpened ? 'dropdown-container-opened' : 'dropdown-container-closed';\r\n      const arrowStyle = isOpened ? 'angle-up' : 'angle-down';\r\n      const listStyle = isOpened ? 'list-opened' : 'list-closed';\r\n      const isErrorStyle = errorString ? 'error' : '';\r\n      const multipleStyle = isMultiple ? 'multi-drop' : '';\r\n      const refValue = formStore ? formStore[name] : null;\r\n\r\n      return (\r\n        <FormInputWrapper\r\n          desc={desc}\r\n          ref={node => (this.formParent = node)}\r\n          extraInfo={extraInfo}\r\n          errorString={errorString}\r\n          refValue={refValue}\r\n          validateForm={validateForm}\r\n        >\r\n          <div\r\n            className={`dropdown ${multipleStyle}`}\r\n            style={{ height: clientHeight, zIndex, maxWidth }}\r\n            ref={node => (this.wrapperRef = node)}\r\n            onBlur={event => this.handleBlur(event)}\r\n            onFocus={event => this.handleFocus(event)}\r\n          >\r\n            <div\r\n              className={`dropdown-container ${dropDownOpenStyle} ${isErrorStyle}`}\r\n            >\r\n              <div\r\n                className=\"selected-container\"\r\n                onKeyDown={event => this.handleInputKeyPress(event)}\r\n                role=\"button\"\r\n                style={{ minHeight: height }}\r\n                tabIndex={-1}\r\n                ref={node => (this.selectedContainer = node)}\r\n              >\r\n                {\r\n                  isMultiple ?\r\n                    <div className=\"mag-container\" style={{ minHeight: height }}>\r\n                      <img\r\n                        className=\"mag-icon\"\r\n                        src={MagnifyGlass}\r\n                        alt=\"magnifyGlass.svg\"\r\n                      />\r\n                    </div>\r\n                  :\r\n                    null\r\n                }\r\n                <div\r\n                  className=\"selected-items-container\"\r\n                  style={{ paddingTop: extraPadding, paddingBottom: extraPadding }}\r\n                >\r\n                  {this.renderMultipleSelectedElements()}\r\n                  <div className=\"selected-text selected-text-multi text-style\">\r\n                    {this.renderTextInput()}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"selected-arrow\"\r\n                  onClick={() => this.handleSelectClick()}\r\n                  onKeyPress={() => {}}\r\n                  role=\"button\"\r\n                  tabIndex={-1}\r\n                >\r\n                  <img\r\n                    src={Arrow}\r\n                    alt=\"arrow.svg\"\r\n                    className={`selected-arrow-style ${arrowStyle}`}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Scrollbars\r\n                className={`list-container ${listStyle}`}\r\n                style={{\r\n                  minHeight: actualListheight,\r\n                }}\r\n                ref={node => this.listContainer = node}\r\n                tabIndex={-1}\r\n              >\r\n                {\r\n                  isOpened ?\r\n                    this.renderListItems()\r\n                  :\r\n                    null\r\n                }\r\n              </Scrollbars>\r\n            </div>\r\n          </div>\r\n        </FormInputWrapper>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nDropDownV2.defaultProps = {\r\n  maxWidth: '100%',\r\n  numItemsDisplay: maxItemsDisplay,\r\n  isMultiple: false,\r\n  desc: null,\r\n  isDisableTyping: false,\r\n  extraInfo: null,\r\n  notForm: false,\r\n  overrideValue: null,\r\n  errorString: null,\r\n  dropList: null,\r\n  formStore: null,\r\n  valueChangeCallback: null,\r\n  name: null,\r\n  form: null,\r\n  validateForm: null,\r\n};\r\n\r\nDropDownV2.propTypes = {\r\n  formStore: PropTypes.object,\r\n  dropList: PropTypes.array,\r\n  placeholderString: PropTypes.string.isRequired,\r\n  maxWidth: PropTypes.string,\r\n  size: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  zIndex: PropTypes.number.isRequired,\r\n  numItemsDisplay: PropTypes.number,\r\n  formChange: PropTypes.func.isRequired,\r\n  isMultiple: PropTypes.bool,\r\n  desc: PropTypes.string,\r\n  isDisableTyping: PropTypes.bool,\r\n  extraInfo: PropTypes.object,\r\n  notForm: PropTypes.bool,\r\n  overrideValue: PropTypes.string,\r\n  errorString: PropTypes.string,\r\n  valueChangeCallback: PropTypes.func,\r\n  form: PropTypes.string,\r\n  validateForm: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  formStore: (getFormValues(ownProps.form)(state)),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  formChange: (form, key, value) => {\r\n    dispatch(change(form, key, value));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DropDownV2);\r\n","module.exports = __webpack_public_path__ + \"static/media/magnifyGlass.4cd15637.svg\";","module.exports = __webpack_public_path__ + \"static/media/cross.8df9f59e.svg\";"],"sourceRoot":""}