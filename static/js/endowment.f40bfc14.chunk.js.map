{"version":3,"sources":["assets/images/Endowment/policypal-endowment-insurance-1.svg","assets/images/Endowment/policypal-endowment-insurance-2.svg","assets/images/Endowment/policypal-endowment-insurance-3.svg","components/Endowment/EndowmentEditDetail.js","components/Endowment/EndowmentMain.js","containers/Endowment/EndowmentMainContainer.js","components/Endowment/EndowmentChoosePlan.js","containers/Endowment/EndowmentChoosePlanContainer.js","components/Endowment/EndowmentDetail.js","containers/Endowment/EndowmentDetailContainer.js","containers/Endowment/EndowmentRouteContainer.js","assets/images/MainFormIcons/Avatar.svg","components/Templates/MultiCompareView/MultiCompareInner.js","components/Templates/MultiCompareView/MultiCompareView.js","assets/images/MainFormIcons/Dollar.svg","assets/images/MainFormIcons/Umbrella.svg"],"names":["module","exports","__webpack_require__","p","EndowmentEditDetail","props","_this","Object","classCallCheck","this","endowmentFields","possibleConstructorReturn","getPrototypeOf","call","state","errorStringData","birthDate","data","remapFormFields","form_fields","handleSubmit","bind","assertThisInitialized","handleCloseEdit","handleRevert","validateForm","nextProps","prevState","storeForm","birth_date","_this$props","setCloseCallBack","originalValues","date","age","getAge","e","errorResult","type","start","slashedStringDateToDate","min_date","end","max_date","smoker","options","coverage_amount","premium_term","setState","_this2","isFirstValidate","arguments","length","undefined","_this$props2","closePopUp","setInsurFormState","setSubmit","submitCallback","history","isEmptyResult","_","isEmpty","dateReValidate","error","gaEvent","event_category","event_label","storeStringToDate","ampTag","gender","premium","term","FORMSTATES","CHOOSEPLAN","index","push","concat","path","_this3","_this$props3","change","resetForm","keys","forEach","key","_this4","_this$state","_this$props4","form","ageStyle","react_default","a","createElement","reactstrap_es","className","xs","sm","DatePickerV2","name","size","zIndex","desc","display_name","startDate","endDate","currDate","default_date","errorString","_this5","_this$state2","_this$props5","noGutters","src","Avatar","alt","Selection","noEmptyTextSelection","map","option","description","sizeInSM","renderBirthDate","style","marginTop","Dollar","Slider","hideWidth","inputList","displayList","simplifyCostArray","suffix","Umbrella","DropDownV2","placeholderString","dropList","_this6","_this$props6","isPopUp","onSubmit","renderFields","Button","variant","width","height","onClick","RestrictionsPopup","ref","node","resPopup","Component","defaultProps","withRouter","reduxForm","destroyOnUnmount","connect","getFormValues","isRevert","editForm","dispatch","reset","setInsuranceFormState","invokeSubmit","setRestrictionPopup","EndowmentMain","endowmentPromoGiveAway","FormLanding","img1","Endowment1","img2","Endowment2","img3","Endowment3","imgAlt","promo","react","Endowment_EndowmentEditDetail","EndowmentMainContainer","loading","clearData","getEndowmentFields","setFormState","MAIN","window","scrollTo","gaTag","page_title","page_path","location","search","prevProps","loadingEnd","Endowment_EndowmentMain","endowment","insurance","promoGiveaways","callBack","errorMsg","time","setLoading","clearLoading","clearEndowmentData","EndowmentChoosePlan","selectedPlanData","partner","info","insurer_slug","console","log","message","MultiCompareView","assign","category","valuesToListen","value","extra","editDetail","buttonDesc","forceFixedOnDesktop","trackingTags","default","getAmpTags","EndowmentChoosePlanContainer","endowmentForm","getPlans","getInsurersList","plansData","validInsurersList","Endowment_EndowmentChoosePlan","mainForm","parseForm","parseEndowmentForm","setSelectedPlanData","DETAILFORM","loadingFailBackState","goBack","parsedForm","getEndowmentPlans","getValidInsurersList","EndowmentDetail","sessionId","errorArray","setTimeout","checkoutComplete","openCheckoutComplete","checkOutOthers","popup","openPopupWithJSX","getSynergyJSX","document","body","scrollHeight","planDetails","isLoggedIn","piggyCallback","changePlan","DetailForm","checkoutButtonDesc","TextInput","email","Date","mobile_number","PopupWithText","showCancelButton","CheckoutComplete","isQuoteOnly","isSellLeads","wrappedComponentRef","constants","EndowmentDetailContainer","profileValues","selectedData","logo","Logos","others","logoDesc","planName","planTotal","netPrice","policyInfo","planType","net_price","toFixed","insurer_name","product_name","Endowment_EndowmentDetail","userDetails","getAnonymousSession","params","propsFromState","propsFromDispatch","ownProps","objectSpread","detailForm","getSessionParams","EndowmentRouteContainer","formIndex","resetStoreForm","replace","resetCompare","resetInsuranceForm","getPromoGiveaways","setInitialFormState","renderStepProgress","renderLifeForms","changeUserDetails","isMounted","formState","match","routeResult","routeHandler","changeForm","surname","firstname","firstName","dateOfBirth","contact","StepProgressBar","maxWidth","stateList","stateDescriptions","main","charged","Endowment_EndowmentChoosePlanContainer","Endowment_EndowmentDetailContainer","Endowment_EndowmentMainContainer","meta","isProduction","Helmet","content","RefreshTimer","refresher","invokeNewTimer","resultToMatch","MultiCompareInner","tabIndex","currentTab","tabs","policyTypes","handleTabClick","renderTabs","setPlanType","lowerCase","nextState","isEqual","selectedIndex","initialIndex","categoryTab","wrappedInstance","isCameFromBackButton","currIncomingIndex","tabIndexToUse","goToIndex","setSelectedIndex","isInitial","_this$state3","oldPolicyTypes","planImages","policyTypesToUse","reduce","result","findIndex","theIndex","image","startCase","img","tabInfo","currentTabIndex","tab","newTab","_this$state4","scrollPopUpCallback","tabStyle","TabView","isDataFadeOnly","isDisableDropdown","big","CompareView","notAccordion","productChangable","ChangeInitialFormData","headerValue","conditions","Enquiry","compare","defaultInsurers","selectedInsurers","currentInsurers","parsedData","parseData","trip_type","parsedParams","setSelectedInsurers","getNewData","onInsurerClick","newDefaultInsurers","plan","slice","isLoading","hoveredIndex","insurer","insurerSlug","incomingInsurers","MultiCompareView_MultiCompareInner","mainMsg","array"],"mappings":"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","file":"static/js/endowment.f40bfc14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/policypal-endowment-insurance-1.12ba6b83.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-endowment-insurance-2.b260f8c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-endowment-insurance-3.a09039d7.svg\";","/**\r\n * EndowmentEditDetail.js\r\n * The edit detail view for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues, reset } from 'redux-form';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport Avatar from 'assets/images/MainFormIcons/Avatar.svg';\r\nimport Dollar from 'assets/images/MainFormIcons/Dollar.svg';\r\nimport Umbrella from 'assets/images/MainFormIcons/Umbrella.svg';\r\n\r\nimport Button from '../FormsV3/Button/Button';\r\nimport Selection from '../Forms/Selection/Selection';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport Slider from '../Forms/Slider/Slider';\r\nimport DropDownV2 from '../Forms/DropDown/DropDownV2';\r\n\r\nimport RestrictionsPopup from '../Templates/RestrictionsPopup/RestrictionsPopup';\r\n\r\nimport { invokeSubmit } from '../../actions/editFormActions';\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { setRestrictionPopup } from '../../actions/restrictionsActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { storeStringToDate, getAge, slashedStringDateToDate } from '../../lib/dateFunctions';\r\nimport { remapFormFields, simplifyCostArray } from '../../lib/helperFunctions';\r\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nconst formName = 'endowment';\r\n\r\nclass EndowmentEditDetail extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { storeForm } = nextProps;\r\n    if (storeForm && storeForm.birth_date !== prevState.birthDate) {\r\n      return { birthDate: storeForm.birth_date };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { endowmentFields } = this.props;\r\n\r\n    this.state = {\r\n      errorStringData: {},\r\n      birthDate: null,\r\n      data: remapFormFields(endowmentFields.form_fields),\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\r\n    this.handleRevert = this.handleRevert.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { storeForm, setCloseCallBack } = this.props;\r\n    this.originalValues = storeForm;\r\n\r\n    if (setCloseCallBack) {\r\n      setCloseCallBack(this.handleRevert);\r\n    }\r\n  }\r\n\r\n  getAge(date) {\r\n    let age = '';\r\n    if (date && date !== -1) {\r\n      age = getAge(date);\r\n    }\r\n\r\n    return age;\r\n  }\r\n\r\n  validateForm(e) {\r\n    const { data } = this.state;\r\n\r\n    const fieldsToCheck = [\r\n      'gender',\r\n      'smoker',\r\n      'birth_date',\r\n      'coverage_amount',\r\n      'premium_term',\r\n    ];\r\n\r\n    const errorResult = validateForm(e, fieldsToCheck, {\r\n      birth_date: { type: 'DATE', start: slashedStringDateToDate(data.birth_date.min_date), end: slashedStringDateToDate(data.birth_date.max_date) },\r\n      smoker: { type: 'ARRAY', data: data.smoker.options },\r\n      coverage_amount: { type: 'ARRAY', data: data.coverage_amount.options },\r\n      premium_term: { type: 'ARRAY', data: data.premium_term.options },\r\n    });\r\n\r\n    this.setState({\r\n      errorStringData: errorResult,\r\n    });\r\n\r\n    return errorResult;\r\n  }\r\n\r\n  handleSubmit(e, isFirstValidate = true) {\r\n    // e.preventDefault();\r\n    // console.log(e);\r\n    const { birthDate } = this.state;\r\n    const {\r\n      closePopUp,\r\n      setInsurFormState,\r\n      setSubmit,\r\n      storeForm,\r\n      submitCallback,\r\n      history,\r\n    } = this.props;\r\n\r\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      setSubmit();\r\n      this.originalValues = storeForm;\r\n\r\n      if (submitCallback) {\r\n        submitCallback();\r\n      } else {\r\n        gaEvent('Endowment - Get Quote', {\r\n          event_category: 'Endowment',\r\n          event_label: 'Button - Endowment - Get Quote',\r\n        });\r\n\r\n        const date = storeStringToDate(birthDate);\r\n        const age = this.getAge(date);\r\n        ampTag('EndGetQuoteA', {\r\n          gender: e.gender,\r\n          smoker: e.smoker,\r\n          age,\r\n          premium: e.coverage_amount,\r\n          term: e.premium_term,\r\n        });\r\n      }\r\n\r\n      setInsurFormState(FORMSTATES.CHOOSEPLAN.index);\r\n      history.push(`/endowment${FORMSTATES.CHOOSEPLAN.path}`);\r\n\r\n\r\n      if (closePopUp) {\r\n        closePopUp();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleRevert() {\r\n    const { change, resetForm } = this.props;\r\n    resetForm();\r\n    Object.keys(this.originalValues).forEach((key) => {\r\n      change(key, this.originalValues[key]);\r\n    });\r\n  }\r\n\r\n  handleCloseEdit() {\r\n    const { closePopUp } = this.props;\r\n    closePopUp(this.handleRevert);\r\n  }\r\n\r\n  renderBirthDate() {\r\n    const { errorStringData, birthDate, data } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n\r\n    const date = storeStringToDate(birthDate);\r\n    const ageStyle = date ? 'active' : 'inactive';\r\n    const age = this.getAge(date);\r\n\r\n    return (\r\n      <Col className=\"birth-date-container\" xs={12} sm={10}>\r\n        <p className=\"age\">\r\n          <span className={ageStyle}>Age</span>\r\n          <span className=\"age-value\">{age}</span>\r\n        </p>\r\n        <DatePickerV2\r\n          form={form}\r\n          change={change}\r\n          name=\"birth_date\"\r\n          size=\"medium\"\r\n          zIndex={97}\r\n          desc={data.birth_date.display_name}\r\n          startDate={slashedStringDateToDate(data.birth_date.min_date)}\r\n          endDate={slashedStringDateToDate(data.birth_date.max_date)}\r\n          currDate={slashedStringDateToDate(data.birth_date.default_date)}\r\n          errorString={errorStringData.birth_date}\r\n          validateForm={() => this.validateForm(storeForm)}\r\n        />\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  renderFields() {\r\n    const { errorStringData, data } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n\r\n    return (\r\n      <Row noGutters>\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img src={Avatar} alt=\"Avatar.svg\" />\r\n        </Col>\r\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n          <Selection\r\n            form={form}\r\n            change={change}\r\n            name=\"gender\"\r\n            type=\"text-selection\"\r\n            noEmptyTextSelection\r\n            options={_.map(data.gender.options, option => ({\r\n              key: option,\r\n              description: option,\r\n            }))}\r\n            sizeInSM={6}\r\n            desc={data.gender.display_name}\r\n            zIndex={99}\r\n            errorString={errorStringData.gender}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\r\n          <Selection\r\n            form={form}\r\n            change={change}\r\n            name=\"smoker\"\r\n            type=\"text-selection\"\r\n            noEmptyTextSelection\r\n            options={_.map(data.smoker.options, option => ({\r\n              key: option,\r\n              description: option,\r\n            }))}\r\n            sizeInSM={6}\r\n            zIndex={98}\r\n            desc={data.smoker.display_name}\r\n            errorString={errorStringData.smoker}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\r\n        {this.renderBirthDate()}\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img style={{ marginTop: 32 }} src={Dollar} alt=\"Dollar.svg\" />\r\n        </Col>\r\n        <Col xs={12} sm={10}>\r\n          <Slider\r\n            form={form}\r\n            change={change}\r\n            name=\"coverage_amount\"\r\n            desc={data.coverage_amount.display_name}\r\n            zIndex={96}\r\n            hideWidth={576}\r\n            inputList={data.coverage_amount.options}\r\n            displayList={simplifyCostArray(data.coverage_amount.options)}\r\n            suffix=\"Annual Premium\"\r\n            errorString={errorStringData.coverage_amount}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img src={Umbrella} alt=\"Umbrella.svg\" />\r\n        </Col>\r\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n          <DropDownV2\r\n            form={form}\r\n            change={change}\r\n            name=\"premium_term\"\r\n            placeholderString=\"Payment Term\"\r\n            dropList={data.premium_term.options}\r\n            size=\"medium\"\r\n            zIndex={95}\r\n            desc={data.premium_term.display_name}\r\n            errorString={errorStringData.premium_term}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      handleSubmit,\r\n      isPopUp,\r\n      form,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"landing-form-container\">\r\n        {\r\n          isPopUp ?\r\n            <p className=\"edit-header\">Edit Endowment Insurance Details</p>\r\n          :\r\n            null\r\n        }\r\n        <form onSubmit={handleSubmit(this.handleSubmit)}>\r\n          <Row className=\"input-offset\" noGutters>\r\n            {this.renderFields()}\r\n          </Row>\r\n          <Row className=\"align-items-center button-container\" noGutters>\r\n            {\r\n              isPopUp ?\r\n                <Col className=\"justify-content-center button\" xs={12}>\r\n                  <Row noGutters>\r\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\r\n                      <Button\r\n                        className=\"button-left\"\r\n                        variant=\"medium-flat\"\r\n                        width={165}\r\n                        height={72}\r\n                        onClick={() => this.handleCloseEdit()}\r\n                      >\r\n                        <p>Cancel</p>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"medium-flat-green\"\r\n                        width={165}\r\n                        height={72}\r\n                      >\r\n                        <p>Save</p>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              :\r\n                <Col className=\"justify-content-center button\" xs={12}>\r\n                  <Button type=\"submit\" variant=\"medium-flat-green\" width={165} height={72}>\r\n                    <p>Get Quote</p>\r\n                  </Button>\r\n                </Col>\r\n            }\r\n          </Row>\r\n        </form>\r\n        <RestrictionsPopup ref={node => this.resPopup = node} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentEditDetail.defaultProps = {\r\n  isPopUp: false,\r\n  setCloseCallBack: null,\r\n  storeForm: null,\r\n  closePopUp: null,\r\n  submitCallback: null,\r\n};\r\n\r\nEndowmentEditDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  isPopUp: PropTypes.bool,\r\n  resetForm: PropTypes.func.isRequired,\r\n  closePopUp: PropTypes.func,\r\n  setInsurFormState: PropTypes.func.isRequired,\r\n  setSubmit: PropTypes.func.isRequired,\r\n  storeForm: PropTypes.object,\r\n  setCloseCallBack: PropTypes.func,\r\n  submitCallback: PropTypes.func,\r\n  endowmentFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  isRevert: state.editForm.isRevert,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetForm: () => {\r\n    dispatch(reset(formName));\r\n  },\r\n  setInsurFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  setSubmit: () => {\r\n    dispatch(invokeSubmit());\r\n  },\r\n  setRestrictionPopup: (data) => {\r\n    dispatch(setRestrictionPopup(data));\r\n  },\r\n});\r\n\r\nexport default withRouter(reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, mapDispatchToProps)(EndowmentEditDetail)));\r\n","/**\r\n * EndowmentMain.js\r\n * The Main landing form for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Endowment1 from 'assets/images/Endowment/policypal-endowment-insurance-1.svg';\r\nimport Endowment2 from 'assets/images/Endowment/policypal-endowment-insurance-2.svg';\r\nimport Endowment3 from 'assets/images/Endowment/policypal-endowment-insurance-3.svg';\r\n\r\nimport EndowmentEditDetail from './EndowmentEditDetail';\r\nimport FormLanding from '../Templates/FormLanding/FormLanding';\r\n\r\nimport './Endowment.scss';\r\n\r\nclass EndowmentMain extends Component {\r\n  render() {\r\n    const { endowmentFields, endowmentPromoGiveAway } = this.props;\r\n\r\n    return (\r\n      <div className=\"endowment-container\">\r\n        <FormLanding\r\n          img1={Endowment1}\r\n          img2={Endowment2}\r\n          img3={Endowment3}\r\n          imgAlt=\"PolicyPal Endowment Insurance\"\r\n          promo={endowmentPromoGiveAway}\r\n          desc={\r\n            <Fragment>\r\n              <p>Get your Endowment Quotation</p>\r\n              <p>in minutes!</p>\r\n            </Fragment>\r\n          }\r\n        >\r\n          <EndowmentEditDetail\r\n            endowmentFields={endowmentFields}\r\n          />\r\n        </FormLanding>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentMain.defaultProps = {\r\n  endowmentPromoGiveAway: null,\r\n};\r\n\r\nEndowmentMain.propTypes = {\r\n  endowmentFields: PropTypes.object.isRequired,\r\n  endowmentPromoGiveAway: PropTypes.object,\r\n};\r\n\r\nexport default EndowmentMain;\r\n","/**\r\n * EndowmentMainContainer.js\r\n * Main Container for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport EndowmentMain from '../../components/Endowment/EndowmentMain';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { getEndowmentFields, clearEndowmentData } from '../../actions/endowmentActions';\r\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\r\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass EndowmentMainContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      loading,\r\n      endowmentFields,\r\n      history,\r\n      clearData,\r\n    } = this.props;\r\n\r\n    clearData();\r\n\r\n    if (!endowmentFields) {\r\n      loading(() => history.push('/'));\r\n      this.props.getEndowmentFields();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { setFormState, history } = this.props;\r\n    setFormState(FORMSTATES.MAIN.index);\r\n\r\n    window.scrollTo(0, 0);\r\n\r\n    gaTag({\r\n      page_title: 'Endowment',\r\n      page_path: `/endowment${history.location.search}`,\r\n    });\r\n    ampTag('EndFormS');\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { endowmentFields, loadingEnd } = this.props;\r\n    if (!prevProps.endowmentFields && endowmentFields) {\r\n      loadingEnd();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { endowmentFields, endowmentPromoGiveAway } = this.props;\r\n\r\n    if (!endowmentFields) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <EndowmentMain\r\n        endowmentFields={endowmentFields}\r\n        endowmentPromoGiveAway={endowmentPromoGiveAway}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentMainContainer.defaultProps = {\r\n  endowmentFields: null,\r\n  endowmentPromoGiveAway: null,\r\n};\r\n\r\nEndowmentMainContainer.propTypes = {\r\n  endowmentFields: PropTypes.object,\r\n  getEndowmentFields: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n  endowmentPromoGiveAway: PropTypes.object,\r\n  clearData: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  endowmentFields: state.endowment.endowmentFields,\r\n  endowmentPromoGiveAway: state.insurance.promoGiveaways.endowment,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getEndowmentFields: () => {\r\n    dispatch(getEndowmentFields());\r\n  },\r\n  loading: (callBack, errorMsg, time) => {\r\n    dispatch(setLoading(callBack, errorMsg, time));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearEndowmentData());\r\n  },\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EndowmentMainContainer));\r\n","/**\r\n * EndowmentChoosePlan.js\r\n * Choose Plan View for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport MultiCompareView from '../Templates/MultiCompareView/MultiCompareView';\r\n\r\nimport EndowmentEditDetail from './EndowmentEditDetail';\r\n\r\nimport { ampTag } from '../../lib/tagFunctions';\r\n\r\nclass EndowmentChoosePlan extends Component {\r\n  getAmpTags(selectedPlanData) {\r\n    try {\r\n      return ({\r\n        partner: selectedPlanData.info.insurer_slug,\r\n      });\r\n    } catch (error) {\r\n      console.log(`Endowment choose plan Buy now Amp tag failed: ${error.message}`);\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  render() {\r\n    const { endowmentFields } = this.props;\r\n\r\n    return (\r\n      <MultiCompareView\r\n        {...this.props}\r\n        category=\"endowment\"\r\n        form=\"endowment\"\r\n        editForm={{\r\n          valuesToListen: [\r\n            { value: 'gender', desc: 'Gender' },\r\n            { value: 'smoker', desc: 'S.Status' },\r\n            { value: 'birth_date', desc: 'Age' },\r\n            { value: 'coverage_amount', desc: 'Sum', extra: 'cost_simplify' },\r\n            { value: 'premium_term', desc: 'For' },\r\n          ],\r\n          editDetail: <EndowmentEditDetail endowmentFields={endowmentFields} isPopUp />,\r\n        }}\r\n        buttonDesc=\"Select\"\r\n        forceFixedOnDesktop\r\n        trackingTags={{\r\n          default: (selectedPlanData) => {\r\n            ampTag('EndSelectA', this.getAmpTags(selectedPlanData, 'default'));\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentChoosePlan.defaultProps = {\r\n};\r\n\r\nEndowmentChoosePlan.propTypes = {\r\n  endowmentFields: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EndowmentChoosePlan;\r\n","/**\r\n * EndowmentChoosePlanContainer.js\r\n * Choose Plan Container for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { parseEndowmentForm, getEndowmentPlans, getValidInsurersList, clearEndowmentData, setSelectedPlanData } from '../../actions/endowmentActions';\r\n\r\nimport EndowmentChoosePlan from '../../components/Endowment/EndowmentChoosePlan';\r\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass EndowmentChoosePlanContainer extends Component {\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.CHOOSEPLAN.index);\r\n    gaTag({\r\n      page_title: 'Endowment - Choose Plan',\r\n      page_path: '/endowment/chooseplan',\r\n    });\r\n    ampTag('EndResultsS');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      endowmentForm,\r\n      getPlans,\r\n      getInsurersList,\r\n      clearData,\r\n      setFormState,\r\n      plansData,\r\n      validInsurersList,\r\n      endowmentFields,\r\n      history,\r\n    } = this.props;\r\n\r\n    return (\r\n      <EndowmentChoosePlan\r\n        mainForm={endowmentForm}\r\n        endowmentFields={endowmentFields}\r\n        parseForm={parseEndowmentForm}\r\n        getPlans={getPlans}\r\n        getInsurersList={getInsurersList}\r\n        clearData={clearData}\r\n        setSelectedPlanData={this.props.setSelectedPlanData}\r\n        setFormState={() => {\r\n          setFormState(FORMSTATES.DETAILFORM.index);\r\n          history.push(`/endowment${FORMSTATES.DETAILFORM.path}`);\r\n        }}\r\n        loadingFailBackState={() => {\r\n          history.goBack();\r\n        }}\r\n        plansData={plansData}\r\n        validInsurersList={validInsurersList}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentChoosePlanContainer.defaultProps = {\r\n  plansData: null,\r\n  validInsurersList: null,\r\n};\r\n\r\nEndowmentChoosePlanContainer.propTypes = {\r\n  endowmentForm: PropTypes.object.isRequired,\r\n  getPlans: PropTypes.func.isRequired,\r\n  getInsurersList: PropTypes.func.isRequired,\r\n  clearData: PropTypes.func.isRequired,\r\n  setSelectedPlanData: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  plansData: PropTypes.array,\r\n  validInsurersList: PropTypes.array,\r\n  endowmentFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  endowmentForm: getFormValues('endowment')(state),\r\n  endowmentFields: state.endowment.endowmentFields,\r\n  plansData: state.endowment.plansData,\r\n  validInsurersList: state.endowment.validInsurersList,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  getPlans: (parsedForm) => {\r\n    dispatch(getEndowmentPlans(parsedForm));\r\n  },\r\n  getInsurersList: (parsedForm) => {\r\n    dispatch(getValidInsurersList(parsedForm));\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearEndowmentData());\r\n  },\r\n  setSelectedPlanData: (data) => {\r\n    dispatch(setSelectedPlanData(data));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EndowmentChoosePlanContainer));\r\n","/**\r\n * EndowmentDetail.js\r\n * The Detail view for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues } from 'redux-form';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport DetailForm from '../Templates/DetailForm/DetailForm';\r\n\r\nimport TextInput from '../Forms/TextInput/TextInput';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport CheckoutComplete from '../Templates/CheckoutPopup/CheckoutComplete';\r\nimport PopupWithText from '../Templates/PopupWithText/PopupWithText';\r\n\r\nimport { getSynergyJSX } from '../../actions/insuranceActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\r\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\n// import './PetDetail.scss';\r\n\r\nconst formName = 'endowment-detail';\r\n\r\nclass EndowmentDetail extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      sessionId,\r\n    } = nextProps;\r\n\r\n    if (sessionId !== prevState.sessionId) {\r\n      return ({\r\n        sessionId,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sessionId: null,\r\n      errorStringData: {},\r\n      errorArray: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { sessionId } = this.state;\r\n    const { loadingEnd } = this.props;\r\n\r\n    if (sessionId) {\r\n      loadingEnd();\r\n      setTimeout(() => {\r\n        this.checkoutComplete.openCheckoutComplete();\r\n        ampTag('EndConfirmationS');\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateForm(e) {\r\n    const fieldsToCheck = [\r\n      'email',\r\n      'name',\r\n      'birth_date',\r\n      'mobile_number',\r\n    ];\r\n\r\n    const error = validateForm(e, fieldsToCheck);\r\n\r\n    this.setState({\r\n      errorStringData: error,\r\n    });\r\n\r\n    let errorArray = [];\r\n    if (!_.isEmpty(error)) {\r\n      errorArray = [<p className=\"error-string\" key=\"error-1\">Fields are not properly filled, please check again.</p>];\r\n    }\r\n\r\n    this.setState({\r\n      errorArray,\r\n    });\r\n\r\n    return error;\r\n  }\r\n\r\n  handleSubmit(e, isFirstValidate = true) {\r\n    // console.log(e);\r\n    const { checkOutOthers, loading, storeForm } = this.props;\r\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error, errorArray: null }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      ampTag('EndConfirm1A');\r\n      ampTag('EndNoticeS');\r\n      this.popup.openPopupWithJSX(getSynergyJSX(), true, () => {\r\n        setTimeout(() => {\r\n          loading();\r\n          checkOutOthers(e);\r\n\r\n          gaEvent('Endowment - DetailForm - Checkout', {\r\n            event_category: 'Endowment',\r\n            event_label: 'Endowment - DetailForm - Checkout',\r\n          });\r\n          ampTag('EndConfirm2A');\r\n        }, 350);\r\n      });\r\n    }\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  }\r\n\r\n  render() {\r\n    const { errorStringData, errorArray } = this.state;\r\n    const {\r\n      form,\r\n      change,\r\n      planDetails,\r\n      isLoggedIn,\r\n      piggyCallback,\r\n      changePlan,\r\n      storeForm,\r\n    } = this.props;\r\n\r\n    // console.log(petMinDate, petMaxDate);\r\n    return (\r\n      <Fragment>\r\n        <DetailForm\r\n          category=\"endowment\"\r\n          changePlan={changePlan}\r\n          handleSubmit={this.props.handleSubmit}\r\n          onSubmit={this.handleSubmit}\r\n          change={change}\r\n          form={form}\r\n          planDetails={planDetails}\r\n          isLoggedIn={isLoggedIn}\r\n          piggyCallback={piggyCallback}\r\n          errorArray={errorArray}\r\n          checkoutButtonDesc=\"Confirm\"\r\n        >\r\n          <Row className=\"main-form\" noGutters>\r\n            <Col xs={12}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"email\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={99}\r\n                desc=\"Email Address\"\r\n                errorString={errorStringData.email}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n            <Col className=\"right-padding\" xs={12} sm={6}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"name\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={98}\r\n                desc=\"Full Name\"\r\n                errorString={errorStringData.name}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n            <Col className=\"left-padding\" xs={12} sm={6}>\r\n              <DatePickerV2\r\n                form={form}\r\n                change={change}\r\n                name=\"birth_date\"\r\n                size=\"medium\"\r\n                zIndex={97}\r\n                desc=\"Date of Birth\"\r\n                errorString={errorStringData.birth_date}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n                endDate={new Date()}\r\n              />\r\n            </Col>\r\n            <Col className=\"right-padding\" xs={12} sm={6}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"mobile_number\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={96}\r\n                desc=\"Mobile Number\"\r\n                errorString={errorStringData.mobile_number}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </DetailForm>\r\n        <PopupWithText\r\n          ref={node => this.popup = node}\r\n          showCancelButton\r\n        />\r\n        <CheckoutComplete\r\n          isQuoteOnly\r\n          isSellLeads\r\n          wrappedComponentRef={node => this.checkoutComplete = node}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentDetail.defaultProps = {\r\n  storeForm: null,\r\n};\r\n\r\nEndowmentDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  checkOutOthers: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  planDetails: PropTypes.object.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  changePlan: PropTypes.func.isRequired,\r\n  storeForm: PropTypes.object,\r\n  loading: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  constants: state.insurance.constants,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loading: (callBack, errorMsg, time) => {\r\n    dispatch(setLoading(callBack, errorMsg, time));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n});\r\n\r\nexport default reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, mapDispatchToProps)(EndowmentDetail));\r\n","/**\r\n * EndowmentDetailContainer.js\r\n * Detail Container for Endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport Logos from 'assets/images/InsurerLogos';\r\n\r\nimport EndowmentDetail from '../../components/Endowment/EndowmentDetail';\r\nimport { getAnonymousSession, setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { getSessionParams } from '../../actions/endowmentActions';\r\nimport { gaTag, gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass EndowmentDetailContainer extends Component {\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.DETAILFORM.index);\r\n    gaTag({\r\n      page_title: 'Endowment - Detail Form',\r\n      page_path: '/endowment/detailform',\r\n    });\r\n    ampTag('EndDetailsS');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      plansData,\r\n      isLoggedIn,\r\n      profileValues,\r\n      piggyCallback,\r\n      endowmentFields,\r\n      sessionId,\r\n      checkOutOthers,\r\n      history,\r\n    } = this.props;\r\n\r\n    if (!plansData) {\r\n      return null;\r\n    }\r\n\r\n    const selectedData = plansData;\r\n\r\n    let planDetails = {\r\n      logo: Logos.others,\r\n      logoDesc: '',\r\n      planName: '',\r\n      planTotal: null,\r\n    };\r\n\r\n    try {\r\n      let netPrice = selectedData.policyInfo[selectedData.planType].net_price;\r\n      netPrice = netPrice ? `$${netPrice.toFixed(2)}` : '';\r\n\r\n      planDetails = {\r\n        logo: Logos[selectedData.info.insurer_slug],\r\n        logoDesc: `${selectedData.info.insurer_name}.svg`,\r\n        planName: selectedData.info.product_name,\r\n        planTotal: netPrice,\r\n      };\r\n    } catch (error) {\r\n      console.log('Get plan details failed');\r\n    }\r\n\r\n    return (\r\n      <EndowmentDetail\r\n        endowmentFields={endowmentFields}\r\n        selectedData={selectedData}\r\n        planDetails={planDetails}\r\n        isLoggedIn={isLoggedIn}\r\n        sessionId={sessionId}\r\n        piggyCallback={piggyCallback}\r\n        checkOutOthers={checkOutOthers}\r\n        changePlan={() => {\r\n          history.goBack();\r\n          gaEvent('Endowment - DetailForm - ChangePlan', {\r\n            event_category: 'Endowment',\r\n            event_label: 'Endowment - DetailForm - ChangePlan',\r\n          });\r\n        }}\r\n        profileValues={profileValues}\r\n        // submitCallback={() => { setFormState(FORMSTATES.CHECKOUT); }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentDetailContainer.defaultProps = {\r\n  sessionId: null,\r\n  plansData: null,\r\n};\r\n\r\nEndowmentDetailContainer.propTypes = {\r\n  plansData: PropTypes.object,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  profileValues: PropTypes.object.isRequired,\r\n  endowmentFields: PropTypes.object.isRequired,\r\n  sessionId: PropTypes.string,\r\n  checkOutOthers: PropTypes.func.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  endowmentForm: getFormValues('endowment')(state),\r\n  endowmentFields: state.endowment.endowmentFields,\r\n  profileValues: state.userDetails,\r\n  plansData: state.endowment.selectedPlanData,\r\n  sessionId: state.insurance.sessionId,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getAnonymousSession: (params) => {\r\n    dispatch(getAnonymousSession(params, true));\r\n  },\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n});\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => ({\r\n  ...ownProps,\r\n  ...propsFromState,\r\n  ...propsFromDispatch,\r\n  checkOutOthers: (detailForm) => {\r\n    propsFromDispatch.getAnonymousSession(getSessionParams(\r\n      propsFromState.endowmentForm,\r\n      detailForm,\r\n      propsFromState.plansData,\r\n    ), true);\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(EndowmentDetailContainer));\r\n","/**\r\n * EndowmentRouteContainer.js\r\n * The wrapper container for endowment\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { connect } from 'react-redux';\r\nimport { change, reset } from 'redux-form';\r\nimport { /* Prompt, */ withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { resetCompare } from '../../actions/compareActions';\r\nimport { getPromoGiveaways, resetInsuranceForm, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { clearEndowmentData } from '../../actions/endowmentActions';\r\nimport { isProduction } from '../../lib/tagFunctions';\r\n\r\nimport StepProgressBar from '../../components/Templates/StepProgressBar/StepProgressBar';\r\nimport RefreshTimer from '../../components/Templates/RefreshTimer/RefreshTimer';\r\n\r\nimport EndowmentMainContainer from './EndowmentMainContainer';\r\nimport EndowmentChoosePlanContainer from './EndowmentChoosePlanContainer';\r\nimport EndowmentDetailContainer from './EndowmentDetailContainer';\r\n\r\nimport { routeHandler } from '../../lib/helperFunctions';\r\n\r\nconst formName = 'endowment';\r\nconst detailFormName = 'endowment-detail';\r\n\r\nclass EndowmentRouteContainer extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { formIndex, isMounted } = prevState;\r\n    const { formState, match, history } = nextProps;\r\n\r\n    if (isMounted) {\r\n      const routeResult = routeHandler(formName, formState, formIndex, match, history);\r\n      if (routeResult && routeResult.formIndex !== null) {\r\n        return ({\r\n          formIndex: routeResult.formIndex,\r\n        });\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      formIndex: 0,\r\n    };\r\n\r\n    const {\r\n      resetStoreForm,\r\n      endowmentPromoGiveAway,\r\n      clearData,\r\n      history,\r\n    } = this.props;\r\n\r\n    history.replace(`/endowment${history.location.search}`);\r\n\r\n    clearData();\r\n    this.props.resetCompare();\r\n    this.props.resetInsuranceForm();\r\n\r\n    resetStoreForm('endowment');\r\n    resetStoreForm('endowment-detail');\r\n\r\n    if (endowmentPromoGiveAway === undefined) {\r\n      this.props.getPromoGiveaways();\r\n    }\r\n\r\n    this.setInitialFormState = this.setInitialFormState.bind(this);\r\n    this.renderStepProgress = this.renderStepProgress.bind(this);\r\n    this.renderLifeForms = this.renderLifeForms.bind(this);\r\n    this.changeUserDetails = this.changeUserDetails.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // window.addEventListener('beforeunload', this.handleLeavePage);\r\n    this.setInitialFormState();\r\n    this.setState({\r\n      // eslint-disable-next-line\r\n      isMounted: true,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { clearData, resetStoreForm } = this.props;\r\n    clearData();\r\n    this.props.resetCompare();\r\n    this.props.resetInsuranceForm();\r\n\r\n    resetStoreForm('endowment');\r\n    resetStoreForm('endowment-detail');\r\n  }\r\n\r\n  setInitialFormState() {\r\n    const { changeForm } = this.props;\r\n\r\n    changeForm(formName, 'birth_date', '01 Jan 1990');\r\n    changeForm(formName, 'premium_term', '16-20 years');\r\n\r\n    this.changeUserDetails();\r\n  }\r\n\r\n  changeUserDetails() {\r\n    const { userDetails, changeForm } = this.props;\r\n\r\n    if (userDetails) {\r\n      const surname = userDetails && userDetails.surname ? userDetails.surname : '';\r\n      const firstname = userDetails && userDetails.firstName ? ` ${userDetails.firstName}` : '';\r\n\r\n      changeForm(detailFormName, 'email', userDetails.email);\r\n      changeForm(detailFormName, 'name', `${surname}${firstname}`);\r\n      changeForm(detailFormName, 'birth_date', userDetails.dateOfBirth);\r\n      changeForm(detailFormName, 'mobile_number', userDetails.contact);\r\n    }\r\n  }\r\n\r\n  renderStepProgress() {\r\n    const { formIndex } = this.state;\r\n    return (\r\n      <StepProgressBar\r\n        maxWidth=\"556px\"\r\n        formState={formIndex}\r\n        inputList={[\r\n          'Choose Plan',\r\n          'Details',\r\n        ]}\r\n        form=\"endowment\"\r\n        stateList={[\r\n          FORMSTATES.CHOOSEPLAN,\r\n          FORMSTATES.DETAILFORM,\r\n        ]}\r\n        stateDescriptions={[\r\n          { main: '' /* 'Choose your Plan', sub: 'Compare price plans from multiple companies' */},\r\n          { main: 'Fill in your details - Get $5 Credits' },\r\n        ]}\r\n        charged={false}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderLifeForms() {\r\n    const { formIndex } = this.state;\r\n    const {\r\n      userDetails,\r\n    } = this.props;\r\n\r\n    const isLoggedIn = !_.isEmpty(userDetails);\r\n\r\n\r\n    switch (formIndex) {\r\n      case FORMSTATES.CHOOSEPLAN.index:\r\n        return <EndowmentChoosePlanContainer isLoggedIn={isLoggedIn} />;\r\n      case FORMSTATES.DETAILFORM.index:\r\n        return (\r\n          <EndowmentDetailContainer\r\n            isLoggedIn={isLoggedIn}\r\n            piggyCallback={this.changeUserDetails}\r\n          />\r\n        );\r\n      default:\r\n        return <EndowmentMainContainer isLoggedIn={isLoggedIn} />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { endowmentPromoGiveAway, constants } = this.props;\r\n\r\n    if (!constants || endowmentPromoGiveAway === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const meta = isProduction ? 'PolicyPal, insurance, insurance broker, endowment, endowment plan, savings plan singapore, best endowment plan singapore, 5 years saving plan singapore, endowment fund, endowment insurance, what is endowment plan, best insurance savings plan singapore, endowment policy, ntuc endowment, short term endowment plan singapore, short term endowment plan, best endowment plan, ntuc income endowment, endowment plan comparison, singapore endowment insurance, savings insurance, savings insurance singapore, compare insurance' : '';\r\n    return (\r\n      <Fragment>\r\n        <Helmet>\r\n          <meta name=\"keywords\" content={meta} />\r\n          <title>PolicyPal 2.0 - Endowment Insurance</title>\r\n          <meta name=\"title\" content=\"PolicyPal 2.0 - Endowment Insurance\" />\r\n          <meta name=\"description\" content=\"Browse products for endowment insurance.\" />\r\n        </Helmet>\r\n        {/* {\r\n          formState !== FORMSTATES.MAIN ?\r\n            <Prompt\r\n              when={true}\r\n              message=\"Are you sure you want to leave current page?\"\r\n            />\r\n          :\r\n            null\r\n        } */}\r\n        {this.renderStepProgress()}\r\n        {this.renderLifeForms()}\r\n        <RefreshTimer ref={(node) => {\r\n            if (!this.refresher) {\r\n              node.invokeNewTimer();\r\n            }\r\n            this.refresher = node;\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nEndowmentRouteContainer.defaultProps = {\r\n  userDetails: null,\r\n  endowmentPromoGiveAway: undefined,\r\n  constants: null,\r\n};\r\n\r\nEndowmentRouteContainer.propTypes = {\r\n  clearData: PropTypes.func.isRequired,\r\n  resetCompare: PropTypes.func.isRequired,\r\n  getPromoGiveaways: PropTypes.func.isRequired,\r\n  resetInsuranceForm: PropTypes.func.isRequired,\r\n  changeForm: PropTypes.func.isRequired,\r\n  resetStoreForm: PropTypes.func.isRequired,\r\n  userDetails: PropTypes.object,\r\n  endowmentPromoGiveAway: PropTypes.object,\r\n  constants: PropTypes.object,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  endowmentPromoGiveAway: state.insurance.promoGiveaways.endowment,\r\n  formState: state.insurance.formState,\r\n  constants: state.insurance.constants,\r\n  userDetails: state.userDetails.data,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeForm: (form, key, value) => (\r\n    dispatch(change(form, key, value))\r\n  ),\r\n  resetInsuranceForm: () => (\r\n    dispatch(resetInsuranceForm())\r\n  ),\r\n  resetStoreForm: form => (\r\n    dispatch(reset(form))\r\n  ),\r\n  getPromoGiveaways: () => {\r\n    dispatch(getPromoGiveaways('endowment'));\r\n  },\r\n  resetCompare: () => {\r\n    dispatch(resetCompare());\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearEndowmentData());\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EndowmentRouteContainer));\r\n","module.exports = __webpack_public_path__ + \"static/media/Avatar.95378d46.svg\";","/**\r\n * MultiCompareInner.js\r\n * Multi Compare view with different insurers\r\n * Contains the main policy type tab view logic\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Row } from 'reactstrap';\r\n\r\nimport TabView from '../../Templates/TabView/TabView';\r\nimport CompareView from '../../Templates/CompareView/CompareView';\r\nimport ChangeInitialFormData from '../../Templates/ChangeInitialFormData/ChangeInitialFormData';\r\n\r\nimport Enquiry from '../../Templates/Enquiry/Enquiry';\r\n\r\nimport { setPlanType, setSelectedIndex } from '../../../actions/compareActions';\r\n\r\n// The default tabs array\r\nconst resultToMatch = ['basic', 'essential', 'elite', 'default'];\r\n\r\nclass MultiCompareInner extends Component {\r\n  /**\r\n   * Lifecycle Method - getDerivedStateFromProps\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    // Goes here first before did mount\r\n    // Get new policy available policy types\r\n    if (nextProps.data.policyTypes !== prevState.policyTypes) {\r\n      return ({\r\n        policyTypes: nextProps.data.policyTypes,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { data } = this.props;\r\n    // tabIndex - The current tab index in effect\r\n    // currentTab - The name of the current tab\r\n    // tabs - The tabs array data\r\n    // policyTypes - The possible policy types to display\r\n    this.state = {\r\n      tabIndex: 0,\r\n      currentTab: null,\r\n      tabs: null,\r\n      policyTypes: data.policyTypes,\r\n    };\r\n\r\n    this.handleTabClick = this.handleTabClick.bind(this);\r\n    this.renderTabs = this.renderTabs.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    // Render inital tabs\r\n    const tabs = this.renderTabs(null, true);\r\n    // Set initial plan type\r\n    this.props.setPlanType(_.lowerCase(tabs.currentTab));\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   */\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { policyTypes, tabs, currentTab } = this.state;\r\n    const { data } = this.props;\r\n\r\n    // Render new tabs if policy types are changed\r\n    if (!_.isEqual(policyTypes, nextState.policyTypes)) {\r\n      this.renderTabs(nextState.policyTypes);\r\n    }\r\n\r\n    // Update only when tabs or data are updated\r\n    return tabs !== nextState.tabs ||\r\n          currentTab !== nextState.currentTab ||\r\n          data !== nextProps.data;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { tabs, tabIndex } = this.state;\r\n    const { selectedIndex, initialIndex } = this.props;\r\n\r\n    // If new tabs\r\n    if (tabs !== prevState.tabs) {\r\n      if (this.categoryTab && this.categoryTab.wrappedInstance) {\r\n        // If using back previous selected index and not the same state as local index\r\n        const isCameFromBackButton = selectedIndex && selectedIndex !== tabIndex;\r\n        // If this is the first time user enter compare view\r\n        const isFirstTime = selectedIndex === null && initialIndex;\r\n\r\n        if (isCameFromBackButton || isFirstTime) {\r\n          const currIncomingIndex = isCameFromBackButton ? selectedIndex : initialIndex;\r\n          // Check if previous selected index is still within range\r\n          const tabIndexToUse = currIncomingIndex < tabs.length ? currIncomingIndex : 0;\r\n          // Go to the tab and set new state;\r\n          this.categoryTab.wrappedInstance.goToIndex(tabIndexToUse, true);\r\n          this.setState({ tabIndex: tabIndexToUse });\r\n\r\n          // Set index to store\r\n          this.props.setSelectedIndex(tabIndexToUse);\r\n          return;\r\n        }\r\n\r\n        // This happens when tabs are not the same when changing form within\r\n        // compare view. It will try to go to the last selected plan type\r\n        this.categoryTab.wrappedInstance.goToIndex(tabIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When clicked on main tabs\r\n   *\r\n   * @param {string} type - Selected plan type\r\n   * @param {number} index - Tab index\r\n   */\r\n  handleTabClick(type, index) {\r\n    // Set current plan type\r\n    this.setState({\r\n      currentTab: type,\r\n    });\r\n\r\n    this.props.setPlanType(type);\r\n    this.props.setSelectedIndex(index);\r\n  }\r\n\r\n  /**\r\n   * Render Main tabs\r\n   *\r\n   * @param {array} policyTypes - The avaliable policy types\r\n   * @param {bool} isInitial - If is initial first time load\r\n   */\r\n  renderTabs(policyTypes = null, isInitial = false) {\r\n    const { policyTypes: oldPolicyTypes, currentTab } = this.state;\r\n    const { planImages } = this.props;\r\n\r\n    // Use new policy types if avaliable\r\n    const policyTypesToUse = policyTypes || oldPolicyTypes;\r\n\r\n    // The tab index\r\n    let index = 0;\r\n\r\n    // Match possible policy types to default types,\r\n    // with positioning in consideration\r\n    const tabs = _.reduce(resultToMatch, (result, type) => {\r\n      if (_.findIndex(policyTypesToUse, planType => planType === type) !== -1) {\r\n        const theIndex = index;\r\n        const image = planImages ? planImages[type] : null;\r\n        // Set desc, image, and onClick for the tab\r\n        result.push({\r\n          desc: _.startCase(type),\r\n          img: image,\r\n          onClick: () => {\r\n            this.handleTabClick(type, theIndex);\r\n          },\r\n        });\r\n        index += 1;\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // Default currenTab name is from first item\r\n    let tabInfo = { currentTab: _.lowerCase(tabs[0].desc) };\r\n\r\n    // If tabs is changed while navigating in compare view\r\n    if (!isInitial) {\r\n      // Try to find if the old tab name still exists in new one\r\n      const currentTabIndex = _.findIndex(tabs, tab => _.lowerCase(tab.desc) === currentTab);\r\n      // Use 0 if no longer exists\r\n      const tabIndexToUse = currentTabIndex !== -1 ? currentTabIndex : 0;\r\n      // New tab\r\n      const newTab = _.lowerCase(tabs[tabIndexToUse].desc);\r\n      // Set new tab info\r\n      tabInfo = {\r\n        tabIndex: tabIndexToUse,\r\n        currentTab: newTab,\r\n      };\r\n\r\n      // Set store data\r\n      this.props.setPlanType(newTab);\r\n      this.props.setSelectedIndex(tabIndexToUse);\r\n    }\r\n\r\n    // Return tabs\r\n    const result = {\r\n      ...tabInfo,\r\n      tabs,\r\n    };\r\n\r\n    this.setState(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  render() {\r\n    const {\r\n      currentTab,\r\n      tabs,\r\n    } = this.state;\r\n\r\n    const {\r\n      data,\r\n      scrollPopUpCallback,\r\n      submitCallback,\r\n      editForm,\r\n      form,\r\n      buttonDesc,\r\n      forceFixedOnDesktop,\r\n      category,\r\n    } = this.props;\r\n\r\n    // console.log(plansData);\r\n    if (!data || !tabs || !currentTab) {\r\n      return null;\r\n    }\r\n\r\n    const tabStyle = currentTab === 'default' ? 'inner-form-no-tabs' : '';\r\n\r\n    return (\r\n      <Fragment>\r\n        <Row className={`inner-form-container ${tabStyle} inner-form-extra-padding`} noGutters>\r\n          <TabView\r\n            tabs={tabs}\r\n            isDataFadeOnly\r\n            isDisableDropdown\r\n            big\r\n            name={`${form}-tab`}\r\n            ref={node => this.categoryTab = node}\r\n          >\r\n            {[<CompareView\r\n              category={category}\r\n              key=\"overview\"\r\n              className=\"overview-container-padding\"\r\n              notAccordion\r\n              data={data}\r\n              currentTab={currentTab}\r\n              scrollPopUpCallback={scrollPopUpCallback}\r\n              productChangable\r\n              editForm={\r\n                <ChangeInitialFormData\r\n                  submitCallback={submitCallback}\r\n                  form={form}\r\n                  headerValue={editForm.headerValue}\r\n                  valuesToListen={editForm.valuesToListen}\r\n                  conditions={editForm.conditions}\r\n                >\r\n                  {editForm.editDetail}\r\n                </ChangeInitialFormData>\r\n              }\r\n              buttonDesc={buttonDesc}\r\n              forceFixedOnDesktop={forceFixedOnDesktop}\r\n            />]}\r\n          </TabView>\r\n          <Enquiry />\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nMultiCompareInner.defaultProps = {\r\n  initialIndex: 0,\r\n  selectedIndex: null,\r\n  data: null,\r\n  planImages: null,\r\n  buttonDesc: null,\r\n  forceFixedOnDesktop: false,\r\n  category: null,\r\n};\r\n\r\nMultiCompareInner.propTypes = {\r\n  initialIndex: PropTypes.number,\r\n  selectedIndex: PropTypes.number,\r\n  setSelectedIndex: PropTypes.func.isRequired,\r\n  setPlanType: PropTypes.func.isRequired,\r\n  data: PropTypes.object,\r\n  planImages: PropTypes.object,\r\n  scrollPopUpCallback: PropTypes.func.isRequired,\r\n  submitCallback: PropTypes.func.isRequired,\r\n  editForm: PropTypes.object.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  buttonDesc: PropTypes.string,\r\n  forceFixedOnDesktop: PropTypes.bool,\r\n  category: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedIndex: state.compare.selectedIndex,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedIndex: (index) => {\r\n    dispatch(setSelectedIndex(index));\r\n  },\r\n  setPlanType: (type) => {\r\n    dispatch(setPlanType(type));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareInner);\r\n","/**\r\n * MultiCompareView.js\r\n * Multi Compare view with different insurers\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { parseData } from '../../../actions/insuranceActions';\r\nimport { setSelectedInsurers } from '../../../actions/compareActions';\r\nimport { setLoading, clearLoading } from '../../../actions/loadingScreenActions';\r\nimport { setRestrictionPopup } from '../../../actions/restrictionsActions';\r\nimport MultiCompareInner from './MultiCompareInner';\r\n\r\nclass MultiCompareView extends Component {\r\n  /**\r\n   * Lifecycle Method - getDerivedStateFromProps\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    try {\r\n      const {\r\n        currentInsurers,\r\n      } = prevState;\r\n\r\n      const {\r\n        plansData,\r\n        validInsurersList,\r\n        setFormState,\r\n        loadingEnd,\r\n        mainForm,\r\n        setSelectedPlanData,\r\n        trackingTags,\r\n      } = nextProps;\r\n\r\n      if (plansData && plansData[0] === 'INVALID') {\r\n        return null;\r\n      }\r\n\r\n      // If plansData and validInsurersList are retrieved, parse data for display\r\n      if (validInsurersList && plansData) {\r\n        let newDefaultInsurers = currentInsurers || {};\r\n        if (!currentInsurers && plansData) {\r\n          newDefaultInsurers = _.map(plansData, plan => plan.info.insurer_slug);\r\n          newDefaultInsurers = newDefaultInsurers.slice(0, 3);\r\n          nextProps.setSelectedInsurers(newDefaultInsurers);\r\n        }\r\n\r\n        return {\r\n          parsedData: parseData(\r\n            plansData,\r\n            validInsurersList,\r\n            newDefaultInsurers,\r\n            mainForm.trip_type,\r\n            () => {\r\n              setFormState();\r\n            },\r\n            setSelectedPlanData,\r\n            loadingEnd,\r\n            nextProps.setRestrictionPopup,\r\n            null,\r\n            trackingTags,\r\n          ),\r\n          currentInsurers: newDefaultInsurers,\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      mainForm,\r\n      parseForm,\r\n      getPlans,\r\n      getInsurersList,\r\n      loading,\r\n      defaultInsurers,\r\n      plansData,\r\n      validInsurersList,\r\n      selectedInsurers,\r\n      setSelectedPlanData,\r\n      loadingEnd,\r\n      setFormState,\r\n      loadingFailBackState,\r\n      clearData,\r\n      trackingTags,\r\n    } = this.props;\r\n\r\n    try {\r\n      // If fresh init\r\n      if (!plansData || !validInsurersList) {\r\n        // Initally, get the params from mainform and default insurers\r\n        const parsedParams = parseForm(mainForm, defaultInsurers);\r\n\r\n        // Set loading\r\n        loading(() => {\r\n          clearData();\r\n          loadingFailBackState();\r\n        }, 'No available plans found.', 30000, '');\r\n\r\n        // Get plans and valid insurers list\r\n        getPlans(parsedParams);\r\n        getInsurersList(parsedParams);\r\n\r\n        // Set initial default insurers\r\n        this.props.setSelectedInsurers(defaultInsurers);\r\n\r\n        // currentInsurers: Current selected list of insurers\r\n        // parsedData: The parsed data to display\r\n        // hoveredIndex: The current hovered index on the insurer selection dropdown, default is 0\r\n        this.state = {\r\n          currentInsurers: defaultInsurers,\r\n          parsedData: null,\r\n        };\r\n      } else {\r\n        // Set existing selected insurers and get old parsed data\r\n        // (Will reach this condition when using the back button)\r\n        this.state = {\r\n          currentInsurers: selectedInsurers,\r\n          parsedData: parseData(\r\n            plansData,\r\n            validInsurersList,\r\n            selectedInsurers,\r\n            mainForm.trip_type,\r\n            () => setFormState(),\r\n            setSelectedPlanData,\r\n            loadingEnd,\r\n            this.props.setRestrictionPopup,\r\n            null,\r\n            trackingTags,\r\n          ),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      // eslint-disable-next-line\r\n    }\r\n\r\n    this.getNewData = this.getNewData.bind(this);\r\n    this.onInsurerClick = this.onInsurerClick.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      plansData,\r\n      loadingEnd,\r\n      loading,\r\n      clearData,\r\n      loadingFailBackState,\r\n    } = this.props;\r\n\r\n    if (plansData && plansData[0] === 'INVALID') {\r\n      loadingEnd();\r\n      if (!this.isLoading) {\r\n        this.isLoading = true;\r\n        setTimeout(() =>\r\n          loading(() => {\r\n            clearData();\r\n            loadingFailBackState();\r\n            this.isLoading = false;\r\n          }, 'No available plans found.', 50, ''), 500);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   */\r\n  /* shouldComponentUpdate(nextProps, nextState) {\r\n    const { parsedData } = this.state;\r\n\r\n    // Render only is new or policyTypes changed\r\n    return !(parsedData && nextState.parsedData) ||\r\n          !_.isEqual(parsedData.policyTypes, nextState.parsedData.policyTypes);\r\n  } */\r\n\r\n  /**\r\n   * Handle selection on insurer list\r\n   *\r\n   * @param {object} data - The insurer list item data\r\n   */\r\n  onInsurerClick(data, hoveredIndex) {\r\n    // parsedData: The parsed data to display\r\n    const { parsedData } = this.state;\r\n\r\n    // Remap current insurers as sometimes when change form data, the insurers\r\n    // can be less than 3.\r\n    // console.log(parsedData.selectedInsurers, hoveredIndex);\r\n    const currentInsurers = _.reduce(parsedData.selectedInsurers, (result, insurer) => {\r\n      if (insurer) {\r\n        result.push(insurer.insurerSlug);\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // Change insurer of current selected position\r\n    currentInsurers[hoveredIndex] = data.insurer_slug;\r\n\r\n    // Set current insurers\r\n    this.setState({\r\n      currentInsurers,\r\n    });\r\n\r\n    // Set current insurers in store\r\n    this.props.setSelectedInsurers(currentInsurers);\r\n\r\n    // Get new compare data based on the new selected insurers\r\n    this.getNewData(currentInsurers);\r\n  }\r\n\r\n  /**\r\n   * Get new compare data.\r\n   * Used when changing insurers or changing form fields.\r\n   *\r\n   * @param {array} incomingInsurers - selected insurers\r\n   */\r\n  getNewData(incomingInsurers = null) {\r\n    const { currentInsurers } = this.state;\r\n    const {\r\n      loading,\r\n      getPlans,\r\n      getInsurersList,\r\n      clearData,\r\n      mainForm,\r\n      parseForm,\r\n      loadingFailBackState,\r\n    } = this.props;\r\n\r\n    // If init, use default, else the current array\r\n    const insurerToUse = incomingInsurers || currentInsurers;\r\n    // Parse the form for params\r\n    const parsedParams = parseForm(mainForm, insurerToUse);\r\n    // Clear data in store first, so it will detect as fresh props from store\r\n    clearData();\r\n    // Set loading screen\r\n    loading(() => {\r\n      clearData();\r\n      loadingFailBackState();\r\n    }, 'No available plans found.', 30000, '');\r\n    // Get plans and insurer lists\r\n    getPlans(parsedParams);\r\n    getInsurersList(parsedParams);\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  render() {\r\n    try {\r\n      const { parsedData } = this.state;\r\n      const {\r\n        editForm,\r\n        form,\r\n        planImages,\r\n        initialIndex,\r\n        buttonDesc,\r\n        forceFixedOnDesktop,\r\n        category,\r\n      } = this.props;\r\n\r\n      // Do not render if no data\r\n      if (!parsedData) {\r\n        return null;\r\n      }\r\n\r\n      // console.log(parsedData);\r\n      return (\r\n        <MultiCompareInner\r\n          category={category}\r\n          initialIndex={initialIndex}\r\n          planImages={planImages}\r\n          data={parsedData}\r\n          form={form}\r\n          editForm={editForm}\r\n          scrollPopUpCallback={this.onInsurerClick}\r\n          submitCallback={this.getNewData}\r\n          buttonDesc={buttonDesc}\r\n          forceFixedOnDesktop={forceFixedOnDesktop}\r\n        />\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nMultiCompareView.defaultProps = {\r\n  initialIndex: 0,\r\n  plansData: null,\r\n  validInsurersList: null,\r\n  selectedInsurers: null,\r\n  trackingTags: null,\r\n  planImages: null,\r\n  defaultInsurers: null,\r\n  buttonDesc: null,\r\n  forceFixedOnDesktop: false,\r\n  category: null,\r\n};\r\n\r\nMultiCompareView.propTypes = {\r\n  setSelectedInsurers: PropTypes.func.isRequired,\r\n  mainForm: PropTypes.object.isRequired,\r\n  parseForm: PropTypes.func.isRequired,\r\n  getPlans: PropTypes.func.isRequired,\r\n  getInsurersList: PropTypes.func.isRequired,\r\n  clearData: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  defaultInsurers: PropTypes.array,\r\n  editForm: PropTypes.object.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  planImages: PropTypes.object,\r\n  initialIndex: PropTypes.number,\r\n  plansData: PropTypes.array,\r\n  validInsurersList: PropTypes.array,\r\n  selectedInsurers: PropTypes.array,\r\n  setSelectedPlanData: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  setRestrictionPopup: PropTypes.func.isRequired,\r\n  loadingFailBackState: PropTypes.func.isRequired,\r\n  trackingTags: PropTypes.object,\r\n  buttonDesc: PropTypes.string,\r\n  forceFixedOnDesktop: PropTypes.bool,\r\n  category: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedInsurers: state.compare.selectedInsurers,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loading: (callBack, errorMsg, time, mainMsg) => {\r\n    dispatch(setLoading(callBack, errorMsg, time, mainMsg));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n  setRestrictionPopup: (data) => {\r\n    dispatch(setRestrictionPopup(data));\r\n  },\r\n  setSelectedInsurers: (array) => {\r\n    dispatch(setSelectedInsurers(array));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareView);\r\n","module.exports = __webpack_public_path__ + \"static/media/Dollar.962423c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Umbrella.d081f752.svg\";"],"sourceRoot":""}