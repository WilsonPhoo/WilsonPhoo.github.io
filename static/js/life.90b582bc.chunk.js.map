{"version":3,"sources":["assets/images/Life/policypal-life-insurance-1.svg","assets/images/Life/policypal-life-insurance-2.svg","assets/images/Life/policypal-life-insurance-3.svg","components/Life/LifeEditDetail.js","components/Life/LifeMain.js","containers/Life/LifeMainContainer.js","components/Life/LifeChoosePlan.js","containers/Life/LifeChoosePlanContainer.js","components/Life/LifeDetail.js","containers/Life/LifeDetailContainer.js","containers/Life/LifeRouteContainer.js","assets/images/MainFormIcons/Avatar.svg","components/Templates/MultiCompareView/MultiCompareInner.js","components/Templates/MultiCompareView/MultiCompareView.js","assets/images/MainFormIcons/Dollar.svg","assets/images/MainFormIcons/Umbrella.svg","components/Templates/RedirectPopup/RedirectPopupForm.js","components/Templates/RedirectPopup/RedirectPopup.js"],"names":["module","exports","__webpack_require__","p","LifeEditDetail","props","_this","Object","classCallCheck","this","_this$props","possibleConstructorReturn","getPrototypeOf","call","lifeFields","storeForm","state","errorStringData","tabs","desc","onClick","setState","isTermLife","coverage_type","birthDate","data","remapFormFields","form_fields","handleSubmit","bind","assertThisInitialized","handleCloseEdit","handleRevert","validateForm","nextProps","prevState","birth_date","_this$props2","setCloseCallBack","originalValues","categoryTab","wrappedInstance","goToIndex","date","age","getAge","e","_this$state","fieldsToCheck","concat","toConsumableArray","errorResult","smoker","type","options","start","slashedStringDateToDate","min_date","end","max_date","sum_insured","coverage_amount_term","critical_illness","ci_coverage","premium_term","duration_term","sum_insured_selection","coverage_amount_whole","premium_whole","duration_whole","_this2","isFirstValidate","arguments","length","undefined","_this$state2","_this$props3","closePopUp","setSubmit","submitCallback","setInsurFormState","change","history","isEmptyResult","_","isEmpty","dateReValidate","error","setTimeout","gaEvent","event_category","event_label","storeStringToDate","critical","ampTag","objectSpread","gender","insured","term","FORMSTATES","CHOOSEPLAN","index","push","path","_this3","_this$props4","resetForm","keys","forEach","key","_this4","_this$state3","_this$props5","form","ageStyle","react_default","a","createElement","reactstrap_es","className","xs","sm","DatePickerV2","name","size","zIndex","display_name","errorString","startDate","endDate","currDate","default_date","_this5","_this$state4","_this$props6","dataToUse","placeholderString","errorToUse","DropDownV2","dropList","_this6","_this$state5","_this$props7","noGutters","src","Avatar","alt","Selection","noEmptyTextSelection","map","option","description","sizeInSM","renderBirthDate","style","marginTop","Dollar","Slider","hideWidth","inputList","displayList","simplifyCostArray","simplifyCost","Umbrella","renderDuration","_this7","_this$props8","isPopUp","onSubmit","TabView","isDataFadeOnly","isDisableDropdown","big","ref","node","renderFields","Button","variant","width","height","RestrictionsPopup","resPopup","Component","defaultProps","withRouter","reduxForm","destroyOnUnmount","connect","getFormValues","isRevert","editForm","dispatch","reset","setInsuranceFormState","invokeSubmit","setRestrictionPopup","LifeMain","lifePromoGiveAway","FormLanding","img1","Life1","img2","Life2","img3","Life3","imgAlt","promo","react","Life_LifeEditDetail","LifeMainContainer","loading","clearData","getLifeFields","setFormState","MAIN","window","scrollTo","gaTag","page_title","page_path","location","search","prevProps","loadingEnd","termLife","termLifePromoGiveAway","main","sub","wholeLife","wholeLifePromoGiveAway","Life_LifeMain","life","insurance","promoGiveaways","callBack","errorMsg","time","setLoading","clearLoading","clearLifeData","LifeChoosePlan","selectedPlanData","planType","discount","info","display","partner","insurer_slug","price","policyInfo","net_price","console","log","message","MultiCompareView","assign","category","valuesToListen","value","extra","conditions","values","term_life","whole_life","editDetail","buttonDesc","forceFixedOnDesktop","trackingTags","default","getAmpTags","LifeChoosePlanContainer","lifeForm","getPlans","getInsurersList","plansData","validInsurersList","Life_LifeChoosePlan","mainForm","parseForm","parseLifeForm","setSelectedPlanData","DETAILFORM","loadingFailBackState","goBack","parsedForm","getLifePlans","getValidInsurersList","LifeDetail","sessionId","errorArray","checkoutComplete","openCheckoutComplete","checkOutOthers","noSynergy","checkout","popup","openPopupWithJSX","getSynergyJSX","document","body","scrollHeight","planDetails","isLoggedIn","piggyCallback","changePlan","DetailForm","checkoutButtonDesc","TextInput","email","Date","mobile_number","PopupWithText","showCancelButton","CheckoutComplete","isQuoteOnly","isSellLeads","wrappedComponentRef","constants","LifeDetailContainer","lifeRedirect","deep_link","integration_type","RedirectPop","openRedirectPopup","lifeDetailForm","postToRedirect","result","redirectButton","firstChild","removeChild","range","createRange","appendChild","createContextualFragment","form_html","$","form_id","get","submit","profileValues","selectedData","logo","Logos","others","logoDesc","planName","planTotal","insurer_name","product_name","toFixed","Life_LifeDetail","RedirectPopup","noEmail","onConfirm","userDetails","getAnonymousSession","params","propsFromState","propsFromDispatch","ownProps","detailForm","getSessionParams","LifeRouteContainer","formIndex","isInitialLoad","resetStoreForm","replace","resetCompare","resetInsuranceForm","getPromoGiveaways","setInitialFormState","renderStepProgress","renderLifeForms","changeUserDetails","isMounted","formState","match","routeResult","routeHandler","isEqual","changeForm","surname","firstname","firstName","dateOfBirth","contact","StepProgressBar","maxWidth","stateList","stateDescriptions","charged","Life_LifeChoosePlanContainer","Life_LifeDetailContainer","Life_LifeMainContainer","meta","isProduction","Helmet","content","RefreshTimer","refresher","invokeNewTimer","resultToMatch","MultiCompareInner","tabIndex","currentTab","policyTypes","handleTabClick","renderTabs","setPlanType","lowerCase","nextState","selectedIndex","initialIndex","isCameFromBackButton","currIncomingIndex","tabIndexToUse","setSelectedIndex","isInitial","oldPolicyTypes","planImages","policyTypesToUse","reduce","findIndex","theIndex","image","startCase","img","tabInfo","currentTabIndex","tab","newTab","scrollPopUpCallback","tabStyle","CompareView","notAccordion","productChangable","ChangeInitialFormData","headerValue","Enquiry","compare","defaultInsurers","selectedInsurers","currentInsurers","parsedData","parseData","trip_type","parsedParams","setSelectedInsurers","getNewData","onInsurerClick","newDefaultInsurers","plan","slice","isLoading","hoveredIndex","insurer","insurerSlug","incomingInsurers","MultiCompareView_MultiCompareInner","mainMsg","array","RedirectPopupForm","disclaimer","popupRef","openPopup","Popup","r","RedirectPopup_RedirectPopupForm","closPopup","closePopup"],"mappings":"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","file":"static/js/life.90b582bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/policypal-life-insurance-1.5dfeedba.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-life-insurance-2.a3cd9e0e.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-life-insurance-3.9e051448.svg\";","/**\r\n * LifeEditDetail.js\r\n * Edit Detail view for Life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues, reset } from 'redux-form';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport Avatar from 'assets/images/MainFormIcons/Avatar.svg';\r\nimport Dollar from 'assets/images/MainFormIcons/Dollar.svg';\r\nimport Umbrella from 'assets/images/MainFormIcons/Umbrella.svg';\r\n\r\nimport Button from 'components/FormsV3/Button/Button';\r\nimport Selection from '../Forms/Selection/Selection';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport Slider from '../Forms/Slider/Slider';\r\nimport DropDownV2 from '../Forms/DropDown/DropDownV2';\r\n\r\nimport RestrictionsPopup from '../Templates/RestrictionsPopup/RestrictionsPopup';\r\nimport TabView from '../Templates/TabView/TabView';\r\n\r\nimport { invokeSubmit } from '../../actions/editFormActions';\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { setRestrictionPopup } from '../../actions/restrictionsActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { slashedStringDateToDate, storeStringToDate, getAge } from '../../lib/dateFunctions';\r\nimport { simplifyCost, simplifyCostArray, remapFormFields } from '../../lib/helperFunctions';\r\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nimport './Life.scss';\r\n\r\nconst formName = 'life';\r\n\r\nclass LifeEditDetail extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { storeForm } = nextProps;\r\n    if (storeForm && storeForm.birth_date !== prevState.birthDate) {\r\n      return { birthDate: storeForm.birth_date };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { lifeFields, storeForm } = this.props;\r\n\r\n    this.state = {\r\n      errorStringData: {},\r\n      tabs: [{\r\n        desc: 'Term Life',\r\n        onClick: () => this.setState({ isTermLife: true }),\r\n      },\r\n      {\r\n        desc: 'Whole Life',\r\n        onClick: () => this.setState({ isTermLife: false }),\r\n      }],\r\n      isTermLife: !(storeForm && storeForm.coverage_type === 'whole_life'),\r\n      birthDate: null,\r\n      data: remapFormFields(lifeFields.form_fields),\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\r\n    this.handleRevert = this.handleRevert.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { isTermLife } = this.state;\r\n    const { storeForm, setCloseCallBack } = this.props;\r\n    this.originalValues = storeForm;\r\n\r\n    if (setCloseCallBack) {\r\n      setCloseCallBack(this.handleRevert);\r\n    }\r\n\r\n    if (!isTermLife) {\r\n      this.categoryTab.wrappedInstance.goToIndex(1, true);\r\n    }\r\n  }\r\n\r\n  getAge(date) {\r\n    let age = '';\r\n    if (date && date !== -1) {\r\n      age = getAge(date);\r\n    }\r\n\r\n    return age;\r\n  }\r\n\r\n  validateForm(e) {\r\n    const { data, isTermLife } = this.state;\r\n\r\n    const fieldsToCheckCommon = [\r\n      'gender',\r\n      'smoker',\r\n      'birth_date',\r\n    ];\r\n\r\n    const fieldsTermLife = [\r\n      'sum_insured',\r\n      'critical_illness',\r\n      'premium_term',\r\n    ];\r\n\r\n    const fieldsWholeLife = [\r\n      'sum_insured_selection',\r\n      'premium_whole',\r\n    ];\r\n\r\n    const fieldsToCheck = [...fieldsToCheckCommon, ...(isTermLife ? fieldsTermLife : fieldsWholeLife)];\r\n    const errorResult = validateForm(e, fieldsToCheck, {\r\n      smoker: { type: 'ARRAY', data: data.smoker.options },\r\n      birth_date: { type: 'DATE', start: slashedStringDateToDate(data.birth_date.min_date), end: slashedStringDateToDate(data.birth_date.max_date) },\r\n      sum_insured: { type: 'ARRAY', data: data.coverage_amount_term.options },\r\n      critical_illness: { type: 'ARRAY', data: data.ci_coverage.options },\r\n      premium_term: { type: 'ARRAY', data: data.duration_term.options },\r\n      sum_insured_selection: { type: 'ARRAY', data: data.coverage_amount_whole.options },\r\n      premium_whole: { type: 'ARRAY', data: data.duration_whole.options },\r\n    });\r\n\r\n    this.setState({\r\n      errorStringData: errorResult,\r\n    });\r\n\r\n    return errorResult;\r\n  }\r\n\r\n  handleSubmit(e, isFirstValidate = true) {\r\n    // e.preventDefault();\r\n    // console.log(e);\r\n\r\n    const { isTermLife, birthDate } = this.state;\r\n    const {\r\n      closePopUp,\r\n      setSubmit,\r\n      storeForm,\r\n      submitCallback,\r\n      setInsurFormState,\r\n      change,\r\n      history,\r\n    } = this.props;\r\n\r\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      change('coverage_type', isTermLife ? 'term_life' : 'whole_life');\r\n\r\n      // Timeout to let the coverage_type change in store\r\n      setTimeout(() => {\r\n        setSubmit();\r\n        this.originalValues = storeForm;\r\n\r\n        if (submitCallback) {\r\n          submitCallback();\r\n        } else {\r\n          gaEvent('Life - Get Quote', {\r\n            event_category: 'Life',\r\n            event_label: 'Button - Life - Get Quote',\r\n          });\r\n\r\n          const date = storeStringToDate(birthDate);\r\n          const age = this.getAge(date);\r\n          const critical = isTermLife ? { critical: e.critical_illness } : {};\r\n\r\n          ampTag('LifeGetQuoteA', {\r\n            gender: e.gender,\r\n            smoker: e.smoker,\r\n            age,\r\n            insured: isTermLife ? e.sum_insured : e.sum_insured_selection,\r\n            term: isTermLife ? e.premium_term : e.premium_whole,\r\n            ...critical,\r\n            type: isTermLife ? 'term' : 'whole',\r\n          });\r\n        }\r\n\r\n        setInsurFormState(FORMSTATES.CHOOSEPLAN.index);\r\n        history.push(`/life${FORMSTATES.CHOOSEPLAN.path}`);\r\n\r\n        if (closePopUp) {\r\n          closePopUp();\r\n        }\r\n      }, 5);\r\n    }\r\n  }\r\n\r\n  handleRevert() {\r\n    const { change, resetForm } = this.props;\r\n    resetForm();\r\n    Object.keys(this.originalValues).forEach((key) => {\r\n      change(key, this.originalValues[key]);\r\n    });\r\n  }\r\n\r\n  handleCloseEdit() {\r\n    const { closePopUp } = this.props;\r\n    closePopUp(this.handleRevert);\r\n  }\r\n\r\n  renderBirthDate() {\r\n    const { errorStringData, birthDate, data } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n\r\n    const date = storeStringToDate(birthDate);\r\n    const ageStyle = date ? 'active' : 'inactive';\r\n    const age = this.getAge(date);\r\n\r\n    return (\r\n      <Col className=\"birth-date-container\" xs={12} sm={10}>\r\n        <p className=\"age\">\r\n          <span className={ageStyle}>Age</span>\r\n          <span className=\"age-value\">{age}</span>\r\n        </p>\r\n        <DatePickerV2\r\n          form={form}\r\n          change={change}\r\n          name=\"birth_date\"\r\n          size=\"medium\"\r\n          zIndex={97}\r\n          desc={data.birth_date.display_name}\r\n          errorString={errorStringData.birth_date}\r\n          validateForm={() => this.validateForm(storeForm)}\r\n          startDate={slashedStringDateToDate(data.birth_date.min_date)}\r\n          endDate={slashedStringDateToDate(data.birth_date.max_date)}\r\n          currDate={slashedStringDateToDate(data.birth_date.default_date)}\r\n        />\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  renderDuration() {\r\n    const { isTermLife, data, errorStringData } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n    const dataToUse = isTermLife ? data.duration_term : data.duration_whole;\r\n    const name = isTermLife ? 'premium_term' : 'premium_whole';\r\n    const placeholderString = isTermLife ? 'Premium Term' : 'Payment Term';\r\n    const errorToUse = isTermLife ? errorStringData.premium_term : errorStringData.premium_whole;\r\n\r\n    return (\r\n      <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n        <DropDownV2\r\n          form={form}\r\n          change={change}\r\n          name={name}\r\n          placeholderString={placeholderString}\r\n          dropList={dataToUse.options}\r\n          size=\"medium\"\r\n          zIndex={95}\r\n          desc={dataToUse.display_name}\r\n          errorString={errorToUse}\r\n          validateForm={() => this.validateForm(storeForm)}\r\n        />\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  renderFields() {\r\n    const { isTermLife, errorStringData, data } = this.state;\r\n    const { form, change, storeForm } = this.props;\r\n\r\n    return (\r\n      <Row key=\"life-fields\" noGutters>\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img src={Avatar} alt=\"Avatar.svg\" />\r\n        </Col>\r\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\r\n          <Selection\r\n            form={form}\r\n            change={change}\r\n            name=\"gender\"\r\n            type=\"text-selection\"\r\n            noEmptyTextSelection\r\n            options={_.map(data.gender.options, option => ({\r\n              key: option,\r\n              description: option,\r\n            }))}\r\n            sizeInSM={6}\r\n            desc={data.gender.display_name}\r\n            zIndex={99}\r\n            errorString={errorStringData[data.gender.name]}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\r\n          <Selection\r\n            form={form}\r\n            change={change}\r\n            name=\"smoker\"\r\n            type=\"text-selection\"\r\n            noEmptyTextSelection\r\n            options={_.map(data.smoker.options, option => ({\r\n              key: option,\r\n              description: option,\r\n            }))}\r\n            sizeInSM={6}\r\n            zIndex={98}\r\n            desc={data.smoker.display_name}\r\n            errorString={errorStringData[data.smoker.name]}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\r\n        {this.renderBirthDate()}\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img style={{ marginTop: 32 }} src={Dollar} alt=\"Dollar.svg\" />\r\n        </Col>\r\n        {\r\n          isTermLife ?\r\n            <Col xs={12} sm={10}>\r\n              <Slider\r\n                form={form}\r\n                change={change}\r\n                name=\"sum_insured\"\r\n                desc={data.coverage_amount_term.display_name}\r\n                zIndex={96}\r\n                hideWidth={576}\r\n                inputList={data.coverage_amount_term.options}\r\n                displayList={simplifyCostArray(data.coverage_amount_term.options)}\r\n                errorString={errorStringData.sum_insured}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n          :\r\n            <Col className=\"whole-sum-insured\" xs={12} sm={10}>\r\n              <Selection\r\n                form={form}\r\n                change={change}\r\n                name=\"sum_insured_selection\"\r\n                type=\"text-selection\"\r\n                noEmptyTextSelection\r\n                options={_.map(data.coverage_amount_whole.options, option => ({\r\n                  key: option,\r\n                  description: simplifyCost(option),\r\n                }))}\r\n                sizeInSM={6}\r\n                zIndex={96}\r\n                desc={data.coverage_amount_whole.display_name}\r\n                errorString={errorStringData.sum_insured_selection}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n        }\r\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\r\n          <img src={Umbrella} alt=\"Umbrella.svg\" />\r\n        </Col>\r\n        {this.renderDuration()}\r\n        {\r\n          isTermLife ?\r\n            <Col className=\"input-padding-left\" xs={12} sm={5}>\r\n              <Selection\r\n                form={form}\r\n                change={change}\r\n                name=\"critical_illness\"\r\n                type=\"text-selection\"\r\n                noEmptyTextSelection\r\n                options={_.map(data.ci_coverage.options, option => ({\r\n                  key: option,\r\n                  description: option,\r\n                }))}\r\n                sizeInSM={6}\r\n                zIndex={94}\r\n                desc={data.ci_coverage.display_name}\r\n                errorString={errorStringData.critical_illness}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n          :\r\n           null\r\n        }\r\n      </Row>\r\n    );\r\n  }\r\n\r\n\r\n  render() {\r\n    const { tabs } = this.state;\r\n    const {\r\n      handleSubmit,\r\n      isPopUp,\r\n      form,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"landing-form-container\">\r\n        {\r\n          isPopUp ?\r\n            <p className=\"edit-header\">Edit Life Insurance Details</p>\r\n          :\r\n            null\r\n        }\r\n        <form onSubmit={handleSubmit(this.handleSubmit)}>\r\n          <Row className=\"input-offset life-edit-detail tab-view-container\" noGutters>\r\n            <TabView\r\n              tabs={tabs}\r\n              isDataFadeOnly\r\n              isDisableDropdown\r\n              big\r\n              name={`${form}-tab`}\r\n              ref={node => this.categoryTab = node}\r\n            >\r\n              {[this.renderFields()]}\r\n            </TabView>\r\n          </Row>\r\n          <Row className=\"align-items-center button-container\" noGutters>\r\n            {\r\n              isPopUp ?\r\n                <Col className=\"justify-content-center button\" xs={12}>\r\n                  <Row noGutters>\r\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\r\n                      <Button\r\n                        className=\"button-left\"\r\n                        variant=\"medium-flat\"\r\n                        width={165}\r\n                        height={72}\r\n                        onClick={() => this.handleCloseEdit()}\r\n                      >\r\n                        <p>Cancel</p>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"medium-flat-green\"\r\n                        width={165}\r\n                        height={72}\r\n                      >\r\n                        <p>Save</p>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              :\r\n                <Col className=\"justify-content-center button\" xs={12}>\r\n                  <Button type=\"submit\" variant=\"medium-flat-green\" width={165} height={72}>\r\n                    <p>Get Quote</p>\r\n                  </Button>\r\n                </Col>\r\n            }\r\n          </Row>\r\n        </form>\r\n        <RestrictionsPopup ref={node => this.resPopup = node} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLifeEditDetail.defaultProps = {\r\n  isPopUp: false,\r\n  setCloseCallBack: null,\r\n  storeForm: null,\r\n  closePopUp: null,\r\n  submitCallback: null,\r\n};\r\n\r\nLifeEditDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  isPopUp: PropTypes.bool,\r\n  resetForm: PropTypes.func.isRequired,\r\n  closePopUp: PropTypes.func,\r\n  setInsurFormState: PropTypes.func.isRequired,\r\n  setSubmit: PropTypes.func.isRequired,\r\n  storeForm: PropTypes.object,\r\n  setCloseCallBack: PropTypes.func,\r\n  submitCallback: PropTypes.func,\r\n  lifeFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  isRevert: state.editForm.isRevert,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetForm: () => {\r\n    dispatch(reset(formName));\r\n  },\r\n  setInsurFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  setSubmit: () => {\r\n    dispatch(invokeSubmit());\r\n  },\r\n  setRestrictionPopup: (data) => {\r\n    dispatch(setRestrictionPopup(data));\r\n  },\r\n});\r\n\r\nexport default withRouter(reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, mapDispatchToProps)(LifeEditDetail)));\r\n","/**\r\n * LifeMain.js\r\n * Main Landing for Life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Life1 from 'assets/images/Life/policypal-life-insurance-1.svg';\r\nimport Life2 from 'assets/images/Life/policypal-life-insurance-2.svg';\r\nimport Life3 from 'assets/images/Life/policypal-life-insurance-3.svg';\r\n\r\nimport LifeEditDetail from './LifeEditDetail';\r\nimport FormLanding from '../Templates/FormLanding/FormLanding';\r\n\r\nclass LifeMain extends Component {\r\n  render() {\r\n    const { lifeFields, lifePromoGiveAway } = this.props;\r\n    return (\r\n      <div className=\"life-container\">\r\n        <FormLanding\r\n          img1={Life1}\r\n          img2={Life2}\r\n          img3={Life3}\r\n          imgAlt=\"PolicyPal Life Insurance\"\r\n          promo={lifePromoGiveAway}\r\n          desc={\r\n            <Fragment>\r\n              <p>Get your Life Quotation</p>\r\n              <p>in minutes!</p>\r\n            </Fragment>\r\n          }\r\n        >\r\n          <LifeEditDetail\r\n            lifeFields={lifeFields}\r\n          />\r\n        </FormLanding>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLifeMain.defaultProps = {\r\n  lifePromoGiveAway: null,\r\n};\r\n\r\nLifeMain.propTypes = {\r\n  lifeFields: PropTypes.object.isRequired,\r\n  lifePromoGiveAway: PropTypes.object,\r\n};\r\n\r\nexport default LifeMain;\r\n","/**\r\n * LifeMainContainer.js\r\n * Main Container for Life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport LifeMain from '../../components/Life/LifeMain';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { getLifeFields, clearLifeData } from '../../actions/lifeActions';\r\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\r\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass LifeMainContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      loading,\r\n      lifeFields,\r\n      history,\r\n      clearData,\r\n    } = this.props;\r\n\r\n    clearData();\r\n\r\n    if (!lifeFields) {\r\n      loading(() => history.push('/'));\r\n      this.props.getLifeFields();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { setFormState, history } = this.props;\r\n    setFormState(FORMSTATES.MAIN.index);\r\n\r\n    window.scrollTo(0, 0);\r\n\r\n    gaTag({\r\n      page_title: 'Life',\r\n      page_path: `/life${history.location.search}`,\r\n    });\r\n    ampTag('LifeFormS');\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { lifeFields, loadingEnd } = this.props;\r\n    if (!prevProps.lifeFields && lifeFields) {\r\n      loadingEnd();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { lifeFields, termLifePromoGiveAway, wholeLifePromoGiveAway } = this.props;\r\n\r\n    const termLife = termLifePromoGiveAway || { main: [], sub: [] };\r\n    const wholeLife = wholeLifePromoGiveAway || { main: [], sub: [] };\r\n    if (!lifeFields) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <LifeMain\r\n        lifeFields={lifeFields}\r\n        lifePromoGiveAway={{\r\n          main: [...termLife.main, ...wholeLife.main],\r\n          sub: [...wholeLife.sub, ...wholeLife.sub],\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nLifeMainContainer.defaultProps = {\r\n  lifeFields: null,\r\n  termLifePromoGiveAway: null,\r\n  wholeLifePromoGiveAway: null,\r\n};\r\n\r\nLifeMainContainer.propTypes = {\r\n  lifeFields: PropTypes.object,\r\n  getLifeFields: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n  termLifePromoGiveAway: PropTypes.object,\r\n  wholeLifePromoGiveAway: PropTypes.object,\r\n  clearData: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  lifeFields: state.life.lifeFields,\r\n  termLifePromoGiveAway: state.insurance.promoGiveaways.termLife,\r\n  wholeLifePromoGiveAway: state.insurance.promoGiveaways.wholeLife,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getLifeFields: () => {\r\n    dispatch(getLifeFields());\r\n  },\r\n  loading: (callBack, errorMsg, time) => {\r\n    dispatch(setLoading(callBack, errorMsg, time));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearLifeData());\r\n  },\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(LifeMainContainer));\r\n","/**\r\n * LifeChoosePlan.js\r\n * Choose Plan View for Life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport MultiCompareView from '../Templates/MultiCompareView/MultiCompareView';\r\n\r\nimport LifeEditDetail from './LifeEditDetail';\r\n\r\nimport { ampTag } from '../../lib/tagFunctions';\r\n\r\nclass LifeChoosePlan extends Component {\r\n  getAmpTags(selectedPlanData, planType) {\r\n    try {\r\n      let discount = null;\r\n      _.map(selectedPlanData.info.discount, (data) => {\r\n        discount = data.display;\r\n      });\r\n      if (_.isEmpty(discount)) {\r\n        discount = '0%';\r\n      }\r\n\r\n      return ({\r\n        partner: selectedPlanData.info.insurer_slug,\r\n        price: selectedPlanData.policyInfo[planType].net_price,\r\n        discount,\r\n      });\r\n    } catch (error) {\r\n      console.log(`Life choose plan Buy now Amp tag failed: ${error.message}`);\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  render() {\r\n    const { lifeFields } = this.props;\r\n\r\n    return (\r\n      <MultiCompareView\r\n        {...this.props}\r\n        category=\"life\"\r\n        form=\"life\"\r\n        editForm={{\r\n          valuesToListen: [\r\n            { value: 'gender', desc: 'Gender' },\r\n            { value: 'smoker', desc: 'S.Status' },\r\n            { value: 'birth_date', desc: 'Age' },\r\n            { value: 'sum_insured', desc: 'Sum', extra: 'cost_simplify' },\r\n            { value: 'sum_insured_selection', desc: 'Sum', extra: 'cost_simplify' },\r\n            { value: 'premium_term', desc: 'Term' },\r\n            { value: 'premium_whole', desc: 'Term' },\r\n            { value: 'critical_illness', desc: 'CI Coverage' },\r\n          ],\r\n          conditions: {\r\n            key: 'coverage_type',\r\n            values: {\r\n              term_life: ['gender', 'smoker', 'birth_date', 'sum_insured', 'premium_term', 'critical_illness'],\r\n              whole_life: ['gender', 'smoker', 'birth_date', 'sum_insured_selection', 'premium_whole'],\r\n            },\r\n          },\r\n          editDetail: <LifeEditDetail lifeFields={lifeFields} isPopUp />,\r\n        }}\r\n        buttonDesc=\"Select\"\r\n        forceFixedOnDesktop\r\n        trackingTags={{\r\n          default: (selectedPlanData) => {\r\n            ampTag('LifeSelectA', this.getAmpTags(selectedPlanData, 'default'));\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nLifeChoosePlan.defaultProps = {\r\n};\r\n\r\nLifeChoosePlan.propTypes = {\r\n  lifeFields: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default LifeChoosePlan;\r\n","/**\r\n * LifeChoosePlanContainer.js\r\n * Choose plan container for life.\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { parseLifeForm, getLifePlans, getValidInsurersList, clearLifeData, setSelectedPlanData } from '../../actions/lifeActions';\r\n\r\nimport LifeChoosePlan from '../../components/Life/LifeChoosePlan';\r\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass LifeChoosePlanContainer extends Component {\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.CHOOSEPLAN.index);\r\n\r\n    gaTag({\r\n      page_title: 'Life - Choose Plan',\r\n      page_path: '/life/chooseplan',\r\n    });\r\n    ampTag('LifeResultsS');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      lifeForm,\r\n      getPlans,\r\n      getInsurersList,\r\n      clearData,\r\n      setFormState,\r\n      plansData,\r\n      validInsurersList,\r\n      lifeFields,\r\n      history,\r\n    } = this.props;\r\n\r\n    return (\r\n      <LifeChoosePlan\r\n        mainForm={lifeForm}\r\n        parseForm={parseLifeForm}\r\n        getPlans={getPlans}\r\n        getInsurersList={getInsurersList}\r\n        clearData={clearData}\r\n        setSelectedPlanData={this.props.setSelectedPlanData}\r\n        setFormState={() => {\r\n          setFormState(FORMSTATES.DETAILFORM.index);\r\n          history.push(`/life${FORMSTATES.DETAILFORM.path}`);\r\n        }}\r\n        loadingFailBackState={() => {\r\n          history.goBack();\r\n        }}\r\n        plansData={plansData}\r\n        validInsurersList={validInsurersList}\r\n        lifeFields={lifeFields}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nLifeChoosePlanContainer.defaultProps = {\r\n  plansData: null,\r\n  validInsurersList: null,\r\n};\r\n\r\nLifeChoosePlanContainer.propTypes = {\r\n  lifeForm: PropTypes.object.isRequired,\r\n  getPlans: PropTypes.func.isRequired,\r\n  getInsurersList: PropTypes.func.isRequired,\r\n  clearData: PropTypes.func.isRequired,\r\n  setSelectedPlanData: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  plansData: PropTypes.array,\r\n  validInsurersList: PropTypes.array,\r\n  lifeFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  lifeForm: getFormValues('life')(state),\r\n  plansData: state.life.plansData,\r\n  validInsurersList: state.life.validInsurersList,\r\n  lifeFields: state.life.lifeFields,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  getPlans: (parsedForm) => {\r\n    dispatch(getLifePlans(parsedForm));\r\n  },\r\n  getInsurersList: (parsedForm) => {\r\n    dispatch(getValidInsurersList(parsedForm));\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearLifeData());\r\n  },\r\n  setSelectedPlanData: (data) => {\r\n    dispatch(setSelectedPlanData(data));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(LifeChoosePlanContainer));\r\n","/**\r\n * LifeDetail.js\r\n * Detail view for Life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues } from 'redux-form';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport DetailForm from '../Templates/DetailForm/DetailForm';\r\n\r\nimport TextInput from '../Forms/TextInput/TextInput';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport CheckoutComplete from '../Templates/CheckoutPopup/CheckoutComplete';\r\nimport PopupWithText from '../Templates/PopupWithText/PopupWithText';\r\n\r\nimport { getSynergyJSX } from '../../actions/insuranceActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { clearLoading } from '../../actions/loadingScreenActions';\r\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\n// import './PetDetail.scss';\r\n\r\nconst formName = 'life-detail';\r\n\r\nclass LifeDetail extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      sessionId,\r\n    } = nextProps;\r\n\r\n    if (sessionId !== prevState.sessionId) {\r\n      return ({\r\n        sessionId,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sessionId: null,\r\n      errorStringData: {},\r\n      errorArray: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { sessionId } = this.state;\r\n    const { loadingEnd } = this.props;\r\n\r\n    if (sessionId) {\r\n      loadingEnd();\r\n      setTimeout(() => {\r\n        this.checkoutComplete.openCheckoutComplete();\r\n        ampTag('LifeConfirmationS');\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateForm(e) {\r\n    const fieldsToCheck = [\r\n      'email',\r\n      'name',\r\n      'birth_date',\r\n      'mobile_number',\r\n    ];\r\n\r\n    const error = validateForm(e, fieldsToCheck);\r\n\r\n    this.setState({\r\n      errorStringData: error,\r\n    });\r\n    let errorArray = [];\r\n    if (!_.isEmpty(error)) {\r\n      errorArray = [<p className=\"error-string\" key=\"error-1\">Fields are not properly filled, please check again.</p>];\r\n    }\r\n\r\n    this.setState({\r\n      errorArray,\r\n    });\r\n\r\n    return error;\r\n  }\r\n\r\n  checkout(e) {\r\n    const { checkOutOthers } = this.props;\r\n\r\n    gaEvent('Life - DetailForm - Checkout', {\r\n      event_category: 'Life',\r\n      event_label: 'Life - DetailForm - Checkout',\r\n    });\r\n\r\n    checkOutOthers(e);\r\n  }\r\n\r\n  handleSubmit(e, isFirstValidate = true) {\r\n    const { storeForm, noSynergy } = this.props;\r\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error, errorArray: null }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      if (noSynergy) {\r\n        this.checkout(e);\r\n      } else {\r\n        ampTag('LifeConfirm1A');\r\n        ampTag('LifeNoticeS');\r\n        this.popup.openPopupWithJSX(getSynergyJSX(), true, () => {\r\n          ampTag('LifeConfirm2A');\r\n          setTimeout(() => {\r\n            this.checkout(e);\r\n          }, 350);\r\n        });\r\n      }\r\n    }\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  }\r\n\r\n  render() {\r\n    const { errorStringData, errorArray } = this.state;\r\n    const {\r\n      form,\r\n      change,\r\n      planDetails,\r\n      isLoggedIn,\r\n      piggyCallback,\r\n      changePlan,\r\n      storeForm,\r\n    } = this.props;\r\n\r\n    // console.log(petMinDate, petMaxDate);\r\n    return (\r\n      <Fragment>\r\n        <DetailForm\r\n          category=\"life\"\r\n          changePlan={changePlan}\r\n          handleSubmit={this.props.handleSubmit}\r\n          onSubmit={this.handleSubmit}\r\n          change={change}\r\n          form={form}\r\n          planDetails={planDetails}\r\n          isLoggedIn={isLoggedIn}\r\n          piggyCallback={piggyCallback}\r\n          errorArray={errorArray}\r\n          checkoutButtonDesc=\"Confirm\"\r\n        >\r\n          <Row className=\"main-form\" noGutters>\r\n            <Col xs={12}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"email\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={99}\r\n                desc=\"Email Address\"\r\n                errorString={errorStringData.email}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n            <Col className=\"right-padding\" xs={12} sm={6}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"name\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={98}\r\n                desc=\"Full Name\"\r\n                errorString={errorStringData.name}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n            <Col className=\"left-padding\" xs={12} sm={6}>\r\n              <DatePickerV2\r\n                form={form}\r\n                change={change}\r\n                name=\"birth_date\"\r\n                size=\"medium\"\r\n                zIndex={97}\r\n                desc=\"Date of Birth\"\r\n                errorString={errorStringData.birth_date}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n                endDate={new Date()}\r\n              />\r\n            </Col>\r\n            <Col className=\"right-padding\" xs={12} sm={6}>\r\n              <TextInput\r\n                form={form}\r\n                change={change}\r\n                name=\"mobile_number\"\r\n                placeholderString=\"\"\r\n                size=\"medium\"\r\n                zIndex={96}\r\n                desc=\"Mobile Number\"\r\n                errorString={errorStringData.mobile_number}\r\n                validateForm={() => this.validateForm(storeForm)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </DetailForm>\r\n        <PopupWithText\r\n          ref={node => this.popup = node}\r\n          showCancelButton\r\n        />\r\n        <CheckoutComplete\r\n          isQuoteOnly\r\n          isSellLeads\r\n          wrappedComponentRef={node => this.checkoutComplete = node}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nLifeDetail.defaultProps = {\r\n  storeForm: null,\r\n  noSynergy: false,\r\n};\r\n\r\nLifeDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  checkOutOthers: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  planDetails: PropTypes.object.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  changePlan: PropTypes.func.isRequired,\r\n  storeForm: PropTypes.object,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  noSynergy: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  constants: state.insurance.constants,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n});\r\n\r\nexport default reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, mapDispatchToProps)(LifeDetail));\r\n","/**\r\n * LifeDetailContainer.js\r\n * Detail Container for Life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport Logos from 'assets/images/InsurerLogos';\r\n\r\nimport LifeDetail from '../../components/Life/LifeDetail';\r\nimport RedirectPopup from '../../components/Templates/RedirectPopup/RedirectPopup';\r\n\r\nimport { setLoading } from '../../actions/loadingScreenActions';\r\nimport { getAnonymousSession, setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { getSessionParams, postToRedirect } from '../../actions/lifeActions';\r\nimport { gaTag, gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass LifeDetailContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.submitCallback = this.submitCallback.bind(this);\r\n    this.lifeRedirect = this.lifeRedirect.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.DETAILFORM.index);\r\n\r\n    gaTag({\r\n      page_title: 'Life - Detail Form',\r\n      page_path: '/life/detailform',\r\n    });\r\n    ampTag('LifeDetailsS');\r\n  }\r\n\r\n  submitCallback(e) {\r\n    const { selectedPlanData, checkOutOthers, loading } = this.props;\r\n    // console.log(selectedPlanData);\r\n    if (selectedPlanData.info.deep_link.integration_type === 'webview') {\r\n      this.RedirectPop.openRedirectPopup();\r\n      ampTag('LifeRedirectS');\r\n      return;\r\n    }\r\n\r\n    loading();\r\n    checkOutOthers(e);\r\n  }\r\n\r\n  async lifeRedirect() {\r\n    const {\r\n      lifeForm,\r\n      lifeDetailForm,\r\n      selectedPlanData,\r\n      loading,\r\n    } = this.props;\r\n\r\n    loading();\r\n\r\n    const result = await postToRedirect(lifeForm, lifeDetailForm, selectedPlanData);\r\n    if (selectedPlanData.info.insurer_slug === 'singlife') {\r\n      while (this.redirectButton.firstChild) {\r\n        this.redirectButton.removeChild(this.redirectButton.firstChild);\r\n      }\r\n      const range = document.createRange();\r\n      this.redirectButton.appendChild(range.createContextualFragment(result.form_html));\r\n\r\n      setTimeout(() => window.$(`#${result.form_id}`).get(0).submit(), 300);\r\n      ampTag('LifeConfirmA');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      plansData,\r\n      isLoggedIn,\r\n      profileValues,\r\n      piggyCallback,\r\n      lifeFields,\r\n      sessionId,\r\n      selectedPlanData,\r\n      history,\r\n    } = this.props;\r\n\r\n    if (!plansData) {\r\n      return null;\r\n    }\r\n\r\n    const selectedData = plansData;\r\n    const noSynergy = selectedPlanData.info.insurer_slug === 'singlife';\r\n\r\n    let planDetails = {\r\n      logo: Logos.others,\r\n      logoDesc: '',\r\n      planName: '',\r\n      planTotal: null,\r\n    };\r\n\r\n    try {\r\n      planDetails = {\r\n        logo: Logos[selectedData.info.insurer_slug],\r\n        logoDesc: `${selectedData.info.insurer_name}.svg`,\r\n        planName: selectedData.info.product_name,\r\n        planTotal: `$${selectedData.policyInfo[selectedData.planType].net_price.toFixed(2)}`,\r\n      };\r\n    } catch (error) {\r\n      console.log('Get plan details failed');\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <LifeDetail\r\n          lifeFields={lifeFields}\r\n          selectedData={selectedData}\r\n          planDetails={planDetails}\r\n          isLoggedIn={isLoggedIn}\r\n          sessionId={sessionId}\r\n          piggyCallback={piggyCallback}\r\n          checkOutOthers={this.submitCallback}\r\n          changePlan={() => {\r\n            history.goBack();\r\n            gaEvent('Life - DetailForm - ChangePlan', {\r\n              event_category: 'Life',\r\n              event_label: 'Life - DetailForm - ChangePlan',\r\n            });\r\n          }}\r\n          profileValues={profileValues}\r\n          // submitCallback={() => { setFormState(FORMSTATES.CHECKOUT); }}\r\n          noSynergy={noSynergy}\r\n        />\r\n        <RedirectPopup\r\n          ref={node => this.RedirectPop = node}\r\n          noEmail\r\n          onConfirm={() => {\r\n            this.lifeRedirect();\r\n          }}\r\n        />\r\n        <div className=\"redirect-button\" ref={node => this.redirectButton = node} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nLifeDetailContainer.defaultProps = {\r\n  sessionId: null,\r\n  plansData: null,\r\n  lifeDetailForm: null,\r\n};\r\n\r\nLifeDetailContainer.propTypes = {\r\n  plansData: PropTypes.object,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  profileValues: PropTypes.object.isRequired,\r\n  lifeFields: PropTypes.object.isRequired,\r\n  sessionId: PropTypes.string,\r\n  checkOutOthers: PropTypes.func.isRequired,\r\n  selectedPlanData: PropTypes.object.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  lifeForm: PropTypes.object.isRequired,\r\n  lifeDetailForm: PropTypes.object,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  lifeForm: getFormValues('life')(state),\r\n  lifeDetailForm: getFormValues('life-detail')(state),\r\n  lifeFields: state.life.lifeFields,\r\n  profileValues: state.userDetails,\r\n  plansData: state.life.selectedPlanData,\r\n  sessionId: state.insurance.sessionId,\r\n  selectedPlanData: state.life.selectedPlanData,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getAnonymousSession: (params) => {\r\n    dispatch(getAnonymousSession(params, true));\r\n  },\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n  loading: (callBack, errorMsg, time) => {\r\n    dispatch(setLoading(callBack, errorMsg, time));\r\n  },\r\n});\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => ({\r\n  ...ownProps,\r\n  ...propsFromState,\r\n  ...propsFromDispatch,\r\n  checkOutOthers: (detailForm) => {\r\n    propsFromDispatch.getAnonymousSession(getSessionParams(\r\n      propsFromState.lifeForm,\r\n      detailForm,\r\n      propsFromState.plansData,\r\n    ), true);\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(LifeDetailContainer));\r\n","/**\r\n * LifeRouteContainer.js\r\n * The wrapper container for life\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { connect } from 'react-redux';\r\nimport { /* Prompt, */ withRouter } from 'react-router-dom';\r\nimport { change, reset } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { resetCompare } from '../../actions/compareActions';\r\nimport { getPromoGiveaways, resetInsuranceForm, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { clearLifeData } from '../../actions/lifeActions';\r\nimport { isProduction } from '../../lib/tagFunctions';\r\n\r\nimport StepProgressBar from '../../components/Templates/StepProgressBar/StepProgressBar';\r\nimport RefreshTimer from '../../components/Templates/RefreshTimer/RefreshTimer';\r\n\r\nimport LifeMainContainer from './LifeMainContainer';\r\nimport LifeChoosePlanContainer from './LifeChoosePlanContainer';\r\nimport LifeDetailContainer from './LifeDetailContainer';\r\n\r\nimport { routeHandler } from '../../lib/helperFunctions';\r\n\r\nconst formName = 'life';\r\nconst detailFormName = 'life-detail';\r\n\r\nclass LifeRouteContainer extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { formIndex, isMounted } = prevState;\r\n    const { formState, match, history } = nextProps;\r\n\r\n    if (isMounted) {\r\n      const routeResult = routeHandler(formName, formState, formIndex, match, history);\r\n      if (routeResult && routeResult.formIndex !== null) {\r\n        return ({\r\n          formIndex: routeResult.formIndex,\r\n        });\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      formIndex: 0,\r\n      isInitialLoad: true,\r\n    };\r\n\r\n    const {\r\n      resetStoreForm,\r\n      termLifePromoGiveAway,\r\n      wholeLifePromoGiveAway,\r\n      clearData,\r\n      history,\r\n    } = this.props;\r\n\r\n    history.replace(`/life${history.location.search}`);\r\n\r\n    clearData();\r\n    this.props.resetCompare();\r\n    this.props.resetInsuranceForm();\r\n\r\n    resetStoreForm('life');\r\n    resetStoreForm('life-detail');\r\n\r\n    if (termLifePromoGiveAway === undefined || wholeLifePromoGiveAway === undefined) {\r\n      this.props.getPromoGiveaways();\r\n    }\r\n\r\n    this.setInitialFormState = this.setInitialFormState.bind(this);\r\n    this.renderStepProgress = this.renderStepProgress.bind(this);\r\n    this.renderLifeForms = this.renderLifeForms.bind(this);\r\n    this.changeUserDetails = this.changeUserDetails.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // window.addEventListener('beforeunload', this.handleLeavePage);\r\n    this.setInitialFormState();\r\n    this.setState({\r\n      // eslint-disable-next-line\r\n      isMounted: true,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { isInitialLoad } = this.state;\r\n    const { userDetails } = this.props;\r\n\r\n    if (isInitialLoad && _.isEqual(userDetails, prevProps.userDetails)) {\r\n      this.changeUserDetails();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { clearData, resetStoreForm } = this.props;\r\n    clearData();\r\n    this.props.resetCompare();\r\n    this.props.resetInsuranceForm();\r\n\r\n    resetStoreForm('life');\r\n    resetStoreForm('life-detail');\r\n  }\r\n\r\n  setInitialFormState() {\r\n    const { changeForm } = this.props;\r\n\r\n    changeForm(formName, 'birth_date', '01 Jan 1990');\r\n    changeForm(formName, 'sum_insured', '500000');\r\n    changeForm(formName, 'premium_term', '5 years');\r\n    changeForm(formName, 'premium_whole', '20 years');\r\n\r\n    this.changeUserDetails();\r\n  }\r\n\r\n  changeUserDetails() {\r\n    const { isInitialLoad } = this.state;\r\n    const { userDetails, changeForm } = this.props;\r\n\r\n    if (userDetails) {\r\n      const surname = userDetails && userDetails.surname ? userDetails.surname : '';\r\n      const firstname = userDetails && userDetails.firstName ? ` ${userDetails.firstName}` : '';\r\n\r\n      changeForm(detailFormName, 'email', userDetails.email);\r\n      changeForm(detailFormName, 'name', `${surname}${firstname}`);\r\n      changeForm(detailFormName, 'birth_date', userDetails.dateOfBirth);\r\n      changeForm(detailFormName, 'mobile_number', userDetails.contact);\r\n\r\n      if (isInitialLoad) {\r\n        this.setState({\r\n          isInitialLoad: false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  renderStepProgress() {\r\n    const { formIndex } = this.state;\r\n    return (\r\n      <StepProgressBar\r\n        maxWidth=\"556px\"\r\n        formState={formIndex}\r\n        inputList={[\r\n          'Choose Plan',\r\n          'Details',\r\n        ]}\r\n        form=\"life\"\r\n        stateList={[\r\n          FORMSTATES.CHOOSEPLAN,\r\n          FORMSTATES.DETAILFORM,\r\n        ]}\r\n        stateDescriptions={[\r\n          { main: '' /* 'Choose your Plan', sub: 'Compare price plans from multiple companies' */ },\r\n          { main: 'Fill in your details - Get $5 Credits' },\r\n        ]}\r\n        charged={false}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderLifeForms() {\r\n    const { formIndex } = this.state;\r\n\r\n    const {\r\n      userDetails,\r\n    } = this.props;\r\n\r\n    const isLoggedIn = !_.isEmpty(userDetails);\r\n\r\n\r\n    switch (formIndex) {\r\n      case FORMSTATES.CHOOSEPLAN.index:\r\n        return <LifeChoosePlanContainer isLoggedIn={isLoggedIn} />;\r\n      case FORMSTATES.DETAILFORM.index:\r\n        return (\r\n          <LifeDetailContainer\r\n            isLoggedIn={isLoggedIn}\r\n            piggyCallback={this.changeUserDetails}\r\n          />\r\n        );\r\n      default:\r\n        return <LifeMainContainer isLoggedIn={isLoggedIn} />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      termLifePromoGiveAway,\r\n      wholeLifePromoGiveAway,\r\n      constants,\r\n    } = this.props;\r\n\r\n    if (!constants || termLifePromoGiveAway === undefined || wholeLifePromoGiveAway === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const meta = isProduction ? 'PolicyPal, insurance, insurance broker, life insurance, term insurance, critical illness insurance, compare insurance, term life, insurance policy, insurance quotes, term insurance plans, term policy, life insurance quotes, types of life insurance, best life insurance, term life insurance, life quotes, life insurance quotes, term insurance comparison, life insurance singapore, whole life insurance, whole life, term vs life insurance, what is life insurance, term life vs whole life, term insurance comparison' : '';\r\n    return (\r\n      <Fragment>\r\n        <Helmet>\r\n          <meta name=\"keywords\" content={meta} />\r\n          <title>PolicyPal 2.0 - Life Insurance</title>\r\n          <meta name=\"title\" content=\"PolicyPal 2.0 - Life Insurance\" />\r\n          <meta name=\"description\" content=\"Browse products for life insurance.\" />\r\n        </Helmet>\r\n        {/* {\r\n          formState !== FORMSTATES.MAIN ?\r\n            <Prompt\r\n              when={true}\r\n              message=\"Are you sure you want to leave current page?\"\r\n            />\r\n          :\r\n            null\r\n        } */}\r\n        {this.renderStepProgress()}\r\n        {this.renderLifeForms()}\r\n        <RefreshTimer ref={(node) => {\r\n            if (!this.refresher) {\r\n              node.invokeNewTimer();\r\n            }\r\n            this.refresher = node;\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nLifeRouteContainer.defaultProps = {\r\n  userDetails: null,\r\n  termLifePromoGiveAway: undefined,\r\n  wholeLifePromoGiveAway: undefined,\r\n  constants: null,\r\n};\r\n\r\nLifeRouteContainer.propTypes = {\r\n  clearData: PropTypes.func.isRequired,\r\n  resetCompare: PropTypes.func.isRequired,\r\n  getPromoGiveaways: PropTypes.func.isRequired,\r\n  resetInsuranceForm: PropTypes.func.isRequired,\r\n  changeForm: PropTypes.func.isRequired,\r\n  resetStoreForm: PropTypes.func.isRequired,\r\n  userDetails: PropTypes.object,\r\n  termLifePromoGiveAway: PropTypes.object,\r\n  wholeLifePromoGiveAway: PropTypes.object,\r\n  constants: PropTypes.object,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  termLifePromoGiveAway: state.insurance.promoGiveaways.termLife,\r\n  wholeLifePromoGiveAway: state.insurance.promoGiveaways.wholeLife,\r\n  formState: state.insurance.formState,\r\n  constants: state.insurance.constants,\r\n  userDetails: state.userDetails.data,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeForm: (form, key, value) => (\r\n    dispatch(change(form, key, value))\r\n  ),\r\n  resetInsuranceForm: () => (\r\n    dispatch(resetInsuranceForm())\r\n  ),\r\n  resetStoreForm: form => (\r\n    dispatch(reset(form))\r\n  ),\r\n  getPromoGiveaways: () => {\r\n    dispatch(getPromoGiveaways('termLife'));\r\n    dispatch(getPromoGiveaways('wholeLife'));\r\n  },\r\n  resetCompare: () => {\r\n    dispatch(resetCompare());\r\n  },\r\n  clearData: () => {\r\n    dispatch(clearLifeData());\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(LifeRouteContainer));\r\n","module.exports = __webpack_public_path__ + \"static/media/Avatar.95378d46.svg\";","/**\r\n * MultiCompareInner.js\r\n * Multi Compare view with different insurers\r\n * Contains the main policy type tab view logic\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Row } from 'reactstrap';\r\n\r\nimport TabView from '../../Templates/TabView/TabView';\r\nimport CompareView from '../../Templates/CompareView/CompareView';\r\nimport ChangeInitialFormData from '../../Templates/ChangeInitialFormData/ChangeInitialFormData';\r\n\r\nimport Enquiry from '../../Templates/Enquiry/Enquiry';\r\n\r\nimport { setPlanType, setSelectedIndex } from '../../../actions/compareActions';\r\n\r\n// The default tabs array\r\nconst resultToMatch = ['basic', 'essential', 'elite', 'default'];\r\n\r\nclass MultiCompareInner extends Component {\r\n  /**\r\n   * Lifecycle Method - getDerivedStateFromProps\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    // Goes here first before did mount\r\n    // Get new policy available policy types\r\n    if (nextProps.data.policyTypes !== prevState.policyTypes) {\r\n      return ({\r\n        policyTypes: nextProps.data.policyTypes,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { data } = this.props;\r\n    // tabIndex - The current tab index in effect\r\n    // currentTab - The name of the current tab\r\n    // tabs - The tabs array data\r\n    // policyTypes - The possible policy types to display\r\n    this.state = {\r\n      tabIndex: 0,\r\n      currentTab: null,\r\n      tabs: null,\r\n      policyTypes: data.policyTypes,\r\n    };\r\n\r\n    this.handleTabClick = this.handleTabClick.bind(this);\r\n    this.renderTabs = this.renderTabs.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    // Render inital tabs\r\n    const tabs = this.renderTabs(null, true);\r\n    // Set initial plan type\r\n    this.props.setPlanType(_.lowerCase(tabs.currentTab));\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   */\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { policyTypes, tabs, currentTab } = this.state;\r\n    const { data } = this.props;\r\n\r\n    // Render new tabs if policy types are changed\r\n    if (!_.isEqual(policyTypes, nextState.policyTypes)) {\r\n      this.renderTabs(nextState.policyTypes);\r\n    }\r\n\r\n    // Update only when tabs or data are updated\r\n    return tabs !== nextState.tabs ||\r\n          currentTab !== nextState.currentTab ||\r\n          data !== nextProps.data;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { tabs, tabIndex } = this.state;\r\n    const { selectedIndex, initialIndex } = this.props;\r\n\r\n    // If new tabs\r\n    if (tabs !== prevState.tabs) {\r\n      if (this.categoryTab && this.categoryTab.wrappedInstance) {\r\n        // If using back previous selected index and not the same state as local index\r\n        const isCameFromBackButton = selectedIndex && selectedIndex !== tabIndex;\r\n        // If this is the first time user enter compare view\r\n        const isFirstTime = selectedIndex === null && initialIndex;\r\n\r\n        if (isCameFromBackButton || isFirstTime) {\r\n          const currIncomingIndex = isCameFromBackButton ? selectedIndex : initialIndex;\r\n          // Check if previous selected index is still within range\r\n          const tabIndexToUse = currIncomingIndex < tabs.length ? currIncomingIndex : 0;\r\n          // Go to the tab and set new state;\r\n          this.categoryTab.wrappedInstance.goToIndex(tabIndexToUse, true);\r\n          this.setState({ tabIndex: tabIndexToUse });\r\n\r\n          // Set index to store\r\n          this.props.setSelectedIndex(tabIndexToUse);\r\n          return;\r\n        }\r\n\r\n        // This happens when tabs are not the same when changing form within\r\n        // compare view. It will try to go to the last selected plan type\r\n        this.categoryTab.wrappedInstance.goToIndex(tabIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When clicked on main tabs\r\n   *\r\n   * @param {string} type - Selected plan type\r\n   * @param {number} index - Tab index\r\n   */\r\n  handleTabClick(type, index) {\r\n    // Set current plan type\r\n    this.setState({\r\n      currentTab: type,\r\n    });\r\n\r\n    this.props.setPlanType(type);\r\n    this.props.setSelectedIndex(index);\r\n  }\r\n\r\n  /**\r\n   * Render Main tabs\r\n   *\r\n   * @param {array} policyTypes - The avaliable policy types\r\n   * @param {bool} isInitial - If is initial first time load\r\n   */\r\n  renderTabs(policyTypes = null, isInitial = false) {\r\n    const { policyTypes: oldPolicyTypes, currentTab } = this.state;\r\n    const { planImages } = this.props;\r\n\r\n    // Use new policy types if avaliable\r\n    const policyTypesToUse = policyTypes || oldPolicyTypes;\r\n\r\n    // The tab index\r\n    let index = 0;\r\n\r\n    // Match possible policy types to default types,\r\n    // with positioning in consideration\r\n    const tabs = _.reduce(resultToMatch, (result, type) => {\r\n      if (_.findIndex(policyTypesToUse, planType => planType === type) !== -1) {\r\n        const theIndex = index;\r\n        const image = planImages ? planImages[type] : null;\r\n        // Set desc, image, and onClick for the tab\r\n        result.push({\r\n          desc: _.startCase(type),\r\n          img: image,\r\n          onClick: () => {\r\n            this.handleTabClick(type, theIndex);\r\n          },\r\n        });\r\n        index += 1;\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // Default currenTab name is from first item\r\n    let tabInfo = { currentTab: _.lowerCase(tabs[0].desc) };\r\n\r\n    // If tabs is changed while navigating in compare view\r\n    if (!isInitial) {\r\n      // Try to find if the old tab name still exists in new one\r\n      const currentTabIndex = _.findIndex(tabs, tab => _.lowerCase(tab.desc) === currentTab);\r\n      // Use 0 if no longer exists\r\n      const tabIndexToUse = currentTabIndex !== -1 ? currentTabIndex : 0;\r\n      // New tab\r\n      const newTab = _.lowerCase(tabs[tabIndexToUse].desc);\r\n      // Set new tab info\r\n      tabInfo = {\r\n        tabIndex: tabIndexToUse,\r\n        currentTab: newTab,\r\n      };\r\n\r\n      // Set store data\r\n      this.props.setPlanType(newTab);\r\n      this.props.setSelectedIndex(tabIndexToUse);\r\n    }\r\n\r\n    // Return tabs\r\n    const result = {\r\n      ...tabInfo,\r\n      tabs,\r\n    };\r\n\r\n    this.setState(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  render() {\r\n    const {\r\n      currentTab,\r\n      tabs,\r\n    } = this.state;\r\n\r\n    const {\r\n      data,\r\n      scrollPopUpCallback,\r\n      submitCallback,\r\n      editForm,\r\n      form,\r\n      buttonDesc,\r\n      forceFixedOnDesktop,\r\n      category,\r\n    } = this.props;\r\n\r\n    // console.log(plansData);\r\n    if (!data || !tabs || !currentTab) {\r\n      return null;\r\n    }\r\n\r\n    const tabStyle = currentTab === 'default' ? 'inner-form-no-tabs' : '';\r\n\r\n    return (\r\n      <Fragment>\r\n        <Row className={`inner-form-container ${tabStyle} inner-form-extra-padding`} noGutters>\r\n          <TabView\r\n            tabs={tabs}\r\n            isDataFadeOnly\r\n            isDisableDropdown\r\n            big\r\n            name={`${form}-tab`}\r\n            ref={node => this.categoryTab = node}\r\n          >\r\n            {[<CompareView\r\n              category={category}\r\n              key=\"overview\"\r\n              className=\"overview-container-padding\"\r\n              notAccordion\r\n              data={data}\r\n              currentTab={currentTab}\r\n              scrollPopUpCallback={scrollPopUpCallback}\r\n              productChangable\r\n              editForm={\r\n                <ChangeInitialFormData\r\n                  submitCallback={submitCallback}\r\n                  form={form}\r\n                  headerValue={editForm.headerValue}\r\n                  valuesToListen={editForm.valuesToListen}\r\n                  conditions={editForm.conditions}\r\n                >\r\n                  {editForm.editDetail}\r\n                </ChangeInitialFormData>\r\n              }\r\n              buttonDesc={buttonDesc}\r\n              forceFixedOnDesktop={forceFixedOnDesktop}\r\n            />]}\r\n          </TabView>\r\n          <Enquiry />\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nMultiCompareInner.defaultProps = {\r\n  initialIndex: 0,\r\n  selectedIndex: null,\r\n  data: null,\r\n  planImages: null,\r\n  buttonDesc: null,\r\n  forceFixedOnDesktop: false,\r\n  category: null,\r\n};\r\n\r\nMultiCompareInner.propTypes = {\r\n  initialIndex: PropTypes.number,\r\n  selectedIndex: PropTypes.number,\r\n  setSelectedIndex: PropTypes.func.isRequired,\r\n  setPlanType: PropTypes.func.isRequired,\r\n  data: PropTypes.object,\r\n  planImages: PropTypes.object,\r\n  scrollPopUpCallback: PropTypes.func.isRequired,\r\n  submitCallback: PropTypes.func.isRequired,\r\n  editForm: PropTypes.object.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  buttonDesc: PropTypes.string,\r\n  forceFixedOnDesktop: PropTypes.bool,\r\n  category: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedIndex: state.compare.selectedIndex,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedIndex: (index) => {\r\n    dispatch(setSelectedIndex(index));\r\n  },\r\n  setPlanType: (type) => {\r\n    dispatch(setPlanType(type));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareInner);\r\n","/**\r\n * MultiCompareView.js\r\n * Multi Compare view with different insurers\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { parseData } from '../../../actions/insuranceActions';\r\nimport { setSelectedInsurers } from '../../../actions/compareActions';\r\nimport { setLoading, clearLoading } from '../../../actions/loadingScreenActions';\r\nimport { setRestrictionPopup } from '../../../actions/restrictionsActions';\r\nimport MultiCompareInner from './MultiCompareInner';\r\n\r\nclass MultiCompareView extends Component {\r\n  /**\r\n   * Lifecycle Method - getDerivedStateFromProps\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    try {\r\n      const {\r\n        currentInsurers,\r\n      } = prevState;\r\n\r\n      const {\r\n        plansData,\r\n        validInsurersList,\r\n        setFormState,\r\n        loadingEnd,\r\n        mainForm,\r\n        setSelectedPlanData,\r\n        trackingTags,\r\n      } = nextProps;\r\n\r\n      if (plansData && plansData[0] === 'INVALID') {\r\n        return null;\r\n      }\r\n\r\n      // If plansData and validInsurersList are retrieved, parse data for display\r\n      if (validInsurersList && plansData) {\r\n        let newDefaultInsurers = currentInsurers || {};\r\n        if (!currentInsurers && plansData) {\r\n          newDefaultInsurers = _.map(plansData, plan => plan.info.insurer_slug);\r\n          newDefaultInsurers = newDefaultInsurers.slice(0, 3);\r\n          nextProps.setSelectedInsurers(newDefaultInsurers);\r\n        }\r\n\r\n        return {\r\n          parsedData: parseData(\r\n            plansData,\r\n            validInsurersList,\r\n            newDefaultInsurers,\r\n            mainForm.trip_type,\r\n            () => {\r\n              setFormState();\r\n            },\r\n            setSelectedPlanData,\r\n            loadingEnd,\r\n            nextProps.setRestrictionPopup,\r\n            null,\r\n            trackingTags,\r\n          ),\r\n          currentInsurers: newDefaultInsurers,\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      mainForm,\r\n      parseForm,\r\n      getPlans,\r\n      getInsurersList,\r\n      loading,\r\n      defaultInsurers,\r\n      plansData,\r\n      validInsurersList,\r\n      selectedInsurers,\r\n      setSelectedPlanData,\r\n      loadingEnd,\r\n      setFormState,\r\n      loadingFailBackState,\r\n      clearData,\r\n      trackingTags,\r\n    } = this.props;\r\n\r\n    try {\r\n      // If fresh init\r\n      if (!plansData || !validInsurersList) {\r\n        // Initally, get the params from mainform and default insurers\r\n        const parsedParams = parseForm(mainForm, defaultInsurers);\r\n\r\n        // Set loading\r\n        loading(() => {\r\n          clearData();\r\n          loadingFailBackState();\r\n        }, 'No available plans found.', 30000, '');\r\n\r\n        // Get plans and valid insurers list\r\n        getPlans(parsedParams);\r\n        getInsurersList(parsedParams);\r\n\r\n        // Set initial default insurers\r\n        this.props.setSelectedInsurers(defaultInsurers);\r\n\r\n        // currentInsurers: Current selected list of insurers\r\n        // parsedData: The parsed data to display\r\n        // hoveredIndex: The current hovered index on the insurer selection dropdown, default is 0\r\n        this.state = {\r\n          currentInsurers: defaultInsurers,\r\n          parsedData: null,\r\n        };\r\n      } else {\r\n        // Set existing selected insurers and get old parsed data\r\n        // (Will reach this condition when using the back button)\r\n        this.state = {\r\n          currentInsurers: selectedInsurers,\r\n          parsedData: parseData(\r\n            plansData,\r\n            validInsurersList,\r\n            selectedInsurers,\r\n            mainForm.trip_type,\r\n            () => setFormState(),\r\n            setSelectedPlanData,\r\n            loadingEnd,\r\n            this.props.setRestrictionPopup,\r\n            null,\r\n            trackingTags,\r\n          ),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      // eslint-disable-next-line\r\n    }\r\n\r\n    this.getNewData = this.getNewData.bind(this);\r\n    this.onInsurerClick = this.onInsurerClick.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      plansData,\r\n      loadingEnd,\r\n      loading,\r\n      clearData,\r\n      loadingFailBackState,\r\n    } = this.props;\r\n\r\n    if (plansData && plansData[0] === 'INVALID') {\r\n      loadingEnd();\r\n      if (!this.isLoading) {\r\n        this.isLoading = true;\r\n        setTimeout(() =>\r\n          loading(() => {\r\n            clearData();\r\n            loadingFailBackState();\r\n            this.isLoading = false;\r\n          }, 'No available plans found.', 50, ''), 500);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   */\r\n  /* shouldComponentUpdate(nextProps, nextState) {\r\n    const { parsedData } = this.state;\r\n\r\n    // Render only is new or policyTypes changed\r\n    return !(parsedData && nextState.parsedData) ||\r\n          !_.isEqual(parsedData.policyTypes, nextState.parsedData.policyTypes);\r\n  } */\r\n\r\n  /**\r\n   * Handle selection on insurer list\r\n   *\r\n   * @param {object} data - The insurer list item data\r\n   */\r\n  onInsurerClick(data, hoveredIndex) {\r\n    // parsedData: The parsed data to display\r\n    const { parsedData } = this.state;\r\n\r\n    // Remap current insurers as sometimes when change form data, the insurers\r\n    // can be less than 3.\r\n    // console.log(parsedData.selectedInsurers, hoveredIndex);\r\n    const currentInsurers = _.reduce(parsedData.selectedInsurers, (result, insurer) => {\r\n      if (insurer) {\r\n        result.push(insurer.insurerSlug);\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // Change insurer of current selected position\r\n    currentInsurers[hoveredIndex] = data.insurer_slug;\r\n\r\n    // Set current insurers\r\n    this.setState({\r\n      currentInsurers,\r\n    });\r\n\r\n    // Set current insurers in store\r\n    this.props.setSelectedInsurers(currentInsurers);\r\n\r\n    // Get new compare data based on the new selected insurers\r\n    this.getNewData(currentInsurers);\r\n  }\r\n\r\n  /**\r\n   * Get new compare data.\r\n   * Used when changing insurers or changing form fields.\r\n   *\r\n   * @param {array} incomingInsurers - selected insurers\r\n   */\r\n  getNewData(incomingInsurers = null) {\r\n    const { currentInsurers } = this.state;\r\n    const {\r\n      loading,\r\n      getPlans,\r\n      getInsurersList,\r\n      clearData,\r\n      mainForm,\r\n      parseForm,\r\n      loadingFailBackState,\r\n    } = this.props;\r\n\r\n    // If init, use default, else the current array\r\n    const insurerToUse = incomingInsurers || currentInsurers;\r\n    // Parse the form for params\r\n    const parsedParams = parseForm(mainForm, insurerToUse);\r\n    // Clear data in store first, so it will detect as fresh props from store\r\n    clearData();\r\n    // Set loading screen\r\n    loading(() => {\r\n      clearData();\r\n      loadingFailBackState();\r\n    }, 'No available plans found.', 30000, '');\r\n    // Get plans and insurer lists\r\n    getPlans(parsedParams);\r\n    getInsurersList(parsedParams);\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  render() {\r\n    try {\r\n      const { parsedData } = this.state;\r\n      const {\r\n        editForm,\r\n        form,\r\n        planImages,\r\n        initialIndex,\r\n        buttonDesc,\r\n        forceFixedOnDesktop,\r\n        category,\r\n      } = this.props;\r\n\r\n      // Do not render if no data\r\n      if (!parsedData) {\r\n        return null;\r\n      }\r\n\r\n      // console.log(parsedData);\r\n      return (\r\n        <MultiCompareInner\r\n          category={category}\r\n          initialIndex={initialIndex}\r\n          planImages={planImages}\r\n          data={parsedData}\r\n          form={form}\r\n          editForm={editForm}\r\n          scrollPopUpCallback={this.onInsurerClick}\r\n          submitCallback={this.getNewData}\r\n          buttonDesc={buttonDesc}\r\n          forceFixedOnDesktop={forceFixedOnDesktop}\r\n        />\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nMultiCompareView.defaultProps = {\r\n  initialIndex: 0,\r\n  plansData: null,\r\n  validInsurersList: null,\r\n  selectedInsurers: null,\r\n  trackingTags: null,\r\n  planImages: null,\r\n  defaultInsurers: null,\r\n  buttonDesc: null,\r\n  forceFixedOnDesktop: false,\r\n  category: null,\r\n};\r\n\r\nMultiCompareView.propTypes = {\r\n  setSelectedInsurers: PropTypes.func.isRequired,\r\n  mainForm: PropTypes.object.isRequired,\r\n  parseForm: PropTypes.func.isRequired,\r\n  getPlans: PropTypes.func.isRequired,\r\n  getInsurersList: PropTypes.func.isRequired,\r\n  clearData: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n  defaultInsurers: PropTypes.array,\r\n  editForm: PropTypes.object.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  planImages: PropTypes.object,\r\n  initialIndex: PropTypes.number,\r\n  plansData: PropTypes.array,\r\n  validInsurersList: PropTypes.array,\r\n  selectedInsurers: PropTypes.array,\r\n  setSelectedPlanData: PropTypes.func.isRequired,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  setRestrictionPopup: PropTypes.func.isRequired,\r\n  loadingFailBackState: PropTypes.func.isRequired,\r\n  trackingTags: PropTypes.object,\r\n  buttonDesc: PropTypes.string,\r\n  forceFixedOnDesktop: PropTypes.bool,\r\n  category: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedInsurers: state.compare.selectedInsurers,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loading: (callBack, errorMsg, time, mainMsg) => {\r\n    dispatch(setLoading(callBack, errorMsg, time, mainMsg));\r\n  },\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n  setRestrictionPopup: (data) => {\r\n    dispatch(setRestrictionPopup(data));\r\n  },\r\n  setSelectedInsurers: (array) => {\r\n    dispatch(setSelectedInsurers(array));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareView);\r\n","module.exports = __webpack_public_path__ + \"static/media/Dollar.962423c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Umbrella.d081f752.svg\";","/**\r\n * RedirectPopupForm.js\r\n * The form view of the redirect component\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'components/FormsV3/Button/Button';\r\nimport TextInput from '../../Forms/TextInput/TextInput';\r\nimport Selection from '../../Forms/Selection/Selection';\r\n\r\nimport { validateForm } from '../../../lib/validators';\r\n\r\n\r\nclass RedirectPopupForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      errorString: null,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    const { onConfirm, category, noEmail } = this.props;\r\n    const email = noEmail ? [] : ['email'];\r\n\r\n    const errorResult = validateForm(e, [...email, 'disclaimer']);\r\n\r\n    if (!noEmail && errorResult.email) {\r\n      this.setState({\r\n        errorString: 'Invalid email!',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (_.isEmpty(e.disclaimer)) {\r\n      this.setState({\r\n        errorString: 'Please agree to the terms to proceed.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!_.isEmpty(errorResult)) {\r\n      this.setState({\r\n        errorString: 'Please fill in all fields!',\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      errorString: null,\r\n    });\r\n\r\n    onConfirm({ ...e, category });\r\n  }\r\n\r\n  render() {\r\n    const { errorString } = this.state;\r\n    const {\r\n      handleSubmit,\r\n      form,\r\n      change,\r\n      noEmail,\r\n    } = this.props;\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit(this.handleSubmit)}>\r\n        <div className=\"mid-container\">\r\n          <Row noGutters>\r\n            {\r\n              noEmail ?\r\n                null\r\n              :\r\n                <Col xs={12}>\r\n                  <TextInput\r\n                    form={form}\r\n                    change={change}\r\n                    name=\"email\"\r\n                    placeholderString=\"\"\r\n                    size=\"medium\"\r\n                    zIndex={99}\r\n                    desc=\"Email Address\"\r\n                  />\r\n                </Col>\r\n            }\r\n            <Col xs={12}>\r\n              <Selection\r\n                form={form}\r\n                change={change}\r\n                name=\"disclaimer\"\r\n                type=\"checkbox\"\r\n                options={[\r\n                  { key: 'disclaimer', description: 'I agree to store this policy in my PolicyPal account after purchase, in accordance with the Personal Data Protection Act.' },\r\n                ]}\r\n                sizeInSM={12}\r\n                desc=\"\"\r\n              />\r\n            </Col>\r\n            {\r\n              errorString ?\r\n                <Col xs={12}>\r\n                  <p className=\"error-string\">{errorString}</p>\r\n                </Col>\r\n              :\r\n                null\r\n            }\r\n          </Row>\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"checkout-button\"\r\n            variant=\"medium-flat-green\"\r\n            width={166}\r\n            height={72}\r\n          >\r\n            <p>Confirm</p>\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nRedirectPopupForm.defaultProps = {\r\n  category: null,\r\n  noEmail: false,\r\n};\r\n\r\nRedirectPopupForm.propTypes = {\r\n  onConfirm: PropTypes.func.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  category: PropTypes.string,\r\n  noEmail: PropTypes.bool,\r\n};\r\n\r\nexport default reduxForm({\r\n  form: 'redirect-form',\r\n})(RedirectPopupForm);\r\n","/**\r\n * RedirectPopup.js\r\n * Popup to inform users that we are redirecting\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport RedirectPopupForm from './RedirectPopupForm';\r\nimport Popup from '../Popup/Popup';\r\n\r\nimport './RedirectPopup.scss';\r\n\r\nclass RedirectPopup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      category: null,\r\n    };\r\n\r\n    this.openRedirectPopup = this.openRedirectPopup.bind(this);\r\n  }\r\n\r\n  openRedirectPopup(category) {\r\n    this.setState({\r\n      category,\r\n    });\r\n    setTimeout(this.popupRef.openPopup, 100);\r\n  }\r\n\r\n  render() {\r\n    const { category } = this.state;\r\n    const { onConfirm, noEmail } = this.props;\r\n\r\n    return (\r\n      <Popup ref={(r) => { this.popupRef = r; }}>\r\n        <Fragment>\r\n          <div className=\"redirect-popup\">\r\n            <div className=\"upper-container\">\r\n              <p>{'Kindly fill up the following section before we redirect you to the insurer\\'s page. The details below will be used for verification with the insurer after purchase.'}</p>\r\n            </div>\r\n            <RedirectPopupForm\r\n              noEmail={noEmail}\r\n              closPopup={() => this.popupRef.closePopup()}\r\n              onConfirm={onConfirm}\r\n              category={category}\r\n            />\r\n          </div>\r\n        </Fragment>\r\n      </Popup>\r\n    );\r\n  }\r\n}\r\n\r\nRedirectPopup.defaultProps = {\r\n  noEmail: false,\r\n};\r\n\r\nRedirectPopup.propTypes = {\r\n  onConfirm: PropTypes.func.isRequired,\r\n  noEmail: PropTypes.bool,\r\n};\r\n\r\nexport default RedirectPopup;\r\n\r\n"],"sourceRoot":""}