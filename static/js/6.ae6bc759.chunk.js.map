{"version":3,"sources":["components/Forms/FormInputWrapper/FormInputWrapper.js","assets/images/forms/magnifyGlass.svg","components/Forms/DropDown/DropDownV2.js","assets/images/forms/cross.svg"],"names":["FormInputWrapper","props","_this","Object","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","state","errorString","setErrorString","bind","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","clearErrorString","nextProps","prevState","refValue","validateForm","message","setState","_this$props","desc","extraInfo","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","children","Component","defaultProps","module","exports","__webpack_require__","p","maxItemsDisplay","mediumHeight","bigHeight","DropDownV2","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","dropList","placeholderString","size","numItemsDisplay","height","numItems","maxheight","_","min","length","isOpened","listItems","selectedString","listHeight","multipleSelectedElements","listElementsCounter","clientHeight","extraPadding","updateDimensions","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","handleClickOutside","renderListItems","renderTextInput","handleSelectClick","handleOnInputChange","handleSetMultipleSelectedItem","handleDestroySelected","handleInputKeyPress","handleItemKeyPress","handleChange","handleExit","handleBlur","handleFocus","initialListItems","document","addEventListener","window","_this$props2","formStore","name","overrideValue","formValues","constructor","Array","_this$props3","isForm","isElements","isEmpty","isEqual","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","removeEventListener","isMultiple","_this$state","selectedContainer","value","_this$props4","form","formChange","notForm","valueChangeCallback","inputField","event","wrapperRef","contains","target","isFromFocus","_this$state2","key","preventDefault","index","listElements","getAttribute","Math","max","focus","stopPropagation","isOpenOnly","arguments","undefined","_this$state3","_this$props5","item","_this$state4","newArr","indexOf","push","slice","splice","result","filter","toString","toUpperCase","relatedTarget","inputString","_this$state6","_this$props6","resultString","isError","finalString","some","obj","toLowerCase","_this2","_this$state7","map","react__WEBPACK_IMPORTED_MODULE_10___default","style","onClick","handleSelectItemClick","role","tabIndex","onKeyDown","ref","node","_this3","onMouseUp","src","Cross","alt","_this4","_this$props7","isDisableTyping","component","type","placeholder","autoComplete","onChange","disabled","redux_form__WEBPACK_IMPORTED_MODULE_12__","_this5","_this$state8","_this$props8","zIndex","maxWidth","actualListheight","dropDownOpenStyle","arrowStyle","listStyle","isErrorStyle","multipleStyle","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_16__","formParent","concat","onBlur","onFocus","minHeight","MagnifyGlass","paddingTop","paddingBottom","renderMultipleSelectedElements","onKeyPress","Arrow","react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_15__","listContainer","connect","ownProps","getFormValues","dispatch","change"],"mappings":"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","file":"static/js/6.ae6bc759.chunk.js","sourcesContent":["/**\n * FormInputWrapper.js\n * Custom form dropdown menu with input\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './FormInputWrapper.scss';\n\n/**\n * Custom Form Dropdown class\n */\nclass FormInputWrapper extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.errorString !== nextProps.errorString) {\n      return {\n        errorString: nextProps.errorString,\n        refValue: nextProps.refValue,\n      };\n    }\n\n    if (nextProps.validateForm && prevState.errorString && prevState.refValue !== nextProps.refValue) {\n      nextProps.validateForm();\n      return {\n        errorString: null,\n      };\n    }\n    return null;\n  }\n  /**\n   * Constructor\n   *\n   * @param {object} props Component props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorString: null,\n    };\n\n    this.setErrorString = this.setErrorString.bind(this);\n    this.clearErrorString = this.clearErrorString.bind(this);\n  }\n\n  setErrorString(message) {\n    this.setState({\n      errorString: message,\n    });\n  }\n\n  clearErrorString() {\n    this.setState({\n      errorString: null,\n    });\n  }\n\n  render() {\n    const {\n      errorString,\n    } = this.state;\n\n    const {\n      desc,\n      extraInfo,\n    } = this.props;\n\n    return (\n      <div className=\"input-wrapper-main input-wrapper-error\">\n        {\n          desc !== null ?\n            <p className=\"input-wrapper-desc\">{desc}</p>\n          :\n            null\n        }\n        {this.props.children}\n        {\n          extraInfo !== null ?\n            <div className=\"extra-info-container\">\n              {extraInfo}\n            </div>\n          :\n            null\n        }\n        {\n          errorString !== null ?\n            <p className=\"input-wrapper-error-text\">\n              {errorString}\n            </p>\n          :\n            null\n        }\n      </div>\n    );\n  }\n}\n\nFormInputWrapper.defaultProps = {\n  desc: null,\n  extraInfo: null,\n};\n\n\nFormInputWrapper.propTypes = {\n  desc: PropTypes.string,\n  extraInfo: PropTypes.object,\n};\n\nexport default FormInputWrapper;\n","module.exports = __webpack_public_path__ + \"static/media/magnifyGlass.eedb8132.svg\";","/**\n * DropDown.js\n * Custom form dropdown menu with input\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, getFormValues, change } from 'redux-form';\nimport PropTypes from 'prop-types';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\n\nimport Arrow from '../../../assets/images/forms/arrow.svg';\nimport Cross from '../../../assets/images/forms/cross.svg';\nimport MagnifyGlass from '../../../assets/images/forms/magnifyGlass.svg';\n\nimport './DropDown.scss';\nimport './MultipleSelectDropDown.scss';\n\n// How many items to display\nconst maxItemsDisplay = 5;\n// Height for medium dropdown\nconst mediumHeight = 60;\n// Height for big dropdown\nconst bigHeight = 72;\n// Padding for when multiple items overflow\nconst extraPaddingForMultiple = 5;\n// Error text to display when error\nconst resultNullString = 'No results found';\n\n/**\n * Custom Form Dropdown class\n */\nclass DropDownV2 extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      dropList,\n      numItemsDisplay,\n      size,\n    } = nextProps;\n\n    if (dropList !== prevState.initialListItems) {\n      const height = size === 'big' ? bigHeight : mediumHeight;\n      const numItems = numItemsDisplay || maxItemsDisplay;\n      const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\n\n      return {\n        initialListItems: dropList,\n        listItems: dropList,\n        maxheight,\n        listHeight: maxheight,\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Constructor\n   *\n   * @param {object} props Component props\n   */\n  constructor(props) {\n    super(props);\n\n    // dropList - The passed down dropdown list items\n    // placeholderString - Placeholder string for input\n    // size - Size of this control\n    // numItemsDisplay - Max items to display on view\n    const {\n      dropList,\n      placeholderString,\n      size,\n      numItemsDisplay,\n    } = this.props;\n\n    // Get the control height\n    const height = size === 'big' ? bigHeight : mediumHeight;\n    // Get number of items to display\n    const numItems = numItemsDisplay || maxItemsDisplay;\n    // Get the max height of list\n    const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\n    // isOpened - Whether dropdown is opened\n    // isError - Whether there is input error\n    // listItems - The actual dropdown list\n    // selectedString - The selected item string\n    // height - Preferred Control height\n    // numItemsDisplay - How many items to display\n    // maxheight - Max height of the list\n    // listHeight - Height of the list. (Items count + control)\n    // multipleSelectedElements - Array of multiple selected items\n    // listElementsCounter - Up down selection position\n    // clientHeight - Actual height of the control\n    this.state = {\n      isOpened: false,\n      listItems: dropList,\n      selectedString: placeholderString,\n      height,\n      numItemsDisplay: numItems,\n      maxheight,\n      listHeight: maxheight,\n      multipleSelectedElements: null,\n      listElementsCounter: -1,\n      clientHeight: height,\n      extraPadding: 0,\n    };\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.renderListItems = this.renderListItems.bind(this);\n    this.renderTextInput = this.renderTextInput.bind(this);\n    this.handleSelectClick = this.handleSelectClick.bind(this);\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n    this.handleSetMultipleSelectedItem = this.handleSetMultipleSelectedItem.bind(this);\n    this.handleDestroySelected = this.handleDestroySelected.bind(this);\n    this.handleInputKeyPress = this.handleInputKeyPress.bind(this);\n    this.handleItemKeyPress = this.handleItemKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleExit = this.handleExit.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n  }\n\n  /**\n   * Lifecycle Method - componentDidMount\n   */\n  componentDidMount() {\n    // Add Handler to handle click outside of screen\n    document.addEventListener('mousedown', this.handleClickOutside);\n    // Update control height on resize in case it squeezes down\n    window.addEventListener('resize', this.updateDimensions);\n    // Update for the first time\n    this.updateDimensions();\n\n    const { formStore, name, overrideValue } = this.props;\n    if (formStore && formStore[name]) {\n      const formValues = formStore[name];\n      if (formValues.constructor === Array) {\n        this.setState({\n          multipleSelectedElements: formValues,\n        });\n      }\n    }\n\n    if (overrideValue) {\n      this.handleChange(overrideValue);\n    }\n  }\n\n\n  /**\n   * Lifecycle Method - shouldComponentUpdate\n   *\n   * @param {object} nextProps\n   * @param {object} nextState\n   */\n  shouldComponentUpdate(nextProps) {\n    /* const {\n      isOpened,\n      selectedString,\n      multipleSelectedElements,\n      clientHeight,\n      extraPadding,\n    } = this.state;\n\n    const { formStore, name, isMultiple, overrideValue } = this.props; */\n    const { overrideValue } = this.props;\n\n    if (overrideValue !== nextProps.overrideValue) {\n      this.handleChange(nextProps.overrideValue);\n    }\n\n    return true;\n    // Render only when open state or selected string is different\n    /* return (\n      isOpened !== nextState.isOpened ||\n      selectedString !== nextState.selectedString ||\n      multipleSelectedElements !== nextState.multipleSelectedElements ||\n      clientHeight !== nextState.clientHeight ||\n      extraPadding !== nextState.extraPadding ||\n      !isMultiple && formStore && nextProps.formStore[name] && nextProps.formStore[name]\n    ); */\n  }\n\n  /**\n   * Lifecycle Method - componentDidUpdate\n   */\n  componentDidUpdate() {\n    const { multipleSelectedElements } = this.state;\n    const { formStore, name } = this.props;\n    const isForm = formStore && formStore[name];\n\n    const isElements = !_.isEmpty(multipleSelectedElements);\n    if (isForm) {\n      const formValues = formStore[name];\n\n      if (!isElements || (isElements && !_.isEqual(formValues, multipleSelectedElements))) {\n        if (formValues.constructor === Array) {\n          this.setState({\n            multipleSelectedElements: [...formValues],\n          });\n        }\n      }\n    }\n\n    if (isElements && !isForm) {\n      this.setState({\n        multipleSelectedElements: null,\n      });\n    }\n    // Update control height if necessary, since the\n    // height may change after render\n    this.updateDimensions();\n    /* const { isOpened } = this.state;\n    if (isOpened && !prevState.isOpened) {\n      setTimeout(() => {\n        const bodyRect = document.body.getBoundingClientRect();\n        const elemRect = this.wrapperRef.getBoundingClientRect();\n        const offset = elemRect.top - bodyRect.top;\n        window.scrollTo(0, offset);\n      }, 300);\n    } */\n  }\n\n  /**\n   * Lifecycle Method - componentWillUnmount\n   */\n  componentWillUnmount() {\n    // Remove Handler to handle click outside of screen\n    document.removeEventListener('mousedown', this.handleClickOutside);\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  /**\n   * Get client height of the selection container\n   * to determine the height of the whole control.\n   * (For multiple only)\n   *\n   * @param {object} event\n   */\n  updateDimensions() {\n    const { isMultiple } = this.props;\n\n    // Only multiple will expand\n    if (!isMultiple) {\n      return;\n    }\n\n    const {\n      clientHeight,\n      height,\n      extraPadding,\n    } = this.state;\n\n    // if client height is not same as DOM, update with padding if expanded\n    if (clientHeight !== this.selectedContainer.clientHeight) {\n      this.setState({\n        clientHeight: this.selectedContainer.clientHeight,\n        extraPadding: this.selectedContainer.clientHeight - 2 * extraPadding > height ? extraPaddingForMultiple : 0,\n      });\n    }\n  }\n\n  handleChange(value) {\n    const {\n      name,\n      form,\n      formChange,\n      notForm,\n      valueChangeCallback,\n    } = this.props;\n\n    if (notForm) {\n      if (valueChangeCallback) {\n        valueChangeCallback(value);\n      }\n      this.inputField.value = value;\n      return;\n    }\n\n    formChange(form, name, value);\n  }\n\n  /**\n   * End selection if click on outside\n   *\n   * @param {object} event\n   */\n  handleClickOutside(event) {\n    const { isOpened } = this.state;\n\n    // If clicked outside, go to exit\n    if (\n      isOpened &&\n      this.wrapperRef &&\n      !this.wrapperRef.contains(event.target)\n    ) {\n      // Close it\n      this.setState({\n        isOpened: false,\n      });\n\n      // Unset from focus\n      this.isFromFocus = false;\n    }\n  }\n\n  /**\n   * Handle on enter key\n   *\n   * @param {object} event\n   */\n  handleInputKeyPress(event) {\n    const {\n      isOpened,\n      listElementsCounter,\n    } = this.state;\n\n    // If pressed on enter, go to exit\n    if (event.key === 'Enter') {\n      this.handleExit();\n      event.preventDefault();\n      return;\n    }\n\n    // Press down arrow from input\n    if (event.key === 'ArrowDown') {\n      if (isOpened) {\n        if (listElementsCounter === -1) {\n          event.preventDefault();\n        }\n        this.handleItemKeyPress(event);\n      } else {\n        this.setState({\n          isOpened: true,\n        });\n      }\n    }\n  }\n\n  /**\n   * Key press on list items\n   *\n   * @param {object} event\n   */\n  handleItemKeyPress(event) {\n    const {\n      listElementsCounter,\n    } = this.state;\n\n    let index = listElementsCounter;\n\n    // If click enter on list item\n    if (event.key === 'Enter') {\n      // Focus input field\n      // this.inputField.focus();\n      // Handle exit with the item value\n      this.handleExit(this.listElements[index].getAttribute('value'));\n      event.preventDefault();\n      return;\n    }\n\n    // Navigate list with up down arrow\n    if (event.key === 'ArrowDown') {\n      index = listElementsCounter + 1;\n    } else if (event.key === 'ArrowUp') {\n      index = listElementsCounter - 1;\n    }\n\n    // Cap index within list\n    index = Math.max(0, Math.min(index, this.listElements.length - 1));\n    // Focus on the next item\n    this.listElements[index].focus();\n\n    // If index changed, update state\n    if (index !== listElementsCounter) {\n      this.setState({\n        listElementsCounter: index,\n      });\n    }\n\n    event.stopPropagation();\n  }\n\n  /**\n   * Handle toggling of dropdown list\n   *\n   * @param {bool} isOpenOnly - Only can open\n   */\n  handleSelectClick(isOpenOnly = false) {\n    const {\n      isOpened,\n      selectedString,\n      maxheight,\n      multipleSelectedElements,\n    } = this.state;\n\n    const {\n      dropList,\n      isMultiple,\n    } = this.props;\n\n    // If this frame is not from focus\n    if (!this.isFromFocus) {\n      // Set open state\n      if (!isOpenOnly || (isOpenOnly && !isOpened)) {\n        this.setState({\n          isOpened: !isOpened,\n        });\n      }\n\n      // If previously invalid, reset list\n      if (!selectedString || selectedString === resultNullString) {\n        this.setState({\n          listItems: dropList,\n          listHeight: maxheight,\n          listElementsCounter: -1,\n        });\n\n        if (!isMultiple || (isMultiple && _.isEmpty(multipleSelectedElements))) {\n          this.handleChange(null);\n        }\n      }\n    }\n\n    // Unlock from focus\n    this.isFromFocus = false;\n  }\n\n  /**\n   * Handles selection of dropdown item\n   *\n   * @param {object} event - Click event\n   * @param {string} item - Input string\n   */\n  handleSelectItemClick(event, item) {\n    // If click on null item return\n    if (item === resultNullString) {\n      return;\n    }\n\n    const { dropList } = this.props;\n\n    const {\n      isMultiple,\n    } = this.props;\n\n    // Reset drop list items to all, set selected string,\n    // and reset any errors\n    this.setState({\n      listItems: dropList,\n    });\n\n    // this.formParent.clearErrorString();\n\n    if (isMultiple) {\n      // If multiple dropdown, reset selected string\n      this.setState({\n        selectedString: '',\n      });\n\n      // Set input field text to empty\n      this.inputField.value = '';\n      // Refocus input bar\n      this.inputField.focus();\n\n      // Set multiple selected item\n      this.handleSetMultipleSelectedItem(item);\n    } else {\n      this.setState({\n        selectedString: item,\n      });\n\n      // Toggle the dropdown menu\n      this.handleSelectClick();\n\n      // Update redux state\n      this.handleChange(item);\n\n      // Close dropdown\n      this.setState({\n        isOpened: false,\n      });\n    }\n\n    event.stopPropagation();\n  }\n\n  /**\n   * Selection of multi select dropdown\n   *\n   * @param {string} item\n   */\n  handleSetMultipleSelectedItem(item) {\n    const { multipleSelectedElements, height } = this.state;\n\n    const newArr = multipleSelectedElements || [];\n\n    // If item does not exists in the selected list\n    if (newArr.indexOf(item) < 0) {\n      // Add item to list\n      newArr.push(item);\n\n      // Change state\n      this.setState({\n        multipleSelectedElements: newArr,\n        clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\n        isOpened: false,\n      });\n\n      // Update redux store\n      this.handleChange(newArr);\n    }\n  }\n\n  /**\n   * Destroys multi selected item\n   *\n   * @param {string} item\n   */\n  handleDestroySelected(item) {\n    const { height } = this.state;\n\n    const { multipleSelectedElements } = this.state;\n    // Duplicate clean copy\n    let newArr = multipleSelectedElements.slice();\n    // Delete chosen item\n    const index = newArr.indexOf(item);\n    newArr.splice(index, 1);\n    // Set null if empty\n    newArr = newArr.length === 0 ? null : newArr;\n\n    // Update state\n    this.setState({\n      multipleSelectedElements: newArr,\n      clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\n    });\n\n    // Update redux state\n    this.handleChange(newArr);\n    this.isFromFocus = false;\n  }\n\n  /**\n   * Handles on input changes\n   *\n   * @param {object} event\n   */\n  async handleOnInputChange(event) {\n    // Get current input value\n    const { value } = event.target;\n\n    const { dropList } = this.props;\n    const { height, numItemsDisplay } = this.state;\n\n    // Attempt to match value to list\n    const result = _.filter(\n      dropList,\n      item => item.toString().toUpperCase().indexOf(value.toString().toUpperCase()) === 0,\n    );\n\n    // Get length of new list, min 1 which is error string\n    const length = result.length ? result.length : 1;\n\n    // Set new list items, height of dropdown list,\n    // Force open list on type, and set selected string to value\n    this.setState({\n      listItems: result.length ? result : [resultNullString],\n      listHeight: (_.min([length, numItemsDisplay]) + 1) * height,\n      isOpened: true,\n      selectedString: value,\n      listElementsCounter: -1,\n    });\n  }\n\n  /**\n   * Handle Blur event\n   *\n   * @param {object} event\n   */\n  handleBlur(event) {\n    // Check if focus event contains children\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\n\n    // If outside of children\n    if (!isChildren) {\n      // Close dropdown\n      this.setState({\n        isOpened: false,\n      });\n      // Handle exit case\n      this.handleExit();\n      this.isFromFocus = false;\n    }\n  }\n\n  /**\n   * Handle Focus event\n   *\n   * @param {object} event\n   */\n  handleFocus(event) {\n    const { isOpened } = this.state;\n\n    // Check if focus event contains children\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\n    // If not from children\n    if (!isChildren) {\n      // Open dropdown\n      if (!isOpened) {\n        this.handleSelectClick(true);\n        // Prevent double click\n        this.isFromFocus = true;\n      }\n    }\n  }\n\n  /**\n   * Handle exit selection of entered input\n   *\n   * @param {string} inputString - From selection\n   */\n  handleExit(inputString = null) {\n    const {\n      selectedString,\n      listItems,\n    } = this.state;\n\n    const {\n      placeholderString,\n      dropList,\n      isMultiple,\n    } = this.props;\n\n    // Result string if match original list\n    let resultString = null;\n    // If input causes an error\n    let isError = false;\n    // The string to use\n    const finalString = inputString !== null ? inputString : selectedString;\n    // If possible valid input\n    if (\n      finalString &&\n      finalString !== placeholderString &&\n      finalString !== ''\n    ) {\n      // Attempt to match finalString to original list\n      listItems.some((obj) => {\n        const result = obj.toString().toLowerCase() === finalString.toString().toLowerCase();\n        if (result) {\n          resultString = obj;\n        }\n\n        return result;\n      });\n\n      // Check error if no match\n      isError = !resultString;\n      // Set result string to match value or error value\n      resultString = isError ? null : resultString;\n\n      if (isMultiple) {\n        if (!isError) {\n          this.handleSetMultipleSelectedItem(resultString);\n        }\n\n        this.inputField.value = '';\n      } else {\n        // Update redux value\n        this.handleChange(resultString);\n\n        this.setState({\n          isOpened: false,\n        });\n      }\n    }\n\n    // If not error, reset list to list all,\n    // Set selected string and error if possible\n    // and close the list\n    this.setState({\n      listItems: isError ? listItems : dropList,\n      selectedString: resultString,\n    });\n\n    if (isError) {\n      // this.formParent.setErrorString(resultNullString);\n    } else {\n      // this.formParent.clearErrorString();\n    }\n  }\n\n  /**\n   * Renders the dropdown list items\n   */\n  renderListItems() {\n    const { listItems, height } = this.state;\n    this.listElements = [];\n\n    const result = _.map(listItems, item => (\n      <li key={item}>\n        <div\n          className=\"list-item text-style\"\n          style={{ height }}\n          onClick={event => this.handleSelectItemClick(event, item)}\n          role=\"button\"\n          tabIndex={-1}\n          value={item}\n          onKeyDown={(event) => { this.handleItemKeyPress(event); }}\n          ref={(node) => { if (node !== null) this.listElements.push(node); }}\n        >\n          <p>{item}</p>\n        </div>\n      </li>\n    ));\n\n    return result;\n  }\n\n  /**\n   * Render the multiple selected elements in the input container\n   */\n  renderMultipleSelectedElements() {\n    const { multipleSelectedElements } = this.state;\n\n    return _.map(multipleSelectedElements, item => (\n      <div className=\"selected-item-container\" key={item}>\n        <div className=\"selected-item\">\n          <p>{item}</p>\n          <button\n            className=\"selected-item-destroy\"\n            onMouseUp={() => this.handleDestroySelected(item)}\n            tabIndex={-1}\n          >\n            <img src={Cross} alt=\"cross.svg\" />\n          </button>\n        </div>\n      </div>\n    ));\n  }\n\n  renderTextInput() {\n    const {\n      isMultiple,\n      isDisableTyping,\n      placeholderString,\n      name,\n      notForm,\n    } = this.props;\n\n    if (isMultiple || notForm) {\n      return (\n        isDisableTyping ?\n          <input\n            component=\"input\"\n            type=\"text\"\n            placeholder={placeholderString}\n            autoComplete=\"off\"\n            ref={node => (this.inputField = node)}\n            onChange={event => this.handleOnInputChange(event)}\n            onKeyDown={event => this.handleInputKeyPress(event)}\n            onClick={() => this.handleSelectClick(true)}\n            tabIndex={0}\n            disabled\n          />\n          :\n          <input\n            component=\"input\"\n            type=\"text\"\n            placeholder={placeholderString}\n            autoComplete=\"off\"\n            ref={node => (this.inputField = node)}\n            onChange={event => this.handleOnInputChange(event)}\n            onKeyDown={event => this.handleInputKeyPress(event)}\n            onClick={() => this.handleSelectClick(true)}\n            tabIndex={0}\n          />\n      );\n    }\n\n    return (\n      isDisableTyping ?\n        <Field\n          name={name}\n          component=\"input\"\n          type=\"text\"\n          placeholder={placeholderString}\n          autoComplete=\"off\"\n          ref={node => (this.inputField = node)}\n          onChange={event => this.handleOnInputChange(event)}\n          onKeyDown={event => this.handleInputKeyPress(event)}\n          onClick={() => this.handleSelectClick(true)}\n          tabIndex={0}\n          disabled\n        />\n        :\n        <Field\n          name={name}\n          component=\"input\"\n          type=\"text\"\n          placeholder={placeholderString}\n          autoComplete=\"off\"\n          ref={node => (this.inputField = node)}\n          onChange={event => this.handleOnInputChange(event)}\n          onKeyDown={event => this.handleInputKeyPress(event)}\n          onClick={() => this.handleSelectClick(true)}\n          tabIndex={0}\n        />\n    );\n  }\n\n  /**\n   * Render component\n   */\n  render() {\n    const {\n      isOpened,\n      listHeight,\n      height,\n      clientHeight,\n      extraPadding,\n    } = this.state;\n\n    if (height && listHeight) {\n      const {\n        zIndex,\n        maxWidth,\n        isMultiple,\n        desc,\n        extraInfo,\n        errorString,\n        formStore,\n        name,\n        validateForm,\n      } = this.props;\n\n      // Actual height of the whole control\n      const actualheight = isOpened ? listHeight : height;\n      // Actual height of only the list\n      const actualListheight = actualheight - height;\n\n      // Dynamic styles\n      const dropDownOpenStyle = isOpened ? 'dropdown-container-opened' : 'dropdown-container-closed';\n      const arrowStyle = isOpened ? 'angle-up' : 'angle-down';\n      const listStyle = isOpened ? 'list-opened' : 'list-closed';\n      const isErrorStyle = errorString ? 'error' : '';\n      const multipleStyle = isMultiple ? 'multi-drop' : '';\n      const refValue = formStore ? formStore[name] : null;\n\n      return (\n        <FormInputWrapper\n          desc={desc}\n          ref={node => (this.formParent = node)}\n          extraInfo={extraInfo}\n          errorString={errorString}\n          refValue={refValue}\n          validateForm={validateForm}\n        >\n          <div\n            className={`dropdown ${multipleStyle}`}\n            style={{ height: clientHeight, zIndex, maxWidth }}\n            ref={node => (this.wrapperRef = node)}\n            onBlur={event => this.handleBlur(event)}\n            onFocus={event => this.handleFocus(event)}\n          >\n            <div\n              className={`dropdown-container ${dropDownOpenStyle} ${isErrorStyle}`}\n            >\n              <div\n                className=\"selected-container\"\n                onKeyDown={event => this.handleInputKeyPress(event)}\n                role=\"button\"\n                style={{ minHeight: height }}\n                tabIndex={-1}\n                ref={node => (this.selectedContainer = node)}\n              >\n                {\n                  isMultiple ?\n                    <div className=\"mag-container\" style={{ minHeight: height }}>\n                      <img\n                        className=\"mag-icon\"\n                        src={MagnifyGlass}\n                        alt=\"magnifyGlass.svg\"\n                      />\n                    </div>\n                  :\n                    null\n                }\n                <div\n                  className=\"selected-items-container\"\n                  style={{ paddingTop: extraPadding, paddingBottom: extraPadding }}\n                >\n                  {this.renderMultipleSelectedElements()}\n                  <div className=\"selected-text selected-text-multi text-style\">\n                    {this.renderTextInput()}\n                  </div>\n                </div>\n                <div\n                  className=\"selected-arrow\"\n                  onClick={() => this.handleSelectClick()}\n                  onKeyPress={() => {}}\n                  role=\"button\"\n                  tabIndex={-1}\n                >\n                  <img\n                    src={Arrow}\n                    alt=\"arrow.svg\"\n                    className={`selected-arrow-style ${arrowStyle}`}\n                  />\n                </div>\n              </div>\n              <Scrollbars\n                className={`list-container ${listStyle}`}\n                style={{\n                  minHeight: actualListheight,\n                }}\n                ref={node => this.listContainer = node}\n                tabIndex={-1}\n              >\n                {\n                  isOpened ?\n                    this.renderListItems()\n                  :\n                    null\n                }\n              </Scrollbars>\n            </div>\n          </div>\n        </FormInputWrapper>\n      );\n    }\n\n    return null;\n  }\n}\n\nDropDownV2.defaultProps = {\n  maxWidth: '100%',\n  numItemsDisplay: maxItemsDisplay,\n  isMultiple: false,\n  desc: null,\n  isDisableTyping: false,\n  extraInfo: null,\n  notForm: false,\n  overrideValue: null,\n  errorString: null,\n  dropList: null,\n  formStore: null,\n  valueChangeCallback: null,\n  name: null,\n  form: null,\n  validateForm: null,\n};\n\nDropDownV2.propTypes = {\n  formStore: PropTypes.object,\n  dropList: PropTypes.array,\n  placeholderString: PropTypes.string.isRequired,\n  maxWidth: PropTypes.string,\n  size: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  zIndex: PropTypes.number.isRequired,\n  numItemsDisplay: PropTypes.number,\n  formChange: PropTypes.func.isRequired,\n  isMultiple: PropTypes.bool,\n  desc: PropTypes.string,\n  isDisableTyping: PropTypes.bool,\n  extraInfo: PropTypes.object,\n  notForm: PropTypes.bool,\n  overrideValue: PropTypes.string,\n  errorString: PropTypes.string,\n  valueChangeCallback: PropTypes.func,\n  form: PropTypes.string,\n  validateForm: PropTypes.func,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  formStore: (getFormValues(ownProps.form)(state)),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  formChange: (form, key, value) => {\n    dispatch(change(form, key, value));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DropDownV2);\n","module.exports = __webpack_public_path__ + \"static/media/cross.3995dd26.svg\";"],"sourceRoot":""}