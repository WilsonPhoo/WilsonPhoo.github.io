{"version":3,"sources":["assets/images/Endowment/policypal-endowment-insurance-1.svg","assets/images/Endowment/policypal-endowment-insurance-2.svg","assets/images/Endowment/policypal-endowment-insurance-3.svg","components/Endowment/EndowmentEditDetail.js","components/Endowment/EndowmentMain.js","containers/Endowment/EndowmentMainContainer.js","components/Endowment/EndowmentChoosePlan.js","containers/Endowment/EndowmentChoosePlanContainer.js","components/Endowment/EndowmentDetail.js","containers/Endowment/EndowmentDetailContainer.js","containers/Endowment/EndowmentRouteContainer.js","assets/images/MainFormIcons/Avatar.svg","components/Templates/MultiCompareView/MultiCompareInner.js","components/Templates/MultiCompareView/MultiCompareView.js","assets/images/MainFormIcons/Dollar.svg","assets/images/MainFormIcons/Umbrella.svg"],"names":["module","exports","__webpack_require__","p","EndowmentEditDetail","props","_this","Object","classCallCheck","this","endowmentFields","possibleConstructorReturn","getPrototypeOf","call","state","errorStringData","birthDate","data","remapFormFields","form_fields","handleSubmit","bind","assertThisInitialized","handleCloseEdit","handleRevert","validateForm","nextProps","prevState","storeForm","birth_date","_this$props","setCloseCallBack","originalValues","date","age","getAge","e","errorResult","type","start","slashedStringDateToDate","min_date","end","max_date","smoker","options","coverage_amount","premium_term","setState","_this2","isFirstValidate","arguments","length","undefined","_this$props2","closePopUp","setInsurFormState","setSubmit","submitCallback","history","isEmptyResult","_","isEmpty","dateReValidate","error","gaEvent","event_category","event_label","storeStringToDate","ampTag","gender","premium","term","FORMSTATES","CHOOSEPLAN","index","push","concat","path","_this3","_this$props3","change","resetForm","keys","forEach","key","_this4","_this$state","_this$props4","form","ageStyle","react_default","a","createElement","reactstrap_es","className","xs","sm","DatePickerV2","name","size","zIndex","desc","display_name","startDate","endDate","currDate","default_date","errorString","_this5","_this$state2","_this$props5","noGutters","src","Avatar","alt","Selection","noEmptyTextSelection","map","option","description","sizeInSM","renderBirthDate","style","marginTop","Dollar","Slider","hideWidth","inputList","displayList","simplifyCostArray","suffix","Umbrella","DropDownV2","placeholderString","dropList","_this6","_this$props6","isPopUp","onSubmit","renderFields","Button","variant","width","height","onClick","RestrictionsPopup","ref","node","resPopup","Component","defaultProps","withRouter","reduxForm","destroyOnUnmount","connect","getFormValues","isRevert","editForm","dispatch","reset","setInsuranceFormState","invokeSubmit","setRestrictionPopup","EndowmentMain","endowmentPromoGiveAway","FormLanding","img1","Endowment1","img2","Endowment2","img3","Endowment3","imgAlt","promo","react","Endowment_EndowmentEditDetail","EndowmentMainContainer","loading","clearData","getEndowmentFields","setFormState","MAIN","window","scrollTo","gaTag","page_title","page_path","location","search","prevProps","loadingEnd","Endowment_EndowmentMain","endowment","insurance","promoGiveaways","callBack","errorMsg","time","setLoading","clearLoading","clearEndowmentData","EndowmentChoosePlan","selectedPlanData","partner","info","insurer_slug","console","log","message","MultiCompareView","assign","category","valuesToListen","value","extra","editDetail","buttonDesc","forceFixedOnDesktop","trackingTags","default","getAmpTags","EndowmentChoosePlanContainer","endowmentForm","getPlans","getInsurersList","plansData","validInsurersList","Endowment_EndowmentChoosePlan","mainForm","parseForm","parseEndowmentForm","setSelectedPlanData","DETAILFORM","loadingFailBackState","goBack","parsedForm","getEndowmentPlans","getValidInsurersList","EndowmentDetail","sessionId","errorArray","setTimeout","checkoutComplete","openCheckoutComplete","checkOutOthers","popup","openPopupWithJSX","getSynergyJSX","document","body","scrollHeight","planDetails","isLoggedIn","piggyCallback","changePlan","DetailForm","checkoutButtonDesc","TextInput","email","Date","mobile_number","PopupWithText","showCancelButton","CheckoutComplete","isQuoteOnly","isSellLeads","wrappedComponentRef","constants","EndowmentDetailContainer","profileValues","selectedData","logo","Logos","others","logoDesc","planName","planTotal","netPrice","policyInfo","planType","net_price","toFixed","insurer_name","product_name","Endowment_EndowmentDetail","userDetails","getAnonymousSession","params","propsFromState","propsFromDispatch","ownProps","objectSpread","detailForm","getSessionParams","EndowmentRouteContainer","formIndex","isInitialLoad","resetStoreForm","replace","resetCompare","resetInsuranceForm","getPromoGiveaways","setInitialFormState","renderStepProgress","renderLifeForms","changeUserDetails","isMounted","formState","match","routeResult","routeHandler","isEqual","changeForm","surname","firstname","firstName","dateOfBirth","contact","StepProgressBar","maxWidth","stateList","stateDescriptions","main","charged","Endowment_EndowmentChoosePlanContainer","Endowment_EndowmentDetailContainer","Endowment_EndowmentMainContainer","meta","isProduction","Helmet","content","RefreshTimer","refresher","invokeNewTimer","resultToMatch","MultiCompareInner","tabIndex","currentTab","tabs","policyTypes","handleTabClick","renderTabs","setPlanType","lowerCase","nextState","selectedIndex","initialIndex","categoryTab","wrappedInstance","isCameFromBackButton","currIncomingIndex","tabIndexToUse","goToIndex","setSelectedIndex","isInitial","_this$state3","oldPolicyTypes","planImages","policyTypesToUse","reduce","result","findIndex","theIndex","image","startCase","img","tabInfo","currentTabIndex","tab","newTab","_this$state4","scrollPopUpCallback","tabStyle","TabView","isDataFadeOnly","isDisableDropdown","big","CompareView","notAccordion","productChangable","ChangeInitialFormData","headerValue","conditions","Enquiry","compare","defaultInsurers","selectedInsurers","currentInsurers","parsedData","parseData","trip_type","parsedParams","setSelectedInsurers","getNewData","onInsurerClick","newDefaultInsurers","plan","slice","isLoading","hoveredIndex","insurer","insurerSlug","incomingInsurers","MultiCompareView_MultiCompareInner","mainMsg","array"],"mappings":"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","file":"static/js/endowment.56b61104.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/policypal-endowment-insurance-1.7e202843.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-endowment-insurance-2.f1250d7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-endowment-insurance-3.4ae59f38.svg\";","/**\n * EndowmentEditDetail.js\n * The edit detail view for Endowment\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, getFormValues, reset } from 'redux-form';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'reactstrap';\n\nimport Avatar from 'assets/images/MainFormIcons/Avatar.svg';\nimport Dollar from 'assets/images/MainFormIcons/Dollar.svg';\nimport Umbrella from 'assets/images/MainFormIcons/Umbrella.svg';\n\nimport Button from '../FormsV3/Button/Button';\nimport Selection from '../Forms/Selection/Selection';\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\nimport Slider from '../Forms/Slider/Slider';\nimport DropDownV2 from '../Forms/DropDown/DropDownV2';\n\nimport RestrictionsPopup from '../Templates/RestrictionsPopup/RestrictionsPopup';\n\nimport { invokeSubmit } from '../../actions/editFormActions';\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { setRestrictionPopup } from '../../actions/restrictionsActions';\nimport { validateForm, dateReValidate } from '../../lib/validators';\nimport { storeStringToDate, getAge, slashedStringDateToDate } from '../../lib/dateFunctions';\nimport { remapFormFields, simplifyCostArray } from '../../lib/helperFunctions';\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\n\nconst formName = 'endowment';\n\nclass EndowmentEditDetail extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { storeForm } = nextProps;\n    if (storeForm && storeForm.birth_date !== prevState.birthDate) {\n      return { birthDate: storeForm.birth_date };\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    const { endowmentFields } = this.props;\n\n    this.state = {\n      errorStringData: {},\n      birthDate: null,\n      data: remapFormFields(endowmentFields.form_fields),\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\n    this.handleRevert = this.handleRevert.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  componentDidMount() {\n    const { storeForm, setCloseCallBack } = this.props;\n    this.originalValues = storeForm;\n\n    if (setCloseCallBack) {\n      setCloseCallBack(this.handleRevert);\n    }\n  }\n\n  getAge(date) {\n    let age = '';\n    if (date && date !== -1) {\n      age = getAge(date);\n    }\n\n    return age;\n  }\n\n  validateForm(e) {\n    const { data } = this.state;\n\n    const fieldsToCheck = [\n      'gender',\n      'smoker',\n      'birth_date',\n      'coverage_amount',\n      'premium_term',\n    ];\n\n    const errorResult = validateForm(e, fieldsToCheck, {\n      birth_date: { type: 'DATE', start: slashedStringDateToDate(data.birth_date.min_date), end: slashedStringDateToDate(data.birth_date.max_date) },\n      smoker: { type: 'ARRAY', data: data.smoker.options },\n      coverage_amount: { type: 'ARRAY', data: data.coverage_amount.options },\n      premium_term: { type: 'ARRAY', data: data.premium_term.options },\n    });\n\n    this.setState({\n      errorStringData: errorResult,\n    });\n\n    return errorResult;\n  }\n\n  handleSubmit(e, isFirstValidate = true) {\n    // e.preventDefault();\n    // console.log(e);\n    const { birthDate } = this.state;\n    const {\n      closePopUp,\n      setInsurFormState,\n      setSubmit,\n      storeForm,\n      submitCallback,\n      history,\n    } = this.props;\n\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\n    const isEmptyResult = _.isEmpty(errorResult);\n\n    if (dateReValidate(\n      isEmptyResult,\n      isFirstValidate,\n      errorResult,\n      error => this.setState({ errorStringData: error }),\n      () => this.handleSubmit(storeForm, false),\n    )) {\n      return;\n    }\n\n    if (isEmptyResult) {\n      setSubmit();\n      this.originalValues = storeForm;\n\n      if (submitCallback) {\n        submitCallback();\n      } else {\n        gaEvent('Endowment - Get Quote', {\n          event_category: 'Endowment',\n          event_label: 'Button - Endowment - Get Quote',\n        });\n\n        const date = storeStringToDate(birthDate);\n        const age = this.getAge(date);\n        ampTag('EndGetQuoteA', {\n          gender: e.gender,\n          smoker: e.smoker,\n          age,\n          premium: e.coverage_amount,\n          term: e.premium_term,\n        });\n      }\n\n      setInsurFormState(FORMSTATES.CHOOSEPLAN.index);\n      history.push(`/endowment${FORMSTATES.CHOOSEPLAN.path}`);\n\n\n      if (closePopUp) {\n        closePopUp();\n      }\n    }\n  }\n\n  handleRevert() {\n    const { change, resetForm } = this.props;\n    resetForm();\n    Object.keys(this.originalValues).forEach((key) => {\n      change(key, this.originalValues[key]);\n    });\n  }\n\n  handleCloseEdit() {\n    const { closePopUp } = this.props;\n    closePopUp(this.handleRevert);\n  }\n\n  renderBirthDate() {\n    const { errorStringData, birthDate, data } = this.state;\n    const { form, change, storeForm } = this.props;\n\n    const date = storeStringToDate(birthDate);\n    const ageStyle = date ? 'active' : 'inactive';\n    const age = this.getAge(date);\n\n    return (\n      <Col className=\"birth-date-container\" xs={12} sm={10}>\n        <p className=\"age\">\n          <span className={ageStyle}>Age</span>\n          <span className=\"age-value\">{age}</span>\n        </p>\n        <DatePickerV2\n          form={form}\n          change={change}\n          name=\"birth_date\"\n          size=\"medium\"\n          zIndex={97}\n          desc={data.birth_date.display_name}\n          startDate={slashedStringDateToDate(data.birth_date.min_date)}\n          endDate={slashedStringDateToDate(data.birth_date.max_date)}\n          currDate={slashedStringDateToDate(data.birth_date.default_date)}\n          errorString={errorStringData.birth_date}\n          validateForm={() => this.validateForm(storeForm)}\n        />\n      </Col>\n    );\n  }\n\n  renderFields() {\n    const { errorStringData, data } = this.state;\n    const { form, change, storeForm } = this.props;\n\n    return (\n      <Row noGutters>\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\n          <img src={Avatar} alt=\"Avatar.svg\" />\n        </Col>\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\n          <Selection\n            form={form}\n            change={change}\n            name=\"gender\"\n            type=\"text-selection\"\n            noEmptyTextSelection\n            options={_.map(data.gender.options, option => ({\n              key: option,\n              description: option,\n            }))}\n            sizeInSM={6}\n            desc={data.gender.display_name}\n            zIndex={99}\n            errorString={errorStringData.gender}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\n          <Selection\n            form={form}\n            change={change}\n            name=\"smoker\"\n            type=\"text-selection\"\n            noEmptyTextSelection\n            options={_.map(data.smoker.options, option => ({\n              key: option,\n              description: option,\n            }))}\n            sizeInSM={6}\n            zIndex={98}\n            desc={data.smoker.display_name}\n            errorString={errorStringData.smoker}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\n        {this.renderBirthDate()}\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\n          <img style={{ marginTop: 32 }} src={Dollar} alt=\"Dollar.svg\" />\n        </Col>\n        <Col xs={12} sm={10}>\n          <Slider\n            form={form}\n            change={change}\n            name=\"coverage_amount\"\n            desc={data.coverage_amount.display_name}\n            zIndex={96}\n            hideWidth={576}\n            inputList={data.coverage_amount.options}\n            displayList={simplifyCostArray(data.coverage_amount.options)}\n            suffix=\"Annual Premium\"\n            errorString={errorStringData.coverage_amount}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\n          <img src={Umbrella} alt=\"Umbrella.svg\" />\n        </Col>\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\n          <DropDownV2\n            form={form}\n            change={change}\n            name=\"premium_term\"\n            placeholderString=\"Payment Term\"\n            dropList={data.premium_term.options}\n            size=\"medium\"\n            zIndex={95}\n            desc={data.premium_term.display_name}\n            errorString={errorStringData.premium_term}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n\n  render() {\n    const {\n      handleSubmit,\n      isPopUp,\n      form,\n    } = this.props;\n\n    return (\n      <div className=\"landing-form-container\">\n        {\n          isPopUp ?\n            <p className=\"edit-header\">Edit Endowment Insurance Details</p>\n          :\n            null\n        }\n        <form onSubmit={handleSubmit(this.handleSubmit)}>\n          <Row className=\"input-offset\" noGutters>\n            {this.renderFields()}\n          </Row>\n          <Row className=\"align-items-center button-container\" noGutters>\n            {\n              isPopUp ?\n                <Col className=\"justify-content-center button\" xs={12}>\n                  <Row noGutters>\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\n                      <Button\n                        className=\"button-left\"\n                        variant=\"medium-flat\"\n                        width={165}\n                        height={72}\n                        onClick={() => this.handleCloseEdit()}\n                      >\n                        <p>Cancel</p>\n                      </Button>\n                    </Col>\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\n                      <Button\n                        type=\"submit\"\n                        variant=\"medium-flat-green\"\n                        width={165}\n                        height={72}\n                      >\n                        <p>Save</p>\n                      </Button>\n                    </Col>\n                  </Row>\n                </Col>\n              :\n                <Col className=\"justify-content-center button\" xs={12}>\n                  <Button type=\"submit\" variant=\"medium-flat-green\" width={165} height={72}>\n                    <p>Get Quote</p>\n                  </Button>\n                </Col>\n            }\n          </Row>\n        </form>\n        <RestrictionsPopup ref={node => this.resPopup = node} />\n      </div>\n    );\n  }\n}\n\nEndowmentEditDetail.defaultProps = {\n  isPopUp: false,\n  setCloseCallBack: null,\n  storeForm: null,\n  closePopUp: null,\n  submitCallback: null,\n};\n\nEndowmentEditDetail.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  form: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired,\n  isPopUp: PropTypes.bool,\n  resetForm: PropTypes.func.isRequired,\n  closePopUp: PropTypes.func,\n  setInsurFormState: PropTypes.func.isRequired,\n  setSubmit: PropTypes.func.isRequired,\n  storeForm: PropTypes.object,\n  setCloseCallBack: PropTypes.func,\n  submitCallback: PropTypes.func,\n  endowmentFields: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  storeForm: getFormValues(formName)(state),\n  isRevert: state.editForm.isRevert,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  resetForm: () => {\n    dispatch(reset(formName));\n  },\n  setInsurFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n  setSubmit: () => {\n    dispatch(invokeSubmit());\n  },\n  setRestrictionPopup: (data) => {\n    dispatch(setRestrictionPopup(data));\n  },\n});\n\nexport default withRouter(reduxForm({\n  form: formName,\n  destroyOnUnmount: false,\n})(connect(mapStateToProps, mapDispatchToProps)(EndowmentEditDetail)));\n","/**\n * EndowmentMain.js\n * The Main landing form for Endowment\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Endowment1 from 'assets/images/Endowment/policypal-endowment-insurance-1.svg';\nimport Endowment2 from 'assets/images/Endowment/policypal-endowment-insurance-2.svg';\nimport Endowment3 from 'assets/images/Endowment/policypal-endowment-insurance-3.svg';\n\nimport EndowmentEditDetail from './EndowmentEditDetail';\nimport FormLanding from '../Templates/FormLanding/FormLanding';\n\nimport './Endowment.scss';\n\nclass EndowmentMain extends Component {\n  render() {\n    const { endowmentFields, endowmentPromoGiveAway } = this.props;\n\n    return (\n      <div className=\"endowment-container\">\n        <FormLanding\n          img1={Endowment1}\n          img2={Endowment2}\n          img3={Endowment3}\n          imgAlt=\"PolicyPal Endowment Insurance\"\n          promo={endowmentPromoGiveAway}\n          desc={\n            <Fragment>\n              <p>Get your Endowment Quotation</p>\n              <p>in minutes!</p>\n            </Fragment>\n          }\n        >\n          <EndowmentEditDetail\n            endowmentFields={endowmentFields}\n          />\n        </FormLanding>\n      </div>\n    );\n  }\n}\n\nEndowmentMain.defaultProps = {\n  endowmentPromoGiveAway: null,\n};\n\nEndowmentMain.propTypes = {\n  endowmentFields: PropTypes.object.isRequired,\n  endowmentPromoGiveAway: PropTypes.object,\n};\n\nexport default EndowmentMain;\n","/**\n * EndowmentMainContainer.js\n * Main Container for Endowment\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport EndowmentMain from '../../components/Endowment/EndowmentMain';\n\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { getEndowmentFields, clearEndowmentData } from '../../actions/endowmentActions';\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\n\nclass EndowmentMainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      loading,\n      endowmentFields,\n      history,\n      clearData,\n    } = this.props;\n\n    clearData();\n\n    if (!endowmentFields) {\n      loading(() => history.push('/'));\n      this.props.getEndowmentFields();\n    }\n  }\n\n  componentDidMount() {\n    const { setFormState, history } = this.props;\n    setFormState(FORMSTATES.MAIN.index);\n\n    window.scrollTo(0, 0);\n\n    gaTag({\n      page_title: 'Endowment',\n      page_path: `/endowment${history.location.search}`,\n    });\n    ampTag('EndFormS');\n  }\n\n  componentDidUpdate(prevProps) {\n    const { endowmentFields, loadingEnd } = this.props;\n    if (!prevProps.endowmentFields && endowmentFields) {\n      loadingEnd();\n    }\n  }\n\n  render() {\n    const { endowmentFields, endowmentPromoGiveAway } = this.props;\n\n    if (!endowmentFields) {\n      return null;\n    }\n\n    return (\n      <EndowmentMain\n        endowmentFields={endowmentFields}\n        endowmentPromoGiveAway={endowmentPromoGiveAway}\n      />\n    );\n  }\n}\n\nEndowmentMainContainer.defaultProps = {\n  endowmentFields: null,\n  endowmentPromoGiveAway: null,\n};\n\nEndowmentMainContainer.propTypes = {\n  endowmentFields: PropTypes.object,\n  getEndowmentFields: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n  loadingEnd: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  endowmentPromoGiveAway: PropTypes.object,\n  clearData: PropTypes.func.isRequired,\n  setFormState: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  endowmentFields: state.endowment.endowmentFields,\n  endowmentPromoGiveAway: state.insurance.promoGiveaways.endowment,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getEndowmentFields: () => {\n    dispatch(getEndowmentFields());\n  },\n  loading: (callBack, errorMsg, time) => {\n    dispatch(setLoading(callBack, errorMsg, time));\n  },\n  loadingEnd: () => {\n    dispatch(clearLoading());\n  },\n  clearData: () => {\n    dispatch(clearEndowmentData());\n  },\n  setFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EndowmentMainContainer));\n","/**\n * EndowmentChoosePlan.js\n * Choose Plan View for Endowment\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Import Insurer Logos\nimport MultiCompareView from '../Templates/MultiCompareView/MultiCompareView';\n\nimport EndowmentEditDetail from './EndowmentEditDetail';\n\nimport { ampTag } from '../../lib/tagFunctions';\n\nclass EndowmentChoosePlan extends Component {\n  getAmpTags(selectedPlanData) {\n    try {\n      return ({\n        partner: selectedPlanData.info.insurer_slug,\n      });\n    } catch (error) {\n      console.log(`Endowment choose plan Buy now Amp tag failed: ${error.message}`);\n    }\n\n    return {};\n  }\n\n  render() {\n    const { endowmentFields } = this.props;\n\n    return (\n      <MultiCompareView\n        {...this.props}\n        category=\"endowment\"\n        form=\"endowment\"\n        editForm={{\n          valuesToListen: [\n            { value: 'gender', desc: 'Gender' },\n            { value: 'smoker', desc: 'S.Status' },\n            { value: 'birth_date', desc: 'Age' },\n            { value: 'coverage_amount', desc: 'Sum', extra: 'cost_simplify' },\n            { value: 'premium_term', desc: 'For' },\n          ],\n          editDetail: <EndowmentEditDetail endowmentFields={endowmentFields} isPopUp />,\n        }}\n        buttonDesc=\"Select\"\n        forceFixedOnDesktop\n        trackingTags={{\n          default: (selectedPlanData) => {\n            ampTag('EndSelectA', this.getAmpTags(selectedPlanData, 'default'));\n          },\n        }}\n      />\n    );\n  }\n}\n\nEndowmentChoosePlan.defaultProps = {\n};\n\nEndowmentChoosePlan.propTypes = {\n  endowmentFields: PropTypes.object.isRequired,\n};\n\nexport default EndowmentChoosePlan;\n","/**\n * EndowmentChoosePlanContainer.js\n * Choose Plan Container for Endowment\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { getFormValues } from 'redux-form';\nimport PropTypes from 'prop-types';\n\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { parseEndowmentForm, getEndowmentPlans, getValidInsurersList, clearEndowmentData, setSelectedPlanData } from '../../actions/endowmentActions';\n\nimport EndowmentChoosePlan from '../../components/Endowment/EndowmentChoosePlan';\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\n\nclass EndowmentChoosePlanContainer extends Component {\n  componentDidMount() {\n    const { setFormState } = this.props;\n    setFormState(FORMSTATES.CHOOSEPLAN.index);\n    gaTag({\n      page_title: 'Endowment - Choose Plan',\n      page_path: '/endowment/chooseplan',\n    });\n    ampTag('EndResultsS');\n  }\n\n  render() {\n    const {\n      endowmentForm,\n      getPlans,\n      getInsurersList,\n      clearData,\n      setFormState,\n      plansData,\n      validInsurersList,\n      endowmentFields,\n      history,\n    } = this.props;\n\n    return (\n      <EndowmentChoosePlan\n        mainForm={endowmentForm}\n        endowmentFields={endowmentFields}\n        parseForm={parseEndowmentForm}\n        getPlans={getPlans}\n        getInsurersList={getInsurersList}\n        clearData={clearData}\n        setSelectedPlanData={this.props.setSelectedPlanData}\n        setFormState={() => {\n          setFormState(FORMSTATES.DETAILFORM.index);\n          history.push(`/endowment${FORMSTATES.DETAILFORM.path}`);\n        }}\n        loadingFailBackState={() => {\n          history.goBack();\n        }}\n        plansData={plansData}\n        validInsurersList={validInsurersList}\n      />\n    );\n  }\n}\n\nEndowmentChoosePlanContainer.defaultProps = {\n  plansData: null,\n  validInsurersList: null,\n};\n\nEndowmentChoosePlanContainer.propTypes = {\n  endowmentForm: PropTypes.object.isRequired,\n  getPlans: PropTypes.func.isRequired,\n  getInsurersList: PropTypes.func.isRequired,\n  clearData: PropTypes.func.isRequired,\n  setSelectedPlanData: PropTypes.func.isRequired,\n  setFormState: PropTypes.func.isRequired,\n  plansData: PropTypes.array,\n  validInsurersList: PropTypes.array,\n  endowmentFields: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  endowmentForm: getFormValues('endowment')(state),\n  endowmentFields: state.endowment.endowmentFields,\n  plansData: state.endowment.plansData,\n  validInsurersList: state.endowment.validInsurersList,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n  getPlans: (parsedForm) => {\n    dispatch(getEndowmentPlans(parsedForm));\n  },\n  getInsurersList: (parsedForm) => {\n    dispatch(getValidInsurersList(parsedForm));\n  },\n  clearData: () => {\n    dispatch(clearEndowmentData());\n  },\n  setSelectedPlanData: (data) => {\n    dispatch(setSelectedPlanData(data));\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EndowmentChoosePlanContainer));\n","/**\n * EndowmentDetail.js\n * The Detail view for Endowment\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, getFormValues } from 'redux-form';\nimport { Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n// Import Insurer Logos\nimport DetailForm from '../Templates/DetailForm/DetailForm';\n\nimport TextInput from '../Forms/TextInput/TextInput';\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\nimport CheckoutComplete from '../Templates/CheckoutPopup/CheckoutComplete';\nimport PopupWithText from '../Templates/PopupWithText/PopupWithText';\n\nimport { getSynergyJSX } from '../../actions/insuranceActions';\nimport { validateForm, dateReValidate } from '../../lib/validators';\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\n\n// import './PetDetail.scss';\n\nconst formName = 'endowment-detail';\n\nclass EndowmentDetail extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sessionId,\n    } = nextProps;\n\n    if (sessionId !== prevState.sessionId) {\n      return ({\n        sessionId,\n      });\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sessionId: null,\n      errorStringData: {},\n      errorArray: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { sessionId } = this.state;\n    const { loadingEnd } = this.props;\n\n    if (sessionId) {\n      loadingEnd();\n      setTimeout(() => {\n        this.checkoutComplete.openCheckoutComplete();\n        ampTag('EndConfirmationS');\n      }, 300);\n    }\n  }\n\n  validateForm(e) {\n    const fieldsToCheck = [\n      'email',\n      'name',\n      'birth_date',\n      'mobile_number',\n    ];\n\n    const error = validateForm(e, fieldsToCheck);\n\n    this.setState({\n      errorStringData: error,\n    });\n\n    let errorArray = [];\n    if (!_.isEmpty(error)) {\n      errorArray = [<p className=\"error-string\" key=\"error-1\">Fields are not properly filled, please check again.</p>];\n    }\n\n    this.setState({\n      errorArray,\n    });\n\n    return error;\n  }\n\n  handleSubmit(e, isFirstValidate = true) {\n    // console.log(e);\n    const { checkOutOthers, loading, storeForm } = this.props;\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\n    const isEmptyResult = _.isEmpty(errorResult);\n\n    if (dateReValidate(\n      isEmptyResult,\n      isFirstValidate,\n      errorResult,\n      error => this.setState({ errorStringData: error, errorArray: null }),\n      () => this.handleSubmit(storeForm, false),\n    )) {\n      return;\n    }\n\n    if (isEmptyResult) {\n      ampTag('EndConfirm1A');\n      ampTag('EndNoticeS');\n      this.popup.openPopupWithJSX(getSynergyJSX(), true, () => {\n        setTimeout(() => {\n          loading();\n          checkOutOthers(e);\n\n          gaEvent('Endowment - DetailForm - Checkout', {\n            event_category: 'Endowment',\n            event_label: 'Endowment - DetailForm - Checkout',\n          });\n          ampTag('EndConfirm2A');\n        }, 350);\n      });\n    }\n    window.scrollTo(0, document.body.scrollHeight);\n  }\n\n  render() {\n    const { errorStringData, errorArray } = this.state;\n    const {\n      form,\n      change,\n      planDetails,\n      isLoggedIn,\n      piggyCallback,\n      changePlan,\n      storeForm,\n    } = this.props;\n\n    // console.log(petMinDate, petMaxDate);\n    return (\n      <Fragment>\n        <DetailForm\n          category=\"endowment\"\n          changePlan={changePlan}\n          handleSubmit={this.props.handleSubmit}\n          onSubmit={this.handleSubmit}\n          change={change}\n          form={form}\n          planDetails={planDetails}\n          isLoggedIn={isLoggedIn}\n          piggyCallback={piggyCallback}\n          errorArray={errorArray}\n          checkoutButtonDesc=\"Confirm\"\n        >\n          <Row className=\"main-form\" noGutters>\n            <Col xs={12}>\n              <TextInput\n                form={form}\n                change={change}\n                name=\"email\"\n                placeholderString=\"\"\n                size=\"medium\"\n                zIndex={99}\n                desc=\"Email Address\"\n                errorString={errorStringData.email}\n                validateForm={() => this.validateForm(storeForm)}\n              />\n            </Col>\n            <Col className=\"right-padding\" xs={12} sm={6}>\n              <TextInput\n                form={form}\n                change={change}\n                name=\"name\"\n                placeholderString=\"\"\n                size=\"medium\"\n                zIndex={98}\n                desc=\"Full Name\"\n                errorString={errorStringData.name}\n                validateForm={() => this.validateForm(storeForm)}\n              />\n            </Col>\n            <Col className=\"left-padding\" xs={12} sm={6}>\n              <DatePickerV2\n                form={form}\n                change={change}\n                name=\"birth_date\"\n                size=\"medium\"\n                zIndex={97}\n                desc=\"Date of Birth\"\n                errorString={errorStringData.birth_date}\n                validateForm={() => this.validateForm(storeForm)}\n                endDate={new Date()}\n              />\n            </Col>\n            <Col className=\"right-padding\" xs={12} sm={6}>\n              <TextInput\n                form={form}\n                change={change}\n                name=\"mobile_number\"\n                placeholderString=\"\"\n                size=\"medium\"\n                zIndex={96}\n                desc=\"Mobile Number\"\n                errorString={errorStringData.mobile_number}\n                validateForm={() => this.validateForm(storeForm)}\n              />\n            </Col>\n          </Row>\n        </DetailForm>\n        <PopupWithText\n          ref={node => this.popup = node}\n          showCancelButton\n        />\n        <CheckoutComplete\n          isQuoteOnly\n          isSellLeads\n          wrappedComponentRef={node => this.checkoutComplete = node}\n        />\n      </Fragment>\n    );\n  }\n}\n\nEndowmentDetail.defaultProps = {\n  storeForm: null,\n};\n\nEndowmentDetail.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  checkOutOthers: PropTypes.func.isRequired,\n  form: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired,\n  planDetails: PropTypes.object.isRequired,\n  isLoggedIn: PropTypes.bool.isRequired,\n  piggyCallback: PropTypes.func.isRequired,\n  changePlan: PropTypes.func.isRequired,\n  storeForm: PropTypes.object,\n  loading: PropTypes.func.isRequired,\n  loadingEnd: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  storeForm: getFormValues(formName)(state),\n  constants: state.insurance.constants,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loading: (callBack, errorMsg, time) => {\n    dispatch(setLoading(callBack, errorMsg, time));\n  },\n  loadingEnd: () => {\n    dispatch(clearLoading());\n  },\n});\n\nexport default reduxForm({\n  form: formName,\n  destroyOnUnmount: false,\n})(connect(mapStateToProps, mapDispatchToProps)(EndowmentDetail));\n","/**\n * EndowmentDetailContainer.js\n * Detail Container for Endowment\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { getFormValues } from 'redux-form';\nimport PropTypes from 'prop-types';\n\n// Import Insurer Logos\nimport Logos from 'assets/images/InsurerLogos';\n\nimport EndowmentDetail from '../../components/Endowment/EndowmentDetail';\nimport { getAnonymousSession, setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { getSessionParams } from '../../actions/endowmentActions';\nimport { gaTag, gaEvent, ampTag } from '../../lib/tagFunctions';\n\nclass EndowmentDetailContainer extends Component {\n  componentDidMount() {\n    const { setFormState } = this.props;\n    setFormState(FORMSTATES.DETAILFORM.index);\n    gaTag({\n      page_title: 'Endowment - Detail Form',\n      page_path: '/endowment/detailform',\n    });\n    ampTag('EndDetailsS');\n  }\n\n  render() {\n    const {\n      plansData,\n      isLoggedIn,\n      profileValues,\n      piggyCallback,\n      endowmentFields,\n      sessionId,\n      checkOutOthers,\n      history,\n    } = this.props;\n\n    if (!plansData) {\n      return null;\n    }\n\n    const selectedData = plansData;\n\n    let planDetails = {\n      logo: Logos.others,\n      logoDesc: '',\n      planName: '',\n      planTotal: null,\n    };\n\n    try {\n      let netPrice = selectedData.policyInfo[selectedData.planType].net_price;\n      netPrice = netPrice ? `$${netPrice.toFixed(2)}` : '';\n\n      planDetails = {\n        logo: Logos[selectedData.info.insurer_slug],\n        logoDesc: `${selectedData.info.insurer_name}.svg`,\n        planName: selectedData.info.product_name,\n        planTotal: netPrice,\n      };\n    } catch (error) {\n      console.log('Get plan details failed');\n    }\n\n    return (\n      <EndowmentDetail\n        endowmentFields={endowmentFields}\n        selectedData={selectedData}\n        planDetails={planDetails}\n        isLoggedIn={isLoggedIn}\n        sessionId={sessionId}\n        piggyCallback={piggyCallback}\n        checkOutOthers={checkOutOthers}\n        changePlan={() => {\n          history.goBack();\n          gaEvent('Endowment - DetailForm - ChangePlan', {\n            event_category: 'Endowment',\n            event_label: 'Endowment - DetailForm - ChangePlan',\n          });\n        }}\n        profileValues={profileValues}\n        // submitCallback={() => { setFormState(FORMSTATES.CHECKOUT); }}\n      />\n    );\n  }\n}\n\nEndowmentDetailContainer.defaultProps = {\n  sessionId: null,\n  plansData: null,\n};\n\nEndowmentDetailContainer.propTypes = {\n  plansData: PropTypes.object,\n  piggyCallback: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool.isRequired,\n  setFormState: PropTypes.func.isRequired,\n  profileValues: PropTypes.object.isRequired,\n  endowmentFields: PropTypes.object.isRequired,\n  sessionId: PropTypes.string,\n  checkOutOthers: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = state => ({\n  endowmentForm: getFormValues('endowment')(state),\n  endowmentFields: state.endowment.endowmentFields,\n  profileValues: state.userDetails,\n  plansData: state.endowment.selectedPlanData,\n  sessionId: state.insurance.sessionId,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getAnonymousSession: (params) => {\n    dispatch(getAnonymousSession(params, true));\n  },\n  setFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n});\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => ({\n  ...ownProps,\n  ...propsFromState,\n  ...propsFromDispatch,\n  checkOutOthers: (detailForm) => {\n    propsFromDispatch.getAnonymousSession(getSessionParams(\n      propsFromState.endowmentForm,\n      detailForm,\n      propsFromState.plansData,\n    ), true);\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(EndowmentDetailContainer));\n","/**\n * EndowmentRouteContainer.js\n * The wrapper container for endowment\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { change, reset } from 'redux-form';\nimport { /* Prompt, */ withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { resetCompare } from '../../actions/compareActions';\nimport { getPromoGiveaways, resetInsuranceForm, FORMSTATES } from '../../actions/insuranceActions';\nimport { clearEndowmentData } from '../../actions/endowmentActions';\nimport { isProduction } from '../../lib/tagFunctions';\n\nimport StepProgressBar from '../../components/Templates/StepProgressBar/StepProgressBar';\nimport RefreshTimer from '../../components/Templates/RefreshTimer/RefreshTimer';\n\nimport EndowmentMainContainer from './EndowmentMainContainer';\nimport EndowmentChoosePlanContainer from './EndowmentChoosePlanContainer';\nimport EndowmentDetailContainer from './EndowmentDetailContainer';\n\nimport { routeHandler } from '../../lib/helperFunctions';\n\nconst formName = 'endowment';\nconst detailFormName = 'endowment-detail';\n\nclass EndowmentRouteContainer extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { formIndex, isMounted } = prevState;\n    const { formState, match, history } = nextProps;\n\n    if (isMounted) {\n      const routeResult = routeHandler(formName, formState, formIndex, match, history);\n      if (routeResult && routeResult.formIndex !== null) {\n        return ({\n          formIndex: routeResult.formIndex,\n        });\n      }\n    }\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formIndex: 0,\n      isInitialLoad: true,\n    };\n\n    const {\n      resetStoreForm,\n      endowmentPromoGiveAway,\n      clearData,\n      history,\n    } = this.props;\n\n    history.replace(`/endowment${history.location.search}`);\n\n    clearData();\n    this.props.resetCompare();\n    this.props.resetInsuranceForm();\n\n    resetStoreForm('endowment');\n    resetStoreForm('endowment-detail');\n\n    if (endowmentPromoGiveAway === undefined) {\n      this.props.getPromoGiveaways();\n    }\n\n    this.setInitialFormState = this.setInitialFormState.bind(this);\n    this.renderStepProgress = this.renderStepProgress.bind(this);\n    this.renderLifeForms = this.renderLifeForms.bind(this);\n    this.changeUserDetails = this.changeUserDetails.bind(this);\n  }\n\n  componentDidMount() {\n    // window.addEventListener('beforeunload', this.handleLeavePage);\n    this.setInitialFormState();\n    this.setState({\n      // eslint-disable-next-line\n      isMounted: true,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isInitialLoad } = this.state;\n    const { userDetails } = this.props;\n\n    if (isInitialLoad && _.isEqual(userDetails, prevProps.userDetails)) {\n      this.changeUserDetails();\n    }\n  }\n\n  componentWillUnmount() {\n    const { clearData, resetStoreForm } = this.props;\n    clearData();\n    this.props.resetCompare();\n    this.props.resetInsuranceForm();\n\n    resetStoreForm('endowment');\n    resetStoreForm('endowment-detail');\n  }\n\n  setInitialFormState() {\n    const { changeForm } = this.props;\n\n    changeForm(formName, 'birth_date', '01 Jan 1990');\n    changeForm(formName, 'premium_term', '16-20 years');\n\n    this.changeUserDetails();\n  }\n\n  changeUserDetails() {\n    const { isInitialLoad } = this.state;\n    const { userDetails, changeForm } = this.props;\n\n    if (userDetails) {\n      const surname = userDetails && userDetails.surname ? userDetails.surname : '';\n      const firstname = userDetails && userDetails.firstName ? ` ${userDetails.firstName}` : '';\n\n      changeForm(detailFormName, 'email', userDetails.email);\n      changeForm(detailFormName, 'name', `${surname}${firstname}`);\n      changeForm(detailFormName, 'birth_date', userDetails.dateOfBirth);\n      changeForm(detailFormName, 'mobile_number', userDetails.contact);\n\n      if (isInitialLoad) {\n        this.setState({\n          isInitialLoad: false,\n        });\n      }\n    }\n  }\n\n  renderStepProgress() {\n    const { formIndex } = this.state;\n    return (\n      <StepProgressBar\n        maxWidth=\"556px\"\n        formState={formIndex}\n        inputList={[\n          'Choose Plan',\n          'Details',\n        ]}\n        form=\"endowment\"\n        stateList={[\n          FORMSTATES.CHOOSEPLAN,\n          FORMSTATES.DETAILFORM,\n        ]}\n        stateDescriptions={[\n          { main: '' /* 'Choose your Plan', sub: 'Compare price plans from multiple companies' */},\n          { main: 'Fill in your details - Get $5 Credits' },\n        ]}\n        charged={false}\n      />\n    );\n  }\n\n  renderLifeForms() {\n    const { formIndex } = this.state;\n    const {\n      userDetails,\n    } = this.props;\n\n    const isLoggedIn = !_.isEmpty(userDetails);\n\n\n    switch (formIndex) {\n      case FORMSTATES.CHOOSEPLAN.index:\n        return <EndowmentChoosePlanContainer isLoggedIn={isLoggedIn} />;\n      case FORMSTATES.DETAILFORM.index:\n        return (\n          <EndowmentDetailContainer\n            isLoggedIn={isLoggedIn}\n            piggyCallback={this.changeUserDetails}\n          />\n        );\n      default:\n        return <EndowmentMainContainer isLoggedIn={isLoggedIn} />;\n    }\n  }\n\n  render() {\n    const { endowmentPromoGiveAway, constants } = this.props;\n\n    if (!constants || endowmentPromoGiveAway === undefined) {\n      return null;\n    }\n\n    const meta = isProduction ? 'PolicyPal, insurance, insurance broker, endowment, endowment plan, savings plan singapore, best endowment plan singapore, 5 years saving plan singapore, endowment fund, endowment insurance, what is endowment plan, best insurance savings plan singapore, endowment policy, ntuc endowment, short term endowment plan singapore, short term endowment plan, best endowment plan, ntuc income endowment, endowment plan comparison, singapore endowment insurance, savings insurance, savings insurance singapore, compare insurance' : '';\n    return (\n      <Fragment>\n        <Helmet>\n          <meta name=\"keywords\" content={meta} />\n          <title>PolicyPal 2.0 - Endowment Insurance</title>\n          <meta name=\"title\" content=\"PolicyPal 2.0 - Endowment Insurance\" />\n          <meta name=\"description\" content=\"Browse products for endowment insurance.\" />\n        </Helmet>\n        {/* {\n          formState !== FORMSTATES.MAIN ?\n            <Prompt\n              when={true}\n              message=\"Are you sure you want to leave current page?\"\n            />\n          :\n            null\n        } */}\n        {this.renderStepProgress()}\n        {this.renderLifeForms()}\n        <RefreshTimer ref={(node) => {\n            if (!this.refresher) {\n              node.invokeNewTimer();\n            }\n            this.refresher = node;\n          }}\n        />\n      </Fragment>\n    );\n  }\n}\n\nEndowmentRouteContainer.defaultProps = {\n  userDetails: null,\n  endowmentPromoGiveAway: undefined,\n  constants: null,\n};\n\nEndowmentRouteContainer.propTypes = {\n  clearData: PropTypes.func.isRequired,\n  resetCompare: PropTypes.func.isRequired,\n  getPromoGiveaways: PropTypes.func.isRequired,\n  resetInsuranceForm: PropTypes.func.isRequired,\n  changeForm: PropTypes.func.isRequired,\n  resetStoreForm: PropTypes.func.isRequired,\n  userDetails: PropTypes.object,\n  endowmentPromoGiveAway: PropTypes.object,\n  constants: PropTypes.object,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  endowmentPromoGiveAway: state.insurance.promoGiveaways.endowment,\n  formState: state.insurance.formState,\n  constants: state.insurance.constants,\n  userDetails: state.userDetails.data,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeForm: (form, key, value) => (\n    dispatch(change(form, key, value))\n  ),\n  resetInsuranceForm: () => (\n    dispatch(resetInsuranceForm())\n  ),\n  resetStoreForm: form => (\n    dispatch(reset(form))\n  ),\n  getPromoGiveaways: () => {\n    dispatch(getPromoGiveaways('endowment'));\n  },\n  resetCompare: () => {\n    dispatch(resetCompare());\n  },\n  clearData: () => {\n    dispatch(clearEndowmentData());\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EndowmentRouteContainer));\n","module.exports = __webpack_public_path__ + \"static/media/Avatar.b01356d4.svg\";","/**\n * MultiCompareInner.js\n * Multi Compare view with different insurers\n * Contains the main policy type tab view logic\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Row } from 'reactstrap';\n\nimport TabView from '../../Templates/TabView/TabView';\nimport CompareView from '../../Templates/CompareView/CompareView';\nimport ChangeInitialFormData from '../../Templates/ChangeInitialFormData/ChangeInitialFormData';\n\nimport Enquiry from '../../Templates/Enquiry/Enquiry';\n\nimport { setPlanType, setSelectedIndex } from '../../../actions/compareActions';\n\n// The default tabs array\nconst resultToMatch = ['basic', 'essential', 'elite', 'default'];\n\nclass MultiCompareInner extends Component {\n  /**\n   * Lifecycle Method - getDerivedStateFromProps\n   */\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // Goes here first before did mount\n    // Get new policy available policy types\n    if (nextProps.data.policyTypes !== prevState.policyTypes) {\n      return ({\n        policyTypes: nextProps.data.policyTypes,\n      });\n    }\n\n    return null;\n  }\n\n  /**\n   * Lifecycle Method - constructor\n   */\n  constructor(props) {\n    super(props);\n\n    const { data } = this.props;\n    // tabIndex - The current tab index in effect\n    // currentTab - The name of the current tab\n    // tabs - The tabs array data\n    // policyTypes - The possible policy types to display\n    this.state = {\n      tabIndex: 0,\n      currentTab: null,\n      tabs: null,\n      policyTypes: data.policyTypes,\n    };\n\n    this.handleTabClick = this.handleTabClick.bind(this);\n    this.renderTabs = this.renderTabs.bind(this);\n  }\n\n  /**\n   * Lifecycle Method - componentDidMount\n   */\n  componentDidMount() {\n    // Render inital tabs\n    const tabs = this.renderTabs(null, true);\n    // Set initial plan type\n    this.props.setPlanType(_.lowerCase(tabs.currentTab));\n  }\n\n  /**\n   * Lifecycle Method - shouldComponentUpdate\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const { policyTypes, tabs, currentTab } = this.state;\n    const { data } = this.props;\n\n    // Render new tabs if policy types are changed\n    if (!_.isEqual(policyTypes, nextState.policyTypes)) {\n      this.renderTabs(nextState.policyTypes);\n    }\n\n    // Update only when tabs or data are updated\n    return tabs !== nextState.tabs ||\n          currentTab !== nextState.currentTab ||\n          data !== nextProps.data;\n  }\n\n  /**\n   * Lifecycle Method - componentDidUpdate\n   */\n  componentDidUpdate(prevProps, prevState) {\n    const { tabs, tabIndex } = this.state;\n    const { selectedIndex, initialIndex } = this.props;\n\n    // If new tabs\n    if (tabs !== prevState.tabs) {\n      if (this.categoryTab && this.categoryTab.wrappedInstance) {\n        // If using back previous selected index and not the same state as local index\n        const isCameFromBackButton = selectedIndex && selectedIndex !== tabIndex;\n        // If this is the first time user enter compare view\n        const isFirstTime = selectedIndex === null && initialIndex;\n\n        if (isCameFromBackButton || isFirstTime) {\n          const currIncomingIndex = isCameFromBackButton ? selectedIndex : initialIndex;\n          // Check if previous selected index is still within range\n          const tabIndexToUse = currIncomingIndex < tabs.length ? currIncomingIndex : 0;\n          // Go to the tab and set new state;\n          this.categoryTab.wrappedInstance.goToIndex(tabIndexToUse, true);\n          this.setState({ tabIndex: tabIndexToUse });\n\n          // Set index to store\n          this.props.setSelectedIndex(tabIndexToUse);\n          return;\n        }\n\n        // This happens when tabs are not the same when changing form within\n        // compare view. It will try to go to the last selected plan type\n        this.categoryTab.wrappedInstance.goToIndex(tabIndex);\n      }\n    }\n  }\n\n  /**\n   * When clicked on main tabs\n   *\n   * @param {string} type - Selected plan type\n   * @param {number} index - Tab index\n   */\n  handleTabClick(type, index) {\n    // Set current plan type\n    this.setState({\n      currentTab: type,\n    });\n\n    this.props.setPlanType(type);\n    this.props.setSelectedIndex(index);\n  }\n\n  /**\n   * Render Main tabs\n   *\n   * @param {array} policyTypes - The avaliable policy types\n   * @param {bool} isInitial - If is initial first time load\n   */\n  renderTabs(policyTypes = null, isInitial = false) {\n    const { policyTypes: oldPolicyTypes, currentTab } = this.state;\n    const { planImages } = this.props;\n\n    // Use new policy types if avaliable\n    const policyTypesToUse = policyTypes || oldPolicyTypes;\n\n    // The tab index\n    let index = 0;\n\n    // Match possible policy types to default types,\n    // with positioning in consideration\n    const tabs = _.reduce(resultToMatch, (result, type) => {\n      if (_.findIndex(policyTypesToUse, planType => planType === type) !== -1) {\n        const theIndex = index;\n        const image = planImages ? planImages[type] : null;\n        // Set desc, image, and onClick for the tab\n        result.push({\n          desc: _.startCase(type),\n          img: image,\n          onClick: () => {\n            this.handleTabClick(type, theIndex);\n          },\n        });\n        index += 1;\n      }\n      return result;\n    }, []);\n\n    // Default currenTab name is from first item\n    let tabInfo = { currentTab: _.lowerCase(tabs[0].desc) };\n\n    // If tabs is changed while navigating in compare view\n    if (!isInitial) {\n      // Try to find if the old tab name still exists in new one\n      const currentTabIndex = _.findIndex(tabs, tab => _.lowerCase(tab.desc) === currentTab);\n      // Use 0 if no longer exists\n      const tabIndexToUse = currentTabIndex !== -1 ? currentTabIndex : 0;\n      // New tab\n      const newTab = _.lowerCase(tabs[tabIndexToUse].desc);\n      // Set new tab info\n      tabInfo = {\n        tabIndex: tabIndexToUse,\n        currentTab: newTab,\n      };\n\n      // Set store data\n      this.props.setPlanType(newTab);\n      this.props.setSelectedIndex(tabIndexToUse);\n    }\n\n    // Return tabs\n    const result = {\n      ...tabInfo,\n      tabs,\n    };\n\n    this.setState(result);\n\n    return result;\n  }\n\n  /**\n   * Render\n   */\n  render() {\n    const {\n      currentTab,\n      tabs,\n    } = this.state;\n\n    const {\n      data,\n      scrollPopUpCallback,\n      submitCallback,\n      editForm,\n      form,\n      buttonDesc,\n      forceFixedOnDesktop,\n      category,\n    } = this.props;\n\n    // console.log(plansData);\n    if (!data || !tabs || !currentTab) {\n      return null;\n    }\n\n    const tabStyle = currentTab === 'default' ? 'inner-form-no-tabs' : '';\n\n    return (\n      <Fragment>\n        <Row className={`inner-form-container ${tabStyle} inner-form-extra-padding`} noGutters>\n          <TabView\n            tabs={tabs}\n            isDataFadeOnly\n            isDisableDropdown\n            big\n            name={`${form}-tab`}\n            ref={node => this.categoryTab = node}\n          >\n            {[<CompareView\n              category={category}\n              key=\"overview\"\n              className=\"overview-container-padding\"\n              notAccordion\n              data={data}\n              currentTab={currentTab}\n              scrollPopUpCallback={scrollPopUpCallback}\n              productChangable\n              editForm={\n                <ChangeInitialFormData\n                  submitCallback={submitCallback}\n                  form={form}\n                  headerValue={editForm.headerValue}\n                  valuesToListen={editForm.valuesToListen}\n                  conditions={editForm.conditions}\n                >\n                  {editForm.editDetail}\n                </ChangeInitialFormData>\n              }\n              buttonDesc={buttonDesc}\n              forceFixedOnDesktop={forceFixedOnDesktop}\n            />]}\n          </TabView>\n          <Enquiry />\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\nMultiCompareInner.defaultProps = {\n  initialIndex: 0,\n  selectedIndex: null,\n  data: null,\n  planImages: null,\n  buttonDesc: null,\n  forceFixedOnDesktop: false,\n  category: null,\n};\n\nMultiCompareInner.propTypes = {\n  initialIndex: PropTypes.number,\n  selectedIndex: PropTypes.number,\n  setSelectedIndex: PropTypes.func.isRequired,\n  setPlanType: PropTypes.func.isRequired,\n  data: PropTypes.object,\n  planImages: PropTypes.object,\n  scrollPopUpCallback: PropTypes.func.isRequired,\n  submitCallback: PropTypes.func.isRequired,\n  editForm: PropTypes.object.isRequired,\n  form: PropTypes.string.isRequired,\n  buttonDesc: PropTypes.string,\n  forceFixedOnDesktop: PropTypes.bool,\n  category: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  selectedIndex: state.compare.selectedIndex,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedIndex: (index) => {\n    dispatch(setSelectedIndex(index));\n  },\n  setPlanType: (type) => {\n    dispatch(setPlanType(type));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareInner);\n","/**\n * MultiCompareView.js\n * Multi Compare view with different insurers\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { parseData } from '../../../actions/insuranceActions';\nimport { setSelectedInsurers } from '../../../actions/compareActions';\nimport { setLoading, clearLoading } from '../../../actions/loadingScreenActions';\nimport { setRestrictionPopup } from '../../../actions/restrictionsActions';\nimport MultiCompareInner from './MultiCompareInner';\n\nclass MultiCompareView extends Component {\n  /**\n   * Lifecycle Method - getDerivedStateFromProps\n   */\n  static getDerivedStateFromProps(nextProps, prevState) {\n    try {\n      const {\n        currentInsurers,\n      } = prevState;\n\n      const {\n        plansData,\n        validInsurersList,\n        setFormState,\n        loadingEnd,\n        mainForm,\n        setSelectedPlanData,\n        trackingTags,\n      } = nextProps;\n\n      if (plansData && plansData[0] === 'INVALID') {\n        return null;\n      }\n\n      // If plansData and validInsurersList are retrieved, parse data for display\n      if (validInsurersList && plansData) {\n        let newDefaultInsurers = currentInsurers || {};\n        if (!currentInsurers && plansData) {\n          newDefaultInsurers = _.map(plansData, plan => plan.info.insurer_slug);\n          newDefaultInsurers = newDefaultInsurers.slice(0, 3);\n          nextProps.setSelectedInsurers(newDefaultInsurers);\n        }\n\n        return {\n          parsedData: parseData(\n            plansData,\n            validInsurersList,\n            newDefaultInsurers,\n            mainForm.trip_type,\n            () => {\n              setFormState();\n            },\n            setSelectedPlanData,\n            loadingEnd,\n            nextProps.setRestrictionPopup,\n            null,\n            trackingTags,\n          ),\n          currentInsurers: newDefaultInsurers,\n        };\n      }\n    } catch (error) {\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Lifecycle Method - constructor\n   */\n  constructor(props) {\n    super(props);\n\n    const {\n      mainForm,\n      parseForm,\n      getPlans,\n      getInsurersList,\n      loading,\n      defaultInsurers,\n      plansData,\n      validInsurersList,\n      selectedInsurers,\n      setSelectedPlanData,\n      loadingEnd,\n      setFormState,\n      loadingFailBackState,\n      clearData,\n      trackingTags,\n    } = this.props;\n\n    try {\n      // If fresh init\n      if (!plansData || !validInsurersList) {\n        // Initally, get the params from mainform and default insurers\n        const parsedParams = parseForm(mainForm, defaultInsurers);\n\n        // Set loading\n        loading(() => {\n          clearData();\n          loadingFailBackState();\n        }, 'No available plans found.', 30000, '');\n\n        // Get plans and valid insurers list\n        getPlans(parsedParams);\n        getInsurersList(parsedParams);\n\n        // Set initial default insurers\n        this.props.setSelectedInsurers(defaultInsurers);\n\n        // currentInsurers: Current selected list of insurers\n        // parsedData: The parsed data to display\n        // hoveredIndex: The current hovered index on the insurer selection dropdown, default is 0\n        this.state = {\n          currentInsurers: defaultInsurers,\n          parsedData: null,\n        };\n      } else {\n        // Set existing selected insurers and get old parsed data\n        // (Will reach this condition when using the back button)\n        this.state = {\n          currentInsurers: selectedInsurers,\n          parsedData: parseData(\n            plansData,\n            validInsurersList,\n            selectedInsurers,\n            mainForm.trip_type,\n            () => setFormState(),\n            setSelectedPlanData,\n            loadingEnd,\n            this.props.setRestrictionPopup,\n            null,\n            trackingTags,\n          ),\n        };\n      }\n    } catch (error) {\n      // eslint-disable-next-line\n    }\n\n    this.getNewData = this.getNewData.bind(this);\n    this.onInsurerClick = this.onInsurerClick.bind(this);\n  }\n\n  componentDidUpdate() {\n    const {\n      plansData,\n      loadingEnd,\n      loading,\n      clearData,\n      loadingFailBackState,\n    } = this.props;\n\n    if (plansData && plansData[0] === 'INVALID') {\n      loadingEnd();\n      if (!this.isLoading) {\n        this.isLoading = true;\n        setTimeout(() =>\n          loading(() => {\n            clearData();\n            loadingFailBackState();\n            this.isLoading = false;\n          }, 'No available plans found.', 50, ''), 500);\n      }\n    }\n  }\n  /**\n   * Lifecycle Method - shouldComponentUpdate\n   */\n  /* shouldComponentUpdate(nextProps, nextState) {\n    const { parsedData } = this.state;\n\n    // Render only is new or policyTypes changed\n    return !(parsedData && nextState.parsedData) ||\n          !_.isEqual(parsedData.policyTypes, nextState.parsedData.policyTypes);\n  } */\n\n  /**\n   * Handle selection on insurer list\n   *\n   * @param {object} data - The insurer list item data\n   */\n  onInsurerClick(data, hoveredIndex) {\n    // parsedData: The parsed data to display\n    const { parsedData } = this.state;\n\n    // Remap current insurers as sometimes when change form data, the insurers\n    // can be less than 3.\n    // console.log(parsedData.selectedInsurers, hoveredIndex);\n    const currentInsurers = _.reduce(parsedData.selectedInsurers, (result, insurer) => {\n      if (insurer) {\n        result.push(insurer.insurerSlug);\n      }\n      return result;\n    }, []);\n\n    // Change insurer of current selected position\n    currentInsurers[hoveredIndex] = data.insurer_slug;\n\n    // Set current insurers\n    this.setState({\n      currentInsurers,\n    });\n\n    // Set current insurers in store\n    this.props.setSelectedInsurers(currentInsurers);\n\n    // Get new compare data based on the new selected insurers\n    this.getNewData(currentInsurers);\n  }\n\n  /**\n   * Get new compare data.\n   * Used when changing insurers or changing form fields.\n   *\n   * @param {array} incomingInsurers - selected insurers\n   */\n  getNewData(incomingInsurers = null) {\n    const { currentInsurers } = this.state;\n    const {\n      loading,\n      getPlans,\n      getInsurersList,\n      clearData,\n      mainForm,\n      parseForm,\n      loadingFailBackState,\n    } = this.props;\n\n    // If init, use default, else the current array\n    const insurerToUse = incomingInsurers || currentInsurers;\n    // Parse the form for params\n    const parsedParams = parseForm(mainForm, insurerToUse);\n    // Clear data in store first, so it will detect as fresh props from store\n    clearData();\n    // Set loading screen\n    loading(() => {\n      clearData();\n      loadingFailBackState();\n    }, 'No available plans found.', 30000, '');\n    // Get plans and insurer lists\n    getPlans(parsedParams);\n    getInsurersList(parsedParams);\n  }\n\n  /**\n   * Render\n   */\n  render() {\n    try {\n      const { parsedData } = this.state;\n      const {\n        editForm,\n        form,\n        planImages,\n        initialIndex,\n        buttonDesc,\n        forceFixedOnDesktop,\n        category,\n      } = this.props;\n\n      // Do not render if no data\n      if (!parsedData) {\n        return null;\n      }\n\n      // console.log(parsedData);\n      return (\n        <MultiCompareInner\n          category={category}\n          initialIndex={initialIndex}\n          planImages={planImages}\n          data={parsedData}\n          form={form}\n          editForm={editForm}\n          scrollPopUpCallback={this.onInsurerClick}\n          submitCallback={this.getNewData}\n          buttonDesc={buttonDesc}\n          forceFixedOnDesktop={forceFixedOnDesktop}\n        />\n      );\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nMultiCompareView.defaultProps = {\n  initialIndex: 0,\n  plansData: null,\n  validInsurersList: null,\n  selectedInsurers: null,\n  trackingTags: null,\n  planImages: null,\n  defaultInsurers: null,\n  buttonDesc: null,\n  forceFixedOnDesktop: false,\n  category: null,\n};\n\nMultiCompareView.propTypes = {\n  setSelectedInsurers: PropTypes.func.isRequired,\n  mainForm: PropTypes.object.isRequired,\n  parseForm: PropTypes.func.isRequired,\n  getPlans: PropTypes.func.isRequired,\n  getInsurersList: PropTypes.func.isRequired,\n  clearData: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n  defaultInsurers: PropTypes.array,\n  editForm: PropTypes.object.isRequired,\n  form: PropTypes.string.isRequired,\n  planImages: PropTypes.object,\n  initialIndex: PropTypes.number,\n  plansData: PropTypes.array,\n  validInsurersList: PropTypes.array,\n  selectedInsurers: PropTypes.array,\n  setSelectedPlanData: PropTypes.func.isRequired,\n  loadingEnd: PropTypes.func.isRequired,\n  setFormState: PropTypes.func.isRequired,\n  setRestrictionPopup: PropTypes.func.isRequired,\n  loadingFailBackState: PropTypes.func.isRequired,\n  trackingTags: PropTypes.object,\n  buttonDesc: PropTypes.string,\n  forceFixedOnDesktop: PropTypes.bool,\n  category: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  selectedInsurers: state.compare.selectedInsurers,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loading: (callBack, errorMsg, time, mainMsg) => {\n    dispatch(setLoading(callBack, errorMsg, time, mainMsg));\n  },\n  loadingEnd: () => {\n    dispatch(clearLoading());\n  },\n  setRestrictionPopup: (data) => {\n    dispatch(setRestrictionPopup(data));\n  },\n  setSelectedInsurers: (array) => {\n    dispatch(setSelectedInsurers(array));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareView);\n","module.exports = __webpack_public_path__ + \"static/media/Dollar.69451f59.svg\";","module.exports = __webpack_public_path__ + \"static/media/Umbrella.6617735b.svg\";"],"sourceRoot":""}