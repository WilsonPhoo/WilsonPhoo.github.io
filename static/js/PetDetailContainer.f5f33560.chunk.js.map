{"version":3,"sources":["components/Pet/PetDetail.js","containers/Pet/PetDetailContainer.js"],"names":["PetDetail","props","_this","Object","classCallCheck","this","petFields","possibleConstructorReturn","getPrototypeOf","call","dateField","_","find","form_fields","field","name","state","errorStringData","petMinDate","slashedStringDateToDate","min_date","petMaxDate","max_date","errorArray","handleSubmit","bind","assertThisInitialized","validateForm","e","fieldsToCheck","pet_illness","push","error","pet_birth_date","type","start","end","data","setState","isEmpty","react_default","a","createElement","className","key","isFirstValidate","submitCallback","storeForm","errorResult","isEmptyResult","dateReValidate","_this2","fbTag","Product","Click_Text","gaEvent","event_category","event_label","ampTag","idtype","id_type","hospital","window","scrollTo","document","body","scrollHeight","_this3","_this$props2","form","change","reactstrap_es","xs","TextInput","placeholderString","size","zIndex","desc","errorString","pet_medical_record","_this4","_this$state2","_this$props3","planDetails","isLoggedIn","piggyCallback","changePlan","constants","DetailForm","category","onSubmit","noGutters","email","sm","family_name","given_name","DropDownV2","dropList","idTypes","nric","toUpper","mobile_number","address","unit_no","postal","isPostCode","addressFields","unitNo","pet_name","pet_microchip_no","DatePickerV2","startDate","endDate","currDate","Selection","options","description","sizeInSM","noEmptyTextSelection","renderIllnessForm","Component","defaultProps","reduxForm","destroyOnUnmount","connect","getFormValues","insurance","PetDetailContainer","setFormState","FORMSTATES","DETAILFORM","index","gaTag","page_title","page_path","_this$props","plansData","profileValues","history","selectedData","logo","Logos","others","logoDesc","planName","planTotal","info","insurer_slug","concat","insurer_name","product_name","policyInfo","planType","net_price","toFixed","console","log","components_Pet_PetDetail","goBack","CHECKOUT","path","withRouter","pet","userDetails","selectedPlanData","dispatch","setInsuranceFormState"],"mappings":"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","file":"static/js/PetDetailContainer.f5f33560.chunk.js","sourcesContent":["/**\r\n * PetDetail.js\r\n * Detail View for Pet\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport document from 'global/document';\r\nimport window from 'global/window';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, getFormValues } from 'redux-form';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport DetailForm from '../Templates/DetailForm/DetailForm';\r\n\r\nimport TextInput from '../Forms/TextInput/TextInput';\r\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\r\nimport DropDownV2 from '../Forms/DropDown/DropDownV2';\r\nimport Selection from '../Forms/Selection/Selection';\r\n\r\n// import { getPostal } from '../../actions/insuranceActions';\r\nimport { validateForm, dateReValidate } from '../../lib/validators';\r\nimport { slashedStringDateToDate } from '../../lib/dateFunctions';\r\nimport { fbTag, gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nimport './PetDetail.scss';\r\n\r\nconst formName = 'pet-detail';\r\n\r\nclass PetDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { petFields } = this.props;\r\n    const dateField = _.find(petFields.form_fields, field => field.name === 'pet_birth_date');\r\n    // console.log(dateField);\r\n    this.state = {\r\n      errorStringData: {},\r\n      petMinDate: slashedStringDateToDate(dateField.min_date),\r\n      petMaxDate: slashedStringDateToDate(dateField.max_date),\r\n      errorArray: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  async validateForm(e, isSubmit = false) {\r\n    // console.log(e);\r\n    const { petMinDate, petMaxDate } = this.state;\r\n    const fieldsToCheck = [\r\n      'email',\r\n      'family_name',\r\n      'given_name',\r\n      'id_type',\r\n      'nric',\r\n      'mobile_number',\r\n      'address',\r\n      'unit_no',\r\n      'postal',\r\n      'pet_name',\r\n      'pet_microchip_no',\r\n      'pet_birth_date',\r\n      'pet_illness',\r\n    ];\r\n\r\n    if (e.pet_illness === 'Yes') {\r\n      fieldsToCheck.push('pet_medical_record');\r\n    }\r\n\r\n    const error = validateForm(e, fieldsToCheck, {\r\n      pet_birth_date: { type: 'DATE', start: petMinDate, end: petMaxDate },\r\n      pet_illness: { type: 'ARRAY', data: ['Yes', 'No'] },\r\n    });\r\n\r\n    /* if (isSubmit) {\r\n      const postalResult = await getPostal(e.postal);\r\n      if (!postalResult) {\r\n        error.postal = 'Invalid postal code';\r\n      }\r\n    } */\r\n\r\n    this.setState({\r\n      errorStringData: error,\r\n    });\r\n    let errorArray = [];\r\n    if (!_.isEmpty(error)) {\r\n      errorArray = [<p className=\"error-string\" key=\"error-1\">Fields are not properly filled, please check again.</p>];\r\n    }\r\n\r\n    this.setState({\r\n      errorArray,\r\n    });\r\n\r\n    return error;\r\n  }\r\n\r\n  async handleSubmit(e, isFirstValidate = true) {\r\n    // console.log(e);\r\n    const { submitCallback, storeForm } = this.props;\r\n\r\n    const errorResult = await this.validateForm(isFirstValidate ? e : storeForm, true);\r\n    const isEmptyResult = _.isEmpty(errorResult);\r\n\r\n    if (dateReValidate(\r\n      isEmptyResult,\r\n      isFirstValidate,\r\n      errorResult,\r\n      error => this.setState({ errorStringData: error, errorArray: null }),\r\n      () => this.handleSubmit(storeForm, false),\r\n    )) {\r\n      return;\r\n    }\r\n\r\n    if (isEmptyResult) {\r\n      fbTag('PPS2 - ButtonClick - Pet - DetailForm_Checkout', { Product: 'Pet', Click_Text: 'Checkout' });\r\n      gaEvent('Pet - DetailForm - Checkout', {\r\n        event_category: 'Pet',\r\n        event_label: 'Pet - DetailForm - Checkout',\r\n      });\r\n      ampTag('PetGoCheckoutA', {\r\n        idtype: e.id_type,\r\n        hospital: e.pet_illness === 'Yes',\r\n      });\r\n\r\n      submitCallback();\r\n    }\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  }\r\n\r\n  renderIllnessForm() {\r\n    const { errorStringData } = this.state;\r\n    const {\r\n      form,\r\n      change,\r\n      storeForm,\r\n    } = this.props;\r\n\r\n    if (storeForm && storeForm.pet_illness === 'Yes') {\r\n      return (\r\n        <Col xs={12} className=\"illness-input\">\r\n          <TextInput\r\n            form={form}\r\n            change={change}\r\n            name=\"pet_medical_record\"\r\n            placeholderString=\"\"\r\n            size=\"medium\"\r\n            zIndex={87}\r\n            desc=\"If yes, please complete below with Date of Illness, nature of Illness, treatment, and name of vet\"\r\n            errorString={errorStringData.pet_medical_record}\r\n            validateForm={() => this.validateForm(storeForm)}\r\n          />\r\n        </Col>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      errorStringData,\r\n      petMinDate,\r\n      petMaxDate,\r\n      errorArray,\r\n    } = this.state;\r\n    const {\r\n      form,\r\n      change,\r\n      planDetails,\r\n      isLoggedIn,\r\n      piggyCallback,\r\n      changePlan,\r\n      constants,\r\n      storeForm,\r\n    } = this.props;\r\n\r\n    return (\r\n      <DetailForm\r\n        category=\"pet\"\r\n        changePlan={changePlan}\r\n        handleSubmit={this.props.handleSubmit}\r\n        onSubmit={this.handleSubmit}\r\n        change={change}\r\n        form={form}\r\n        planDetails={planDetails}\r\n        isLoggedIn={isLoggedIn}\r\n        piggyCallback={piggyCallback}\r\n        errorArray={errorArray}\r\n      >\r\n        <Row className=\"main-form\" noGutters>\r\n          <Col xs={12}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"email\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={99}\r\n              desc=\"Email Address\"\r\n              errorString={errorStringData.email}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"right-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"family_name\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={98}\r\n              desc=\"Surname\"\r\n              errorString={errorStringData.family_name}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"left-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"given_name\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={97}\r\n              desc=\"Name (as shown in ID document)\"\r\n              errorString={errorStringData.given_name}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"right-padding\" xs={12} sm={6}>\r\n            <DropDownV2\r\n              form={form}\r\n              change={change}\r\n              name=\"id_type\"\r\n              placeholderString=\"Select ID Type\"\r\n              dropList={constants.idTypes}\r\n              size=\"medium\"\r\n              zIndex={96}\r\n              desc=\"Type of ID\"\r\n              errorString={errorStringData.id_type}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"left-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"nric\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={95}\r\n              desc=\"ID Number\"\r\n              errorString={errorStringData.nric}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n              toUpper\r\n            />\r\n          </Col>\r\n          <Col className=\"right-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"mobile_number\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={94}\r\n              desc=\"Mobile Number\"\r\n              errorString={errorStringData.mobile_number}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <hr className=\"hr-margin\" />\r\n          </Col>\r\n          <Col xs={12} className=\"header\">\r\n            <p>Address</p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"address\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={93}\r\n              desc=\"Address\"\r\n              errorString={errorStringData.address}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"right-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"unit_no\"\r\n              placeholderString=\"enter NA if no unit\"\r\n              size=\"medium\"\r\n              zIndex={92}\r\n              desc=\"Unit No\"\r\n              errorString={errorStringData.unit_no}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"left-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"postal\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={91}\r\n              desc=\"Postcode\"\r\n              errorString={errorStringData.postal}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n              isPostCode\r\n              addressFields={{\r\n                address: 'address',\r\n                unitNo: 'unit_no',\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <hr className=\"hr-margin\" />\r\n          </Col>\r\n          <Col xs={12} className=\"header\">\r\n            <p>{'Pet\\'s details'}</p>\r\n          </Col>\r\n          <Col className=\"right-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"pet_name\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={90}\r\n              desc=\"Name of Pet\"\r\n              errorString={errorStringData.pet_name}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"left-padding\" xs={12} sm={6}>\r\n            <TextInput\r\n              form={form}\r\n              change={change}\r\n              name=\"pet_microchip_no\"\r\n              placeholderString=\"\"\r\n              size=\"medium\"\r\n              zIndex={89}\r\n              desc=\"Microchip Number\"\r\n              errorString={errorStringData.pet_microchip_no}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col className=\"right-padding\" xs={12} sm={6}>\r\n            <DatePickerV2\r\n              form={form}\r\n              change={change}\r\n              name=\"pet_birth_date\"\r\n              size=\"medium\"\r\n              zIndex={88}\r\n              desc=\"Pet's Birthday\"\r\n              startDate={petMinDate}\r\n              endDate={petMaxDate}\r\n              currDate={petMinDate}\r\n              errorString={errorStringData.pet_birth_date}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <div className=\"input-wrapper-main pet-illness-desc\">\r\n              <p className=\"input-wrapper-desc\">My pet has been to the vet or hospital for other than routine checkups or preventive medicine</p>\r\n            </div>\r\n          </Col>\r\n          <Col xs={12} sm={4}>\r\n            <Selection\r\n              form={form}\r\n              change={change}\r\n              name=\"pet_illness\"\r\n              type=\"radio\"\r\n              options={[\r\n                { key: 'Yes', description: 'Yes' },\r\n                { key: 'No', description: 'No' },\r\n              ]}\r\n              sizeInSM={6}\r\n              desc=\"\"\r\n              errorString={errorStringData.pet_illness}\r\n              validateForm={() => this.validateForm(storeForm)}\r\n              noEmptyTextSelection\r\n            />\r\n          </Col>\r\n          {this.renderIllnessForm()}\r\n          <Col xs={12}>\r\n            <hr className=\"hr-margin\" />\r\n          </Col>\r\n        </Row>\r\n      </DetailForm>\r\n    );\r\n  }\r\n}\r\n\r\nPetDetail.defaultProps = {\r\n  storeForm: null,\r\n};\r\n\r\nPetDetail.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  submitCallback: PropTypes.func.isRequired,\r\n  form: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  planDetails: PropTypes.object.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  changePlan: PropTypes.func.isRequired,\r\n  constants: PropTypes.object.isRequired,\r\n  storeForm: PropTypes.object,\r\n  petFields: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  storeForm: getFormValues(formName)(state),\r\n  constants: state.insurance.constants,\r\n});\r\n\r\nexport default reduxForm({\r\n  form: formName,\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps)(PetDetail));\r\n","/**\r\n * PetDetailContainer.js\r\n * The detail container for pet\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import Insurer Logos\r\nimport Logos from 'assets/images/InsurerLogos';\r\n\r\nimport PetDetail from '../../components/Pet/PetDetail';\r\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\r\nimport { fbTag, gaTag, gaEvent, ampTag } from '../../lib/tagFunctions';\r\n\r\nclass PetDetailContainer extends Component {\r\n  componentDidMount() {\r\n    const { setFormState } = this.props;\r\n    setFormState(FORMSTATES.DETAILFORM.index);\r\n    fbTag('PPS2 - Pageview - Pet - DetailForm', { Product: 'Pet' });\r\n    gaTag({\r\n      page_title: 'Pet - Detail Form',\r\n      page_path: '/pet/detailform',\r\n    });\r\n    ampTag('PetDetailsS');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      plansData,\r\n      isLoggedIn,\r\n      setFormState,\r\n      profileValues,\r\n      piggyCallback,\r\n      petFields,\r\n      history,\r\n    } = this.props;\r\n\r\n    if (!plansData) {\r\n      return null;\r\n    }\r\n\r\n    const selectedData = plansData;\r\n\r\n    let planDetails = {\r\n      logo: Logos.others,\r\n      logoDesc: '',\r\n      planName: '',\r\n      planTotal: null,\r\n    };\r\n\r\n    try {\r\n      planDetails = {\r\n        logo: Logos[selectedData.info.insurer_slug],\r\n        logoDesc: `${selectedData.info.insurer_name}.svg`,\r\n        planName: selectedData.info.product_name,\r\n        planTotal: `$${selectedData.policyInfo[selectedData.planType].net_price.toFixed(2)}`,\r\n      };\r\n    } catch (error) {\r\n      console.log('Get plan details failed');\r\n    }\r\n\r\n    return (\r\n      <PetDetail\r\n        petFields={petFields}\r\n        selectedData={selectedData}\r\n        planDetails={planDetails}\r\n        isLoggedIn={isLoggedIn}\r\n        piggyCallback={piggyCallback}\r\n        changePlan={() => {\r\n          history.goBack();\r\n          fbTag('PPS2 - ButtonClick - Pet - DetailForm_ChangePlan', { Product: 'Pet', Click_Text: 'ChangePlan' });\r\n          gaEvent('Pet - DetailForm - ChangePlan', {\r\n            event_category: 'Pet',\r\n            event_label: 'Pet - DetailForm - ChangePlan',\r\n           });\r\n        }}\r\n        profileValues={profileValues}\r\n        submitCallback={() => {\r\n          setFormState(FORMSTATES.CHECKOUT.index);\r\n          history.push(`/pet${FORMSTATES.CHECKOUT.path}`);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nPetDetailContainer.defaultProps = {\r\n};\r\n\r\nPetDetailContainer.propTypes = {\r\n  plansData: PropTypes.object.isRequired,\r\n  piggyCallback: PropTypes.func.isRequired,\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  setFormState: PropTypes.func.isRequired,\r\n  profileValues: PropTypes.object.isRequired,\r\n  petFields: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  petFields: state.pet.petFields,\r\n  profileValues: state.userDetails,\r\n  plansData: state.pet.selectedPlanData,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PetDetailContainer));\r\n"],"sourceRoot":""}