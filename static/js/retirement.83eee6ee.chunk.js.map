{"version":3,"sources":["assets/images/Retirement/policypal-retirement-insurance-1.svg","assets/images/Retirement/policypal-retirement-insurance-2.svg","assets/images/Retirement/policypal-retirement-insurance-3.svg","components/Retirement/RetirementEditDetail.js","components/Retirement/RetirementMain.js","containers/Retirement/RetirementMainContainer.js","components/Retirement/RetirementChoosePlan.js","containers/Retirement/RetirementChoosePlanContainer.js","components/Retirement/RetirementDetail.js","containers/Retirement/RetirementDetailContainer.js","containers/Retirement/RetirementRouteContainer.js","assets/images/MainFormIcons/Avatar.svg","components/Templates/MultiCompareView/MultiCompareInner.js","components/Templates/MultiCompareView/MultiCompareView.js","assets/images/MainFormIcons/Dollar.svg","assets/images/MainFormIcons/Umbrella.svg"],"names":["module","exports","__webpack_require__","p","RetirementEditDetail","props","_this","Object","classCallCheck","this","retirementFields","possibleConstructorReturn","getPrototypeOf","call","state","errorStringData","birthDate","data","remapFormFields","form_fields","handleSubmit","bind","assertThisInitialized","handleCloseEdit","handleRevert","validateForm","nextProps","prevState","storeForm","birth_date","_this$props","setCloseCallBack","originalValues","date","age","getAge","e","errorResult","smoker","type","options","start","slashedStringDateToDate","min_date","end","max_date","retirement_monthly_sum","retirement_age","premium_term","payout_term","setState","_this2","isFirstValidate","arguments","length","undefined","_this$props2","closePopUp","setInsurFormState","setSubmit","submitCallback","history","isEmptyResult","_","isEmpty","dateReValidate","error","gaEvent","event_category","event_label","storeStringToDate","ampTag","gender","amount","start-from","term","period","FORMSTATES","CHOOSEPLAN","index","push","concat","path","_this3","_this$props3","change","resetForm","keys","forEach","key","_this4","_this$state","_this$props4","form","ageStyle","react_default","a","createElement","reactstrap_es","className","xs","sm","DatePickerV2","name","size","zIndex","desc","display_name","startDate","endDate","currDate","default_date","errorString","_this5","_this$state2","_this$props5","noGutters","src","Avatar","alt","Selection","noEmptyTextSelection","map","option","description","sizeInSM","renderBirthDate","style","marginTop","Dollar","Slider","hideWidth","inputList","displayList","simplifyCostArray","suffix","Umbrella","DropDownV2","placeholderString","dropList","_this6","_this$props6","isPopUp","onSubmit","renderFields","Button","variant","width","height","onClick","RestrictionsPopup","ref","node","resPopup","Component","defaultProps","withRouter","reduxForm","destroyOnUnmount","connect","getFormValues","isRevert","editForm","dispatch","reset","setInsuranceFormState","invokeSubmit","setRestrictionPopup","RetirementMain","retirementPromoGiveAway","FormLanding","img1","Retirement1","img2","Retirement2","img3","Retirement3","imgAlt","promo","react","Retirement_RetirementEditDetail","RetirementMainContainer","loading","clearData","getRetirementFields","setFormState","MAIN","window","scrollTo","gaTag","page_title","page_path","location","search","prevProps","loadingEnd","Retirement_RetirementMain","retirement","insurance","promoGiveaways","callBack","errorMsg","time","setLoading","clearLoading","clearRetirementData","RetirementChoosePlan","selectedPlanData","planType","partner","info","insurer_slug","price","policyInfo","net_price","console","log","message","MultiCompareView","assign","category","valuesToListen","value","extra","editDetail","buttonDesc","forceFixedOnDesktop","trackingTags","default","getAmpTags","RetirementChoosePlanContainer","retirementForm","getPlans","getInsurersList","plansData","validInsurersList","Retirement_RetirementChoosePlan","mainForm","parseForm","parseRetirementForm","setSelectedPlanData","DETAILFORM","loadingFailBackState","goBack","parsedForm","getRetirementPlans","getValidInsurersList","RetirementDetail","sessionId","errorArray","setTimeout","checkoutComplete","openCheckoutComplete","checkOutOthers","popup","openPopupWithJSX","getSynergyJSX","document","body","scrollHeight","planDetails","isLoggedIn","piggyCallback","changePlan","DetailForm","checkoutButtonDesc","TextInput","email","Date","mobile_number","PopupWithText","showCancelButton","CheckoutComplete","isQuoteOnly","isSellLeads","wrappedComponentRef","constants","RetirementDetailContainer","profileValues","selectedData","logo","Logos","others","logoDesc","planName","planTotal","insurer_name","product_name","toFixed","Retirement_RetirementDetail","userDetails","getAnonymousSession","params","propsFromState","propsFromDispatch","ownProps","objectSpread","detailForm","getSessionParams","RetirementRouteContainer","formIndex","isInitialLoad","resetStoreForm","replace","resetCompare","resetInsuranceForm","getPromoGiveaways","setInitialFormState","renderStepProgress","renderLifeForms","changeUserDetails","isMounted","formState","match","routeResult","routeHandler","isEqual","changeForm","surname","firstname","firstName","dateOfBirth","contact","StepProgressBar","maxWidth","stateList","stateDescriptions","main","charged","Retirement_RetirementChoosePlanContainer","Retirement_RetirementDetailContainer","Retirement_RetirementMainContainer","meta","isProduction","Helmet","content","RefreshTimer","refresher","invokeNewTimer","resultToMatch","MultiCompareInner","tabIndex","currentTab","tabs","policyTypes","handleTabClick","renderTabs","setPlanType","lowerCase","nextState","selectedIndex","initialIndex","categoryTab","wrappedInstance","isCameFromBackButton","currIncomingIndex","tabIndexToUse","goToIndex","setSelectedIndex","isInitial","_this$state3","oldPolicyTypes","planImages","policyTypesToUse","reduce","result","findIndex","theIndex","image","startCase","img","tabInfo","currentTabIndex","tab","newTab","_this$state4","scrollPopUpCallback","tabStyle","TabView","isDataFadeOnly","isDisableDropdown","big","CompareView","notAccordion","productChangable","ChangeInitialFormData","headerValue","conditions","Enquiry","compare","defaultInsurers","selectedInsurers","currentInsurers","parsedData","parseData","trip_type","parsedParams","setSelectedInsurers","getNewData","onInsurerClick","newDefaultInsurers","plan","slice","isLoading","hoveredIndex","insurer","insurerSlug","incomingInsurers","MultiCompareView_MultiCompareInner","mainMsg","array"],"mappings":"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","file":"static/js/retirement.83eee6ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/policypal-retirement-insurance-1.b644b32e.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-retirement-insurance-2.d77ad36d.svg\";","module.exports = __webpack_public_path__ + \"static/media/policypal-retirement-insurance-3.9b87e248.svg\";","/**\n * RetirementEditDetail.js\n * Edit Detail View for Retirement\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, getFormValues, reset } from 'redux-form';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'reactstrap';\n\nimport Avatar from 'assets/images/MainFormIcons/Avatar.svg';\nimport Dollar from 'assets/images/MainFormIcons/Dollar.svg';\nimport Umbrella from 'assets/images/MainFormIcons/Umbrella.svg';\n\nimport Button from 'components/FormsV3/Button/Button';\nimport Selection from '../Forms/Selection/Selection';\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\nimport Slider from '../Forms/Slider/Slider';\nimport DropDownV2 from '../Forms/DropDown/DropDownV2';\n\nimport RestrictionsPopup from '../Templates/RestrictionsPopup/RestrictionsPopup';\n\nimport { invokeSubmit } from '../../actions/editFormActions';\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { setRestrictionPopup } from '../../actions/restrictionsActions';\nimport { validateForm, dateReValidate } from '../../lib/validators';\nimport { storeStringToDate, getAge, slashedStringDateToDate } from '../../lib/dateFunctions';\nimport { remapFormFields, simplifyCostArray } from '../../lib/helperFunctions';\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\n\n// import './Life.scss';\n\nconst formName = 'retirement';\n\nclass RetirementEditDetail extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { storeForm } = nextProps;\n    if (storeForm && storeForm.birth_date !== prevState.birthDate) {\n      return { birthDate: storeForm.birth_date };\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n    const { retirementFields } = this.props;\n\n    this.state = {\n      errorStringData: {},\n      birthDate: null,\n      data: remapFormFields(retirementFields.form_fields),\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\n    this.handleRevert = this.handleRevert.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  componentDidMount() {\n    const { storeForm, setCloseCallBack } = this.props;\n    this.originalValues = storeForm;\n\n    if (setCloseCallBack) {\n      setCloseCallBack(this.handleRevert);\n    }\n  }\n\n  getAge(date) {\n    let age = '';\n    if (date && date !== -1) {\n      age = getAge(date);\n    }\n\n    return age;\n  }\n\n  validateForm(e) {\n    const { data } = this.state;\n\n    const fieldsToCheck = [\n      'gender',\n      'smoker',\n      'birth_date',\n      'retirement_monthly_sum',\n      'retirement_age',\n      'premium_term',\n      'payout_term',\n    ];\n\n    const errorResult = validateForm(e, fieldsToCheck, {\n      smoker: { type: 'ARRAY', data: data.smoker.options },\n      birth_date: { type: 'DATE', start: slashedStringDateToDate(data.birth_date.min_date), end: slashedStringDateToDate(data.birth_date.max_date) },\n      retirement_monthly_sum: { type: 'ARRAY', data: data.retirement_monthly_sum.options },\n      retirement_age: { type: 'ARRAY', data: data.retirement_age.options },\n      premium_term: { type: 'ARRAY', data: data.premium_term.options },\n      payout_term: { type: 'ARRAY', data: data.payout_term.options },\n    });\n\n    this.setState({\n      errorStringData: errorResult,\n    });\n\n    return errorResult;\n  }\n\n  handleSubmit(e, isFirstValidate = true) {\n    // e.preventDefault();\n    // console.log(e);\n    const { birthDate } = this.state;\n    const {\n      closePopUp,\n      setInsurFormState,\n      setSubmit,\n      storeForm,\n      submitCallback,\n      history,\n    } = this.props;\n\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\n    const isEmptyResult = _.isEmpty(errorResult);\n\n    if (dateReValidate(\n      isEmptyResult,\n      isFirstValidate,\n      errorResult,\n      error => this.setState({ errorStringData: error }),\n      () => this.handleSubmit(storeForm, false),\n    )) {\n      return;\n    }\n\n    if (isEmptyResult) {\n      setSubmit();\n      this.originalValues = storeForm;\n\n      if (submitCallback) {\n        submitCallback();\n      } else {\n        gaEvent('Retirement - Get Quote', {\n          event_category: 'Retirement',\n          event_label: 'Button - Retirement - Get Quote',\n        });\n        const date = storeStringToDate(birthDate);\n        const age = this.getAge(date);\n\n        ampTag('RetireGetQuoteA', {\n          gender: e.gender,\n          smoker: e.smoker,\n          age,\n          amount: e.retirement_monthly_sum,\n          'start-from': e.retirement_age,\n          term: e.premium_term,\n          period: e.payout_term,\n        });\n      }\n\n      setInsurFormState(FORMSTATES.CHOOSEPLAN.index);\n      history.push(`/retirement${FORMSTATES.CHOOSEPLAN.path}`);\n\n\n      if (closePopUp) {\n        closePopUp();\n      }\n    }\n  }\n\n  handleRevert() {\n    const { change, resetForm } = this.props;\n    resetForm();\n    Object.keys(this.originalValues).forEach((key) => {\n      change(key, this.originalValues[key]);\n    });\n  }\n\n  handleCloseEdit() {\n    const { closePopUp } = this.props;\n    closePopUp(this.handleRevert);\n  }\n\n  renderBirthDate() {\n    const { errorStringData, birthDate, data } = this.state;\n    const { form, change, storeForm } = this.props;\n\n    const date = storeStringToDate(birthDate);\n    const ageStyle = date ? 'active' : 'inactive';\n    const age = this.getAge(date);\n\n    return (\n      <Col className=\"birth-date-container\" xs={12} sm={10}>\n        <p className=\"age\">\n          <span className={ageStyle}>Age</span>\n          <span className=\"age-value\">{age}</span>\n        </p>\n        <DatePickerV2\n          form={form}\n          change={change}\n          name=\"birth_date\"\n          size=\"medium\"\n          zIndex={97}\n          desc={data.birth_date.display_name}\n          startDate={slashedStringDateToDate(data.birth_date.min_date)}\n          endDate={slashedStringDateToDate(data.birth_date.max_date)}\n          currDate={slashedStringDateToDate(data.birth_date.default_date)}\n          errorString={errorStringData.birth_date}\n          validateForm={() => this.validateForm(storeForm)}\n        />\n      </Col>\n    );\n  }\n\n  renderFields() {\n    const { errorStringData, data } = this.state;\n    const { form, change, storeForm } = this.props;\n\n    // console.log(data);\n\n    return (\n      <Row noGutters>\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\n          <img src={Avatar} alt=\"Avatar.svg\" />\n        </Col>\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\n          <Selection\n            form={form}\n            change={change}\n            name=\"gender\"\n            type=\"text-selection\"\n            noEmptyTextSelection\n            options={_.map(data.gender.options, option => ({\n              key: option,\n              description: option,\n            }))}\n            sizeInSM={6}\n            desc={data.gender.display_name}\n            zIndex={99}\n            errorString={errorStringData.gender}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\n          <Selection\n            form={form}\n            change={change}\n            name=\"smoker\"\n            type=\"text-selection\"\n            noEmptyTextSelection\n            options={_.map(data.smoker.options, option => ({\n              key: option,\n              description: option,\n            }))}\n            sizeInSM={6}\n            zIndex={98}\n            desc={data.smoker.display_name}\n            errorString={errorStringData.smoker}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\n        {this.renderBirthDate()}\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\n          <img style={{ marginTop: 32 }} src={Dollar} alt=\"Dollar.svg\" />\n        </Col>\n        <Col xs={12} sm={10}>\n          <Slider\n            form={form}\n            change={change}\n            name=\"retirement_monthly_sum\"\n            desc={data.retirement_monthly_sum.display_name}\n            zIndex={96}\n            hideWidth={576}\n            inputList={data.retirement_monthly_sum.options}\n            displayList={simplifyCostArray(data.retirement_monthly_sum.options)}\n            suffix=\"monthly retirement\"\n            errorString={errorStringData.retirement_monthly_sum}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"justify-content-center icon icon-car d-none d-sm-flex\" sm={2}>\n          <img src={Umbrella} alt=\"Umbrella.svg\" />\n        </Col>\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\n          <DropDownV2\n            form={form}\n            change={change}\n            name=\"retirement_age\"\n            placeholderString=\"Age\"\n            dropList={data.retirement_age.options}\n            size=\"medium\"\n            zIndex={95}\n            desc={data.retirement_age.display_name}\n            errorString={errorStringData.retirement_age}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"input-padding-left\" xs={12} sm={5}>\n          <DropDownV2\n            form={form}\n            change={change}\n            name=\"premium_term\"\n            placeholderString=\"Term\"\n            dropList={data.premium_term.options}\n            size=\"medium\"\n            zIndex={94}\n            desc={data.premium_term.display_name}\n            errorString={errorStringData.premium_term}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n        <Col className=\"justify-content-center icon d-none d-sm-flex\" sm={2} />\n        <Col className=\"input-padding-right\" xs={12} sm={5}>\n          <DropDownV2\n            form={form}\n            change={change}\n            name=\"payout_term\"\n            placeholderString=\"Payout\"\n            dropList={data.payout_term.options}\n            size=\"medium\"\n            zIndex={93}\n            desc={data.payout_term.display_name}\n            errorString={errorStringData.payout_term}\n            validateForm={() => this.validateForm(storeForm)}\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n\n  render() {\n    const {\n      handleSubmit,\n      isPopUp,\n      form,\n    } = this.props;\n\n    return (\n      <div className=\"landing-form-container\">\n        {\n          isPopUp ?\n            <p className=\"edit-header\">Edit Retirement Insurance Details</p>\n          :\n            null\n        }\n        <form onSubmit={handleSubmit(this.handleSubmit)}>\n          <Row className=\"input-offset\" noGutters>\n            {this.renderFields()}\n          </Row>\n          <Row className=\"align-items-center button-container\" noGutters>\n            {\n              isPopUp ?\n                <Col className=\"justify-content-center button\" xs={12}>\n                  <Row noGutters>\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\n                      <Button\n                        className=\"button-left\"\n                        variant=\"medium-flat\"\n                        width={165}\n                        height={72}\n                        onClick={() => this.handleCloseEdit()}\n                      >\n                        <p>Cancel</p>\n                      </Button>\n                    </Col>\n                    <Col className=\"button-container-inner\" xs={12} sm={6}>\n                      <Button\n                        type=\"submit\"\n                        variant=\"medium-flat-green\"\n                        width={165}\n                        height={72}\n                      >\n                        <p>Save</p>\n                      </Button>\n                    </Col>\n                  </Row>\n                </Col>\n              :\n                <Col className=\"justify-content-center button\" xs={12}>\n                  <Button type=\"submit\" variant=\"medium-flat-green\" width={165} height={72}>\n                    <p>Get Quote</p>\n                  </Button>\n                </Col>\n            }\n          </Row>\n        </form>\n        <RestrictionsPopup ref={node => this.resPopup = node} />\n      </div>\n    );\n  }\n}\n\nRetirementEditDetail.defaultProps = {\n  isPopUp: false,\n  setCloseCallBack: null,\n  storeForm: null,\n  closePopUp: null,\n  submitCallback: null,\n};\n\nRetirementEditDetail.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  form: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired,\n  isPopUp: PropTypes.bool,\n  resetForm: PropTypes.func.isRequired,\n  closePopUp: PropTypes.func,\n  setInsurFormState: PropTypes.func.isRequired,\n  setSubmit: PropTypes.func.isRequired,\n  storeForm: PropTypes.object,\n  setCloseCallBack: PropTypes.func,\n  submitCallback: PropTypes.func,\n  retirementFields: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  storeForm: getFormValues(formName)(state),\n  isRevert: state.editForm.isRevert,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  resetForm: () => {\n    dispatch(reset(formName));\n  },\n  setInsurFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n  setSubmit: () => {\n    dispatch(invokeSubmit());\n  },\n  setRestrictionPopup: (data) => {\n    dispatch(setRestrictionPopup(data));\n  },\n});\n\nexport default withRouter(reduxForm({\n  form: formName,\n  destroyOnUnmount: false,\n})(connect(mapStateToProps, mapDispatchToProps)(RetirementEditDetail)));\n","/**\n * RetirementMain.js\n * Main Landing View for Retirement\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Retirement1 from 'assets/images/Retirement/policypal-retirement-insurance-1.svg';\nimport Retirement2 from 'assets/images/Retirement/policypal-retirement-insurance-2.svg';\nimport Retirement3 from 'assets/images/Retirement/policypal-retirement-insurance-3.svg';\n\nimport RetirementEditDetail from './RetirementEditDetail';\nimport FormLanding from '../Templates/FormLanding/FormLanding';\n\nimport './Retirement.scss';\n\nclass RetirementMain extends Component {\n  render() {\n    const { retirementFields, retirementPromoGiveAway } = this.props;\n\n    return (\n      <div className=\"retirement-container\">\n        <FormLanding\n          img1={Retirement1}\n          img2={Retirement2}\n          img3={Retirement3}\n          imgAlt=\"PolicyPal Retirement Insurance\"\n          promo={retirementPromoGiveAway}\n          desc={\n            <Fragment>\n              <p>Get your Retirement Quotation</p>\n              <p>in minutes!</p>\n            </Fragment>\n          }\n        >\n          <RetirementEditDetail\n            retirementFields={retirementFields}\n          />\n        </FormLanding>\n      </div>\n    );\n  }\n}\n\nRetirementMain.defaultProps = {\n  retirementPromoGiveAway: null,\n};\n\nRetirementMain.propTypes = {\n  retirementFields: PropTypes.object.isRequired,\n  retirementPromoGiveAway: PropTypes.object,\n};\n\nexport default RetirementMain;\n","/**\n * RetirementMainContainer.js\n * The main container for retirement\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RetirementMain from '../../components/Retirement/RetirementMain';\n\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { getRetirementFields, clearRetirementData } from '../../actions/retirementActions';\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\n\nclass RetirementMainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      loading,\n      retirementFields,\n      history,\n      clearData,\n    } = this.props;\n\n    clearData();\n\n    if (!retirementFields) {\n      loading(() => history.push('/'));\n      this.props.getRetirementFields();\n    }\n  }\n\n  componentDidMount() {\n    const { setFormState, history } = this.props;\n    setFormState(FORMSTATES.MAIN.index);\n\n    window.scrollTo(0, 0);\n\n    gaTag({\n      page_title: 'Retirement',\n      page_path: `/retirement${history.location.search}`,\n    });\n    ampTag('RetireFormS');\n  }\n\n  componentDidUpdate(prevProps) {\n    const { retirementFields, loadingEnd } = this.props;\n    if (!prevProps.retirementFields && retirementFields) {\n      loadingEnd();\n    }\n  }\n\n  render() {\n    const { retirementFields, retirementPromoGiveAway } = this.props;\n\n    if (!retirementFields) {\n      return null;\n    }\n\n    return (\n      <RetirementMain\n        retirementFields={retirementFields}\n        retirementPromoGiveAway={retirementPromoGiveAway}\n      />\n    );\n  }\n}\n\nRetirementMainContainer.defaultProps = {\n  retirementFields: null,\n  retirementPromoGiveAway: null,\n};\n\nRetirementMainContainer.propTypes = {\n  retirementFields: PropTypes.object,\n  getRetirementFields: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n  loadingEnd: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  retirementPromoGiveAway: PropTypes.object,\n  clearData: PropTypes.func.isRequired,\n  setFormState: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  retirementFields: state.retirement.retirementFields,\n  retirementPromoGiveAway: state.insurance.promoGiveaways.retirement,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getRetirementFields: () => {\n    dispatch(getRetirementFields());\n  },\n  loading: (callBack, errorMsg, time) => {\n    dispatch(setLoading(callBack, errorMsg, time));\n  },\n  loadingEnd: () => {\n    dispatch(clearLoading());\n  },\n  clearData: () => {\n    dispatch(clearRetirementData());\n  },\n  setFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RetirementMainContainer));\n","/**\n * RetirementChoosePlan.js\n * Choose Plan View for retirement\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Import Insurer Logos\nimport MultiCompareView from '../Templates/MultiCompareView/MultiCompareView';\n\nimport RetirementEditDetail from './RetirementEditDetail';\n\nimport { ampTag } from '../../lib/tagFunctions';\n\nclass RetirementChoosePlan extends Component {\n  getAmpTags(selectedPlanData, planType) {\n    try {\n      return ({\n        partner: selectedPlanData.info.insurer_slug,\n        price: selectedPlanData.policyInfo[planType].net_price,\n      });\n    } catch (error) {\n      console.log(`Retirement choose plan Buy now Amp tag failed: ${error.message}`);\n    }\n\n    return {};\n  }\n\n  render() {\n    const { retirementFields } = this.props;\n\n    return (\n      <MultiCompareView\n        {...this.props}\n        category=\"retirement\"\n        form=\"retirement\"\n        editForm={{\n          valuesToListen: [\n            { value: 'gender', desc: 'Gender' },\n            { value: 'smoker', desc: 'S.Status' },\n            { value: 'birth_date', desc: 'Age' },\n            { value: 'retirement_monthly_sum', desc: 'R. Sum', extra: 'cost_simplify' },\n            { value: 'retirement_age', desc: 'R. Age' },\n            { value: 'premium_term', desc: 'Period' },\n            { value: 'payout_term', desc: 'Pay for' },\n          ],\n          editDetail: <RetirementEditDetail retirementFields={retirementFields} isPopUp />,\n        }}\n        buttonDesc=\"Select\"\n        forceFixedOnDesktop\n        trackingTags={{\n          default: (selectedPlanData) => {\n            ampTag('RetireSelectA', this.getAmpTags(selectedPlanData, 'default'));\n          },\n        }}\n      />\n    );\n  }\n}\n\nRetirementChoosePlan.defaultProps = {\n};\n\nRetirementChoosePlan.propTypes = {\n  retirementFields: PropTypes.object.isRequired,\n};\n\nexport default RetirementChoosePlan;\n","/**\n * RetirementChoosePlanContainer.js\n * The choose plan container for retirement\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { getFormValues } from 'redux-form';\nimport PropTypes from 'prop-types';\n\nimport { setInsuranceFormState, FORMSTATES } from '../../actions/insuranceActions';\nimport { parseRetirementForm, getRetirementPlans, getValidInsurersList, clearRetirementData, setSelectedPlanData } from '../../actions/retirementActions';\n\nimport RetirementChoosePlan from '../../components/Retirement/RetirementChoosePlan';\nimport { gaTag, ampTag } from '../../lib/tagFunctions';\n\nclass RetirementChoosePlanContainer extends Component {\n  componentDidMount() {\n    const { setFormState } = this.props;\n    setFormState(FORMSTATES.CHOOSEPLAN.index);\n\n    gaTag({\n      page_title: 'Retirement - Choose Plan',\n      page_path: '/retirement/chooseplan',\n    });\n    ampTag('RetireResultsS');\n  }\n\n  render() {\n    const {\n      retirementForm,\n      getPlans,\n      getInsurersList,\n      clearData,\n      setFormState,\n      plansData,\n      validInsurersList,\n      retirementFields,\n      history,\n    } = this.props;\n\n    return (\n      <RetirementChoosePlan\n        mainForm={retirementForm}\n        retirementFields={retirementFields}\n        parseForm={parseRetirementForm}\n        getPlans={getPlans}\n        getInsurersList={getInsurersList}\n        clearData={clearData}\n        setSelectedPlanData={this.props.setSelectedPlanData}\n        setFormState={() => {\n          setFormState(FORMSTATES.DETAILFORM.index);\n          history.push(`/retirement${FORMSTATES.DETAILFORM.path}`);\n        }}\n        loadingFailBackState={() => {\n          history.goBack();\n        }}\n        plansData={plansData}\n        validInsurersList={validInsurersList}\n      />\n    );\n  }\n}\n\nRetirementChoosePlanContainer.defaultProps = {\n  plansData: null,\n  validInsurersList: null,\n};\n\nRetirementChoosePlanContainer.propTypes = {\n  retirementForm: PropTypes.object.isRequired,\n  getPlans: PropTypes.func.isRequired,\n  getInsurersList: PropTypes.func.isRequired,\n  clearData: PropTypes.func.isRequired,\n  setSelectedPlanData: PropTypes.func.isRequired,\n  setFormState: PropTypes.func.isRequired,\n  plansData: PropTypes.array,\n  validInsurersList: PropTypes.array,\n  retirementFields: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  retirementForm: getFormValues('retirement')(state),\n  retirementFields: state.retirement.retirementFields,\n  plansData: state.retirement.plansData,\n  validInsurersList: state.retirement.validInsurersList,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n  getPlans: (parsedForm) => {\n    dispatch(getRetirementPlans(parsedForm));\n  },\n  getInsurersList: (parsedForm) => {\n    dispatch(getValidInsurersList(parsedForm));\n  },\n  clearData: () => {\n    dispatch(clearRetirementData());\n  },\n  setSelectedPlanData: (data) => {\n    dispatch(setSelectedPlanData(data));\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RetirementChoosePlanContainer));\n","/**\n * RetirementDetail.js\n * Detail view for Retirement\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, getFormValues } from 'redux-form';\nimport { Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n// Import Insurer Logos\nimport DetailForm from '../Templates/DetailForm/DetailForm';\n\nimport TextInput from '../Forms/TextInput/TextInput';\nimport DatePickerV2 from '../Forms/DatePicker/DatePickerV2';\nimport CheckoutComplete from '../Templates/CheckoutPopup/CheckoutComplete';\nimport PopupWithText from '../Templates/PopupWithText/PopupWithText';\n\nimport { getSynergyJSX } from '../../actions/insuranceActions';\nimport { validateForm, dateReValidate } from '../../lib/validators';\nimport { setLoading, clearLoading } from '../../actions/loadingScreenActions';\nimport { gaEvent, ampTag } from '../../lib/tagFunctions';\n\nconst formName = 'retirement-detail';\n\nclass RetirementDetail extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sessionId,\n    } = nextProps;\n\n    if (sessionId !== prevState.sessionId) {\n      return ({\n        sessionId,\n      });\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sessionId: null,\n      errorStringData: {},\n      errorArray: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { sessionId } = this.state;\n    const { loadingEnd } = this.props;\n\n    if (sessionId) {\n      loadingEnd();\n      setTimeout(() => {\n        this.checkoutComplete.openCheckoutComplete();\n        ampTag('RetireConfirmationS');\n      }, 300);\n    }\n  }\n\n  validateForm(e) {\n    const fieldsToCheck = [\n      'email',\n      'name',\n      'birth_date',\n      'mobile_number',\n    ];\n\n    const error = validateForm(e, fieldsToCheck);\n\n    this.setState({\n      errorStringData: error,\n    });\n\n    let errorArray = [];\n    if (!_.isEmpty(error)) {\n      errorArray = [<p className=\"error-string\" key=\"error-1\">Fields are not properly filled, please check again.</p>];\n    }\n\n    this.setState({\n      errorArray,\n    });\n\n    return error;\n  }\n\n  handleSubmit(e, isFirstValidate = true) {\n    // console.log(e);\n    const { checkOutOthers, loading, storeForm } = this.props;\n    const errorResult = this.validateForm(isFirstValidate ? e : storeForm);\n    const isEmptyResult = _.isEmpty(errorResult);\n\n    if (dateReValidate(\n      isEmptyResult,\n      isFirstValidate,\n      errorResult,\n      error => this.setState({ errorStringData: error, errorArray: null }),\n      () => this.handleSubmit(storeForm, false),\n    )) {\n      return;\n    }\n\n    if (isEmptyResult) {\n      ampTag('RetireConfirm1A');\n      ampTag('RetireNoticeS');\n      this.popup.openPopupWithJSX(getSynergyJSX(), true, () => {\n        setTimeout(() => {\n          loading();\n          checkOutOthers(e);\n\n          gaEvent('Retirement - DetailForm - Checkout', {\n            event_category: 'Retirement',\n            event_label: 'Retirement - DetailForm - Checkout',\n          });\n          ampTag('RetireConfirm2A');\n        }, 350);\n      });\n    }\n    window.scrollTo(0, document.body.scrollHeight);\n  }\n\n  render() {\n    const { errorStringData, errorArray } = this.state;\n    const {\n      form,\n      change,\n      planDetails,\n      isLoggedIn,\n      piggyCallback,\n      changePlan,\n      storeForm,\n    } = this.props;\n\n    // console.log(petMinDate, petMaxDate);\n    return (\n      <Fragment>\n        <DetailForm\n          category=\"retirement\"\n          changePlan={changePlan}\n          handleSubmit={this.props.handleSubmit}\n          onSubmit={this.handleSubmit}\n          change={change}\n          form={form}\n          planDetails={planDetails}\n          isLoggedIn={isLoggedIn}\n          piggyCallback={piggyCallback}\n          errorArray={errorArray}\n          checkoutButtonDesc=\"Confirm\"\n        >\n          <Row className=\"main-form\" noGutters>\n            <Col xs={12}>\n              <TextInput\n                form={form}\n                change={change}\n                name=\"email\"\n                placeholderString=\"\"\n                size=\"medium\"\n                zIndex={99}\n                desc=\"Email Address\"\n                errorString={errorStringData.email}\n                validateForm={() => this.validateForm(storeForm)}\n              />\n            </Col>\n            <Col className=\"right-padding\" xs={12} sm={6}>\n              <TextInput\n                form={form}\n                change={change}\n                name=\"name\"\n                placeholderString=\"\"\n                size=\"medium\"\n                zIndex={98}\n                desc=\"Full Name\"\n                errorString={errorStringData.name}\n                validateForm={() => this.validateForm(storeForm)}\n              />\n            </Col>\n            <Col className=\"left-padding\" xs={12} sm={6}>\n              <DatePickerV2\n                form={form}\n                change={change}\n                name=\"birth_date\"\n                size=\"medium\"\n                zIndex={97}\n                desc=\"Date of Birth\"\n                errorString={errorStringData.birth_date}\n                validateForm={() => this.validateForm(storeForm)}\n                endDate={new Date()}\n              />\n            </Col>\n            <Col className=\"right-padding\" xs={12} sm={6}>\n              <TextInput\n                form={form}\n                change={change}\n                name=\"mobile_number\"\n                placeholderString=\"\"\n                size=\"medium\"\n                zIndex={96}\n                desc=\"Mobile Number\"\n                errorString={errorStringData.mobile_number}\n                validateForm={() => this.validateForm(storeForm)}\n              />\n            </Col>\n          </Row>\n        </DetailForm>\n        <PopupWithText\n          ref={node => this.popup = node}\n          showCancelButton\n        />\n        <CheckoutComplete\n          isQuoteOnly\n          isSellLeads\n          wrappedComponentRef={node => this.checkoutComplete = node}\n        />\n      </Fragment>\n    );\n  }\n}\n\nRetirementDetail.defaultProps = {\n  storeForm: null,\n};\n\nRetirementDetail.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  checkOutOthers: PropTypes.func.isRequired,\n  form: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired,\n  planDetails: PropTypes.object.isRequired,\n  isLoggedIn: PropTypes.bool.isRequired,\n  piggyCallback: PropTypes.func.isRequired,\n  changePlan: PropTypes.func.isRequired,\n  storeForm: PropTypes.object,\n  loading: PropTypes.func.isRequired,\n  loadingEnd: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  storeForm: getFormValues(formName)(state),\n  constants: state.insurance.constants,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loading: (callBack, errorMsg, time) => {\n    dispatch(setLoading(callBack, errorMsg, time));\n  },\n  loadingEnd: () => {\n    dispatch(clearLoading());\n  },\n});\n\nexport default reduxForm({\n  form: formName,\n  destroyOnUnmount: false,\n})(connect(mapStateToProps, mapDispatchToProps)(RetirementDetail));\n","/**\n * RetirementDetailContainer.js\n * The detail container for retirement\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getFormValues } from 'redux-form';\nimport PropTypes from 'prop-types';\n\n// Import Insurer Logos\nimport Logos from 'assets/images/InsurerLogos';\n\nimport RetirementDetail from '../../components/Retirement/RetirementDetail';\nimport { setInsuranceFormState, getAnonymousSession, FORMSTATES } from '../../actions/insuranceActions';\nimport { getSessionParams } from '../../actions/retirementActions';\nimport { gaTag, gaEvent, ampTag } from '../../lib/tagFunctions';\n\nclass RetirementDetailContainer extends Component {\n  componentDidMount() {\n    const { setFormState } = this.props;\n    setFormState(FORMSTATES.DETAILFORM.index);\n    gaTag({\n      page_title: 'Retirement - Detail Form',\n      page_path: '/retirement/detailform',\n    });\n    ampTag('RetireDetailsS');\n  }\n\n  render() {\n    const {\n      plansData,\n      isLoggedIn,\n      profileValues,\n      piggyCallback,\n      retirementFields,\n      checkOutOthers,\n      sessionId,\n      history,\n    } = this.props;\n\n    if (!plansData) {\n      return null;\n    }\n\n    const selectedData = plansData;\n\n    let planDetails = {\n      logo: Logos.others,\n      logoDesc: '',\n      planName: '',\n      planTotal: null,\n    };\n\n    try {\n      planDetails = {\n        logo: Logos[selectedData.info.insurer_slug],\n        logoDesc: `${selectedData.info.insurer_name}.svg`,\n        planName: selectedData.info.product_name,\n        planTotal: `$${selectedData.policyInfo[selectedData.planType].net_price.toFixed(2)}`,\n      };\n    } catch (error) {\n      console.log('Get plan details failed');\n    }\n\n    return (\n      <RetirementDetail\n        checkOutOthers={checkOutOthers}\n        retirementFields={retirementFields}\n        sessionId={sessionId}\n        selectedData={selectedData}\n        planDetails={planDetails}\n        isLoggedIn={isLoggedIn}\n        piggyCallback={piggyCallback}\n        changePlan={() => {\n          history.goBack();\n          gaEvent('Retirement - DetailForm - ChangePlan', {\n            event_category: 'Retirement',\n            event_label: 'Retirement - DetailForm - ChangePlan',\n          });\n        }}\n        profileValues={profileValues}\n        // submitCallback={() => { setFormState(FORMSTATES.CHECKOUT); }}\n      />\n    );\n  }\n}\n\nRetirementDetailContainer.defaultProps = {\n  sessionId: null,\n  plansData: null,\n};\n\nRetirementDetailContainer.propTypes = {\n  plansData: PropTypes.object,\n  piggyCallback: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool.isRequired,\n  setFormState: PropTypes.func.isRequired,\n  profileValues: PropTypes.object.isRequired,\n  retirementFields: PropTypes.object.isRequired,\n  checkOutOthers: PropTypes.func.isRequired,\n  sessionId: PropTypes.string,\n  history: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = state => ({\n  retirementForm: getFormValues('retirement')(state),\n  retirementFields: state.retirement.retirementFields,\n  profileValues: state.userDetails,\n  plansData: state.retirement.selectedPlanData,\n  sessionId: state.insurance.sessionId,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFormState: (state) => {\n    dispatch(setInsuranceFormState(state));\n  },\n  getAnonymousSession: (params) => {\n    dispatch(getAnonymousSession(params, true));\n  },\n});\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => ({\n  ...ownProps,\n  ...propsFromState,\n  ...propsFromDispatch,\n  checkOutOthers: (detailForm) => {\n    propsFromDispatch.getAnonymousSession(getSessionParams(\n      propsFromState.retirementForm,\n      detailForm,\n      propsFromState.plansData,\n    ), true);\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(RetirementDetailContainer));\n","/**\n * RetirementRouteContainer.js\n * The wrapper container for retirement\n *\n * @version 0.0.1\n * @author [Wilson](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { change, reset } from 'redux-form';\nimport { /* Prompt, */ withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { resetCompare } from '../../actions/compareActions';\nimport { getPromoGiveaways, resetInsuranceForm, FORMSTATES } from '../../actions/insuranceActions';\nimport { clearRetirementData } from '../../actions/retirementActions';\nimport { isProduction } from '../../lib/tagFunctions';\n\nimport StepProgressBar from '../../components/Templates/StepProgressBar/StepProgressBar';\nimport RefreshTimer from '../../components/Templates/RefreshTimer/RefreshTimer';\n\nimport RetirementMainContainer from './RetirementMainContainer';\nimport RetirementChoosePlanContainer from './RetirementChoosePlanContainer';\nimport RetirementDetailContainer from './RetirementDetailContainer';\n\nimport { routeHandler } from '../../lib/helperFunctions';\n\nconst formName = 'retirement';\nconst detailFormName = 'retirement-detail';\n\nclass RetirementRouteContainer extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { formIndex, isMounted } = prevState;\n    const { formState, match, history } = nextProps;\n\n    if (isMounted) {\n      const routeResult = routeHandler(formName, formState, formIndex, match, history);\n      if (routeResult && routeResult.formIndex !== null) {\n        return ({\n          formIndex: routeResult.formIndex,\n        });\n      }\n    }\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formIndex: 0,\n      isInitialLoad: true,\n    };\n\n    const {\n      resetStoreForm,\n      retirementPromoGiveAway,\n      clearData,\n      history,\n    } = this.props;\n\n    history.replace(`/retirement${history.location.search}`);\n\n    clearData();\n    this.props.resetCompare();\n    this.props.resetInsuranceForm();\n\n    resetStoreForm('retirement');\n    resetStoreForm('retirement-detail');\n\n    if (retirementPromoGiveAway === undefined) {\n      this.props.getPromoGiveaways();\n    }\n\n    this.setInitialFormState = this.setInitialFormState.bind(this);\n    this.renderStepProgress = this.renderStepProgress.bind(this);\n    this.renderLifeForms = this.renderLifeForms.bind(this);\n    this.changeUserDetails = this.changeUserDetails.bind(this);\n  }\n\n  componentDidMount() {\n    // window.addEventListener('beforeunload', this.handleLeavePage);\n    this.setInitialFormState();\n    this.setState({\n      // eslint-disable-next-line\n      isMounted: true,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isInitialLoad } = this.state;\n    const { userDetails } = this.props;\n\n    if (isInitialLoad && _.isEqual(userDetails, prevProps.userDetails)) {\n      this.changeUserDetails();\n    }\n  }\n\n  componentWillUnmount() {\n    const { clearData, resetStoreForm } = this.props;\n    clearData();\n    this.props.resetCompare();\n    this.props.resetInsuranceForm();\n\n    resetStoreForm('retirement');\n    resetStoreForm('retirement-detail');\n  }\n\n  setInitialFormState() {\n    const { changeForm } = this.props;\n\n    changeForm(formName, 'birth_date', '01 Jan 1990');\n    changeForm(formName, 'retirement_age', '60');\n    changeForm(formName, 'premium_term', '15 years');\n    changeForm(formName, 'payout_term', '15 years');\n\n    this.changeUserDetails();\n  }\n\n  changeUserDetails() {\n    const { isInitialLoad } = this.state;\n    const { userDetails, changeForm } = this.props;\n\n    if (userDetails) {\n      const surname = userDetails && userDetails.surname ? userDetails.surname : '';\n      const firstname = userDetails && userDetails.firstName ? ` ${userDetails.firstName}` : '';\n\n      changeForm(detailFormName, 'email', userDetails.email);\n      changeForm(detailFormName, 'name', `${surname}${firstname}`);\n      changeForm(detailFormName, 'birth_date', userDetails.dateOfBirth);\n      changeForm(detailFormName, 'mobile_number', userDetails.contact);\n\n      if (isInitialLoad) {\n        this.setState({\n          isInitialLoad: false,\n        });\n      }\n    }\n  }\n\n  renderStepProgress() {\n    const { formIndex } = this.state;\n    return (\n      <StepProgressBar\n        maxWidth=\"556px\"\n        formState={formIndex}\n        inputList={[\n          'Choose Plan',\n          'Details',\n        ]}\n        form=\"life\"\n        stateList={[\n          FORMSTATES.CHOOSEPLAN,\n          FORMSTATES.DETAILFORM,\n        ]}\n        stateDescriptions={[\n          { main: '' /* 'Choose your Plan', sub: 'Compare price plans from multiple companies' */},\n          { main: 'Fill in your details - Get $5 Credits' },\n        ]}\n        charged={false}\n      />\n    );\n  }\n\n  renderLifeForms() {\n    const { formIndex } = this.state;\n    const {\n      userDetails,\n    } = this.props;\n\n    const isLoggedIn = !_.isEmpty(userDetails);\n\n\n    switch (formIndex) {\n      case FORMSTATES.CHOOSEPLAN.index:\n        return <RetirementChoosePlanContainer isLoggedIn={isLoggedIn} />;\n      case FORMSTATES.DETAILFORM.index:\n        return (\n          <RetirementDetailContainer\n            isLoggedIn={isLoggedIn}\n            piggyCallback={this.changeUserDetails}\n          />\n        );\n      default:\n        return <RetirementMainContainer isLoggedIn={isLoggedIn} />;\n    }\n  }\n\n  render() {\n    const { retirementPromoGiveAway, constants } = this.props;\n\n    if (!constants || retirementPromoGiveAway === undefined) {\n      return null;\n    }\n\n    const meta = isProduction ? 'PolicyPal, retirement insurance, singapore retirement insurance, retirement planning, retirement, CPF, annuity, financial planning, pension, 401k, retirement calculator, retiree, retirement accounts, retirement quotes, best retirement plans, retirement fund, insured retirement plan, retirement planning singapore, 401k plan, early retirement, pension plan' : '';\n    return (\n      <Fragment>\n        <Helmet>\n          <meta name=\"keywords\" content={meta} />\n          <title>PolicyPal 2.0 - Retirement Insurance</title>\n          <meta name=\"title\" content=\"PolicyPal 2.0 - Retirement Insurance\" />\n          <meta name=\"description\" content=\"Browse products for retirement insurance.\" />\n        </Helmet>\n        {/* {\n          formState !== FORMSTATES.MAIN ?\n            <Prompt\n              when={true}\n              message=\"Are you sure you want to leave current page?\"\n            />\n          :\n            null\n        } */}\n        {this.renderStepProgress()}\n        {this.renderLifeForms()}\n        <RefreshTimer ref={(node) => {\n            if (!this.refresher) {\n              node.invokeNewTimer();\n            }\n            this.refresher = node;\n          }}\n        />\n      </Fragment>\n    );\n  }\n}\n\nRetirementRouteContainer.defaultProps = {\n  userDetails: null,\n  retirementPromoGiveAway: undefined,\n  constants: null,\n};\n\nRetirementRouteContainer.propTypes = {\n  clearData: PropTypes.func.isRequired,\n  resetCompare: PropTypes.func.isRequired,\n  getPromoGiveaways: PropTypes.func.isRequired,\n  resetInsuranceForm: PropTypes.func.isRequired,\n  changeForm: PropTypes.func.isRequired,\n  resetStoreForm: PropTypes.func.isRequired,\n  userDetails: PropTypes.object,\n  retirementPromoGiveAway: PropTypes.object,\n  constants: PropTypes.object,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  retirementPromoGiveAway: state.insurance.promoGiveaways.retirement,\n  formState: state.insurance.formState,\n  constants: state.insurance.constants,\n  userDetails: state.userDetails.data,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeForm: (form, key, value) => (\n    dispatch(change(form, key, value))\n  ),\n  resetInsuranceForm: () => (\n    dispatch(resetInsuranceForm())\n  ),\n  resetStoreForm: form => (\n    dispatch(reset(form))\n  ),\n  getPromoGiveaways: () => {\n    dispatch(getPromoGiveaways('retirement'));\n  },\n  resetCompare: () => {\n    dispatch(resetCompare());\n  },\n  clearData: () => {\n    dispatch(clearRetirementData());\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RetirementRouteContainer));\n","module.exports = __webpack_public_path__ + \"static/media/Avatar.b01356d4.svg\";","/**\n * MultiCompareInner.js\n * Multi Compare view with different insurers\n * Contains the main policy type tab view logic\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Row } from 'reactstrap';\n\nimport TabView from '../../Templates/TabView/TabView';\nimport CompareView from '../../Templates/CompareView/CompareView';\nimport ChangeInitialFormData from '../../Templates/ChangeInitialFormData/ChangeInitialFormData';\n\nimport Enquiry from '../../Templates/Enquiry/Enquiry';\n\nimport { setPlanType, setSelectedIndex } from '../../../actions/compareActions';\n\n// The default tabs array\nconst resultToMatch = ['basic', 'essential', 'elite', 'default'];\n\nclass MultiCompareInner extends Component {\n  /**\n   * Lifecycle Method - getDerivedStateFromProps\n   */\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // Goes here first before did mount\n    // Get new policy available policy types\n    if (nextProps.data.policyTypes !== prevState.policyTypes) {\n      return ({\n        policyTypes: nextProps.data.policyTypes,\n      });\n    }\n\n    return null;\n  }\n\n  /**\n   * Lifecycle Method - constructor\n   */\n  constructor(props) {\n    super(props);\n\n    const { data } = this.props;\n    // tabIndex - The current tab index in effect\n    // currentTab - The name of the current tab\n    // tabs - The tabs array data\n    // policyTypes - The possible policy types to display\n    this.state = {\n      tabIndex: 0,\n      currentTab: null,\n      tabs: null,\n      policyTypes: data.policyTypes,\n    };\n\n    this.handleTabClick = this.handleTabClick.bind(this);\n    this.renderTabs = this.renderTabs.bind(this);\n  }\n\n  /**\n   * Lifecycle Method - componentDidMount\n   */\n  componentDidMount() {\n    // Render inital tabs\n    const tabs = this.renderTabs(null, true);\n    // Set initial plan type\n    this.props.setPlanType(_.lowerCase(tabs.currentTab));\n  }\n\n  /**\n   * Lifecycle Method - shouldComponentUpdate\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const { policyTypes, tabs, currentTab } = this.state;\n    const { data } = this.props;\n\n    // Render new tabs if policy types are changed\n    if (!_.isEqual(policyTypes, nextState.policyTypes)) {\n      this.renderTabs(nextState.policyTypes);\n    }\n\n    // Update only when tabs or data are updated\n    return tabs !== nextState.tabs ||\n          currentTab !== nextState.currentTab ||\n          data !== nextProps.data;\n  }\n\n  /**\n   * Lifecycle Method - componentDidUpdate\n   */\n  componentDidUpdate(prevProps, prevState) {\n    const { tabs, tabIndex } = this.state;\n    const { selectedIndex, initialIndex } = this.props;\n\n    // If new tabs\n    if (tabs !== prevState.tabs) {\n      if (this.categoryTab && this.categoryTab.wrappedInstance) {\n        // If using back previous selected index and not the same state as local index\n        const isCameFromBackButton = selectedIndex && selectedIndex !== tabIndex;\n        // If this is the first time user enter compare view\n        const isFirstTime = selectedIndex === null && initialIndex;\n\n        if (isCameFromBackButton || isFirstTime) {\n          const currIncomingIndex = isCameFromBackButton ? selectedIndex : initialIndex;\n          // Check if previous selected index is still within range\n          const tabIndexToUse = currIncomingIndex < tabs.length ? currIncomingIndex : 0;\n          // Go to the tab and set new state;\n          this.categoryTab.wrappedInstance.goToIndex(tabIndexToUse, true);\n          this.setState({ tabIndex: tabIndexToUse });\n\n          // Set index to store\n          this.props.setSelectedIndex(tabIndexToUse);\n          return;\n        }\n\n        // This happens when tabs are not the same when changing form within\n        // compare view. It will try to go to the last selected plan type\n        this.categoryTab.wrappedInstance.goToIndex(tabIndex);\n      }\n    }\n  }\n\n  /**\n   * When clicked on main tabs\n   *\n   * @param {string} type - Selected plan type\n   * @param {number} index - Tab index\n   */\n  handleTabClick(type, index) {\n    // Set current plan type\n    this.setState({\n      currentTab: type,\n    });\n\n    this.props.setPlanType(type);\n    this.props.setSelectedIndex(index);\n  }\n\n  /**\n   * Render Main tabs\n   *\n   * @param {array} policyTypes - The avaliable policy types\n   * @param {bool} isInitial - If is initial first time load\n   */\n  renderTabs(policyTypes = null, isInitial = false) {\n    const { policyTypes: oldPolicyTypes, currentTab } = this.state;\n    const { planImages } = this.props;\n\n    // Use new policy types if avaliable\n    const policyTypesToUse = policyTypes || oldPolicyTypes;\n\n    // The tab index\n    let index = 0;\n\n    // Match possible policy types to default types,\n    // with positioning in consideration\n    const tabs = _.reduce(resultToMatch, (result, type) => {\n      if (_.findIndex(policyTypesToUse, planType => planType === type) !== -1) {\n        const theIndex = index;\n        const image = planImages ? planImages[type] : null;\n        // Set desc, image, and onClick for the tab\n        result.push({\n          desc: _.startCase(type),\n          img: image,\n          onClick: () => {\n            this.handleTabClick(type, theIndex);\n          },\n        });\n        index += 1;\n      }\n      return result;\n    }, []);\n\n    // Default currenTab name is from first item\n    let tabInfo = { currentTab: _.lowerCase(tabs[0].desc) };\n\n    // If tabs is changed while navigating in compare view\n    if (!isInitial) {\n      // Try to find if the old tab name still exists in new one\n      const currentTabIndex = _.findIndex(tabs, tab => _.lowerCase(tab.desc) === currentTab);\n      // Use 0 if no longer exists\n      const tabIndexToUse = currentTabIndex !== -1 ? currentTabIndex : 0;\n      // New tab\n      const newTab = _.lowerCase(tabs[tabIndexToUse].desc);\n      // Set new tab info\n      tabInfo = {\n        tabIndex: tabIndexToUse,\n        currentTab: newTab,\n      };\n\n      // Set store data\n      this.props.setPlanType(newTab);\n      this.props.setSelectedIndex(tabIndexToUse);\n    }\n\n    // Return tabs\n    const result = {\n      ...tabInfo,\n      tabs,\n    };\n\n    this.setState(result);\n\n    return result;\n  }\n\n  /**\n   * Render\n   */\n  render() {\n    const {\n      currentTab,\n      tabs,\n    } = this.state;\n\n    const {\n      data,\n      scrollPopUpCallback,\n      submitCallback,\n      editForm,\n      form,\n      buttonDesc,\n      forceFixedOnDesktop,\n      category,\n    } = this.props;\n\n    // console.log(plansData);\n    if (!data || !tabs || !currentTab) {\n      return null;\n    }\n\n    const tabStyle = currentTab === 'default' ? 'inner-form-no-tabs' : '';\n\n    return (\n      <Fragment>\n        <Row className={`inner-form-container ${tabStyle} inner-form-extra-padding`} noGutters>\n          <TabView\n            tabs={tabs}\n            isDataFadeOnly\n            isDisableDropdown\n            big\n            name={`${form}-tab`}\n            ref={node => this.categoryTab = node}\n          >\n            {[<CompareView\n              category={category}\n              key=\"overview\"\n              className=\"overview-container-padding\"\n              notAccordion\n              data={data}\n              currentTab={currentTab}\n              scrollPopUpCallback={scrollPopUpCallback}\n              productChangable\n              editForm={\n                <ChangeInitialFormData\n                  submitCallback={submitCallback}\n                  form={form}\n                  headerValue={editForm.headerValue}\n                  valuesToListen={editForm.valuesToListen}\n                  conditions={editForm.conditions}\n                >\n                  {editForm.editDetail}\n                </ChangeInitialFormData>\n              }\n              buttonDesc={buttonDesc}\n              forceFixedOnDesktop={forceFixedOnDesktop}\n            />]}\n          </TabView>\n          <Enquiry />\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\nMultiCompareInner.defaultProps = {\n  initialIndex: 0,\n  selectedIndex: null,\n  data: null,\n  planImages: null,\n  buttonDesc: null,\n  forceFixedOnDesktop: false,\n  category: null,\n};\n\nMultiCompareInner.propTypes = {\n  initialIndex: PropTypes.number,\n  selectedIndex: PropTypes.number,\n  setSelectedIndex: PropTypes.func.isRequired,\n  setPlanType: PropTypes.func.isRequired,\n  data: PropTypes.object,\n  planImages: PropTypes.object,\n  scrollPopUpCallback: PropTypes.func.isRequired,\n  submitCallback: PropTypes.func.isRequired,\n  editForm: PropTypes.object.isRequired,\n  form: PropTypes.string.isRequired,\n  buttonDesc: PropTypes.string,\n  forceFixedOnDesktop: PropTypes.bool,\n  category: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  selectedIndex: state.compare.selectedIndex,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedIndex: (index) => {\n    dispatch(setSelectedIndex(index));\n  },\n  setPlanType: (type) => {\n    dispatch(setPlanType(type));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareInner);\n","/**\n * MultiCompareView.js\n * Multi Compare view with different insurers\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { parseData } from '../../../actions/insuranceActions';\nimport { setSelectedInsurers } from '../../../actions/compareActions';\nimport { setLoading, clearLoading } from '../../../actions/loadingScreenActions';\nimport { setRestrictionPopup } from '../../../actions/restrictionsActions';\nimport MultiCompareInner from './MultiCompareInner';\n\nclass MultiCompareView extends Component {\n  /**\n   * Lifecycle Method - getDerivedStateFromProps\n   */\n  static getDerivedStateFromProps(nextProps, prevState) {\n    try {\n      const {\n        currentInsurers,\n      } = prevState;\n\n      const {\n        plansData,\n        validInsurersList,\n        setFormState,\n        loadingEnd,\n        mainForm,\n        setSelectedPlanData,\n        trackingTags,\n      } = nextProps;\n\n      if (plansData && plansData[0] === 'INVALID') {\n        return null;\n      }\n\n      // If plansData and validInsurersList are retrieved, parse data for display\n      if (validInsurersList && plansData) {\n        let newDefaultInsurers = currentInsurers || {};\n        if (!currentInsurers && plansData) {\n          newDefaultInsurers = _.map(plansData, plan => plan.info.insurer_slug);\n          newDefaultInsurers = newDefaultInsurers.slice(0, 3);\n          nextProps.setSelectedInsurers(newDefaultInsurers);\n        }\n\n        return {\n          parsedData: parseData(\n            plansData,\n            validInsurersList,\n            newDefaultInsurers,\n            mainForm.trip_type,\n            () => {\n              setFormState();\n            },\n            setSelectedPlanData,\n            loadingEnd,\n            nextProps.setRestrictionPopup,\n            null,\n            trackingTags,\n          ),\n          currentInsurers: newDefaultInsurers,\n        };\n      }\n    } catch (error) {\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Lifecycle Method - constructor\n   */\n  constructor(props) {\n    super(props);\n\n    const {\n      mainForm,\n      parseForm,\n      getPlans,\n      getInsurersList,\n      loading,\n      defaultInsurers,\n      plansData,\n      validInsurersList,\n      selectedInsurers,\n      setSelectedPlanData,\n      loadingEnd,\n      setFormState,\n      loadingFailBackState,\n      clearData,\n      trackingTags,\n    } = this.props;\n\n    try {\n      // If fresh init\n      if (!plansData || !validInsurersList) {\n        // Initally, get the params from mainform and default insurers\n        const parsedParams = parseForm(mainForm, defaultInsurers);\n\n        // Set loading\n        loading(() => {\n          clearData();\n          loadingFailBackState();\n        }, 'No available plans found.', 30000, '');\n\n        // Get plans and valid insurers list\n        getPlans(parsedParams);\n        getInsurersList(parsedParams);\n\n        // Set initial default insurers\n        this.props.setSelectedInsurers(defaultInsurers);\n\n        // currentInsurers: Current selected list of insurers\n        // parsedData: The parsed data to display\n        // hoveredIndex: The current hovered index on the insurer selection dropdown, default is 0\n        this.state = {\n          currentInsurers: defaultInsurers,\n          parsedData: null,\n        };\n      } else {\n        // Set existing selected insurers and get old parsed data\n        // (Will reach this condition when using the back button)\n        this.state = {\n          currentInsurers: selectedInsurers,\n          parsedData: parseData(\n            plansData,\n            validInsurersList,\n            selectedInsurers,\n            mainForm.trip_type,\n            () => setFormState(),\n            setSelectedPlanData,\n            loadingEnd,\n            this.props.setRestrictionPopup,\n            null,\n            trackingTags,\n          ),\n        };\n      }\n    } catch (error) {\n      // eslint-disable-next-line\n    }\n\n    this.getNewData = this.getNewData.bind(this);\n    this.onInsurerClick = this.onInsurerClick.bind(this);\n  }\n\n  componentDidUpdate() {\n    const {\n      plansData,\n      loadingEnd,\n      loading,\n      clearData,\n      loadingFailBackState,\n    } = this.props;\n\n    if (plansData && plansData[0] === 'INVALID') {\n      loadingEnd();\n      if (!this.isLoading) {\n        this.isLoading = true;\n        setTimeout(() =>\n          loading(() => {\n            clearData();\n            loadingFailBackState();\n            this.isLoading = false;\n          }, 'No available plans found.', 50, ''), 500);\n      }\n    }\n  }\n  /**\n   * Lifecycle Method - shouldComponentUpdate\n   */\n  /* shouldComponentUpdate(nextProps, nextState) {\n    const { parsedData } = this.state;\n\n    // Render only is new or policyTypes changed\n    return !(parsedData && nextState.parsedData) ||\n          !_.isEqual(parsedData.policyTypes, nextState.parsedData.policyTypes);\n  } */\n\n  /**\n   * Handle selection on insurer list\n   *\n   * @param {object} data - The insurer list item data\n   */\n  onInsurerClick(data, hoveredIndex) {\n    // parsedData: The parsed data to display\n    const { parsedData } = this.state;\n\n    // Remap current insurers as sometimes when change form data, the insurers\n    // can be less than 3.\n    // console.log(parsedData.selectedInsurers, hoveredIndex);\n    const currentInsurers = _.reduce(parsedData.selectedInsurers, (result, insurer) => {\n      if (insurer) {\n        result.push(insurer.insurerSlug);\n      }\n      return result;\n    }, []);\n\n    // Change insurer of current selected position\n    currentInsurers[hoveredIndex] = data.insurer_slug;\n\n    // Set current insurers\n    this.setState({\n      currentInsurers,\n    });\n\n    // Set current insurers in store\n    this.props.setSelectedInsurers(currentInsurers);\n\n    // Get new compare data based on the new selected insurers\n    this.getNewData(currentInsurers);\n  }\n\n  /**\n   * Get new compare data.\n   * Used when changing insurers or changing form fields.\n   *\n   * @param {array} incomingInsurers - selected insurers\n   */\n  getNewData(incomingInsurers = null) {\n    const { currentInsurers } = this.state;\n    const {\n      loading,\n      getPlans,\n      getInsurersList,\n      clearData,\n      mainForm,\n      parseForm,\n      loadingFailBackState,\n    } = this.props;\n\n    // If init, use default, else the current array\n    const insurerToUse = incomingInsurers || currentInsurers;\n    // Parse the form for params\n    const parsedParams = parseForm(mainForm, insurerToUse);\n    // Clear data in store first, so it will detect as fresh props from store\n    clearData();\n    // Set loading screen\n    loading(() => {\n      clearData();\n      loadingFailBackState();\n    }, 'No available plans found.', 30000, '');\n    // Get plans and insurer lists\n    getPlans(parsedParams);\n    getInsurersList(parsedParams);\n  }\n\n  /**\n   * Render\n   */\n  render() {\n    try {\n      const { parsedData } = this.state;\n      const {\n        editForm,\n        form,\n        planImages,\n        initialIndex,\n        buttonDesc,\n        forceFixedOnDesktop,\n        category,\n      } = this.props;\n\n      // Do not render if no data\n      if (!parsedData) {\n        return null;\n      }\n\n      // console.log(parsedData);\n      return (\n        <MultiCompareInner\n          category={category}\n          initialIndex={initialIndex}\n          planImages={planImages}\n          data={parsedData}\n          form={form}\n          editForm={editForm}\n          scrollPopUpCallback={this.onInsurerClick}\n          submitCallback={this.getNewData}\n          buttonDesc={buttonDesc}\n          forceFixedOnDesktop={forceFixedOnDesktop}\n        />\n      );\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nMultiCompareView.defaultProps = {\n  initialIndex: 0,\n  plansData: null,\n  validInsurersList: null,\n  selectedInsurers: null,\n  trackingTags: null,\n  planImages: null,\n  defaultInsurers: null,\n  buttonDesc: null,\n  forceFixedOnDesktop: false,\n  category: null,\n};\n\nMultiCompareView.propTypes = {\n  setSelectedInsurers: PropTypes.func.isRequired,\n  mainForm: PropTypes.object.isRequired,\n  parseForm: PropTypes.func.isRequired,\n  getPlans: PropTypes.func.isRequired,\n  getInsurersList: PropTypes.func.isRequired,\n  clearData: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n  defaultInsurers: PropTypes.array,\n  editForm: PropTypes.object.isRequired,\n  form: PropTypes.string.isRequired,\n  planImages: PropTypes.object,\n  initialIndex: PropTypes.number,\n  plansData: PropTypes.array,\n  validInsurersList: PropTypes.array,\n  selectedInsurers: PropTypes.array,\n  setSelectedPlanData: PropTypes.func.isRequired,\n  loadingEnd: PropTypes.func.isRequired,\n  setFormState: PropTypes.func.isRequired,\n  setRestrictionPopup: PropTypes.func.isRequired,\n  loadingFailBackState: PropTypes.func.isRequired,\n  trackingTags: PropTypes.object,\n  buttonDesc: PropTypes.string,\n  forceFixedOnDesktop: PropTypes.bool,\n  category: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  selectedInsurers: state.compare.selectedInsurers,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loading: (callBack, errorMsg, time, mainMsg) => {\n    dispatch(setLoading(callBack, errorMsg, time, mainMsg));\n  },\n  loadingEnd: () => {\n    dispatch(clearLoading());\n  },\n  setRestrictionPopup: (data) => {\n    dispatch(setRestrictionPopup(data));\n  },\n  setSelectedInsurers: (array) => {\n    dispatch(setSelectedInsurers(array));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiCompareView);\n","module.exports = __webpack_public_path__ + \"static/media/Dollar.69451f59.svg\";","module.exports = __webpack_public_path__ + \"static/media/Umbrella.6617735b.svg\";"],"sourceRoot":""}