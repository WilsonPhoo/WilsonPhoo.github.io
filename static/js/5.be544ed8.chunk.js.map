{"version":3,"sources":["components/FormsV3/FormInputWrapper/FormInputWrapper.js","components/Templates/ModalPopup/ModalPopup.js","components/FormsV3/DropDown/DropDown.js","components/FormsV3/Checkbox/Checkbox.js"],"names":["FormInputWrapper","_this$props","this","props","extraInfo","desc","errorString","smallMargin","className","isDateRange","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","join","children","Component","defaultProps","ModalPopup","_this","Object","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","showModal","setHiddenAuto","bind","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","nextProps","setState","clearInterval","setHiddenInterval","_this2","setInterval","_","includes","document","body","style","overflow","closeModal","header","footer","backdropClassName","zIndex","react__WEBPACK_IMPORTED_MODULE_7___default","reactstrap__WEBPACK_IMPORTED_MODULE_8__","isOpen","size","concat","tag","toggle","maxItemsDisplay","defaultHeight","resultNullString","display_name","value","DropDown","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","dropList","numItemsDisplay","isMultiple","height","numItems","maxheight","min","length","isOpened","listItems","selectedString","listHeight","multipleSelectedElements","listElementsCounter","clientHeight","extraPadding","noTransition","updateDimensions","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","handleClickOutside","renderListItems","renderTextInput","handleSelectClick","handleOnInputChange","handleSetMultipleSelectedItem","handleDestroySelected","handleInputKeyPress","handleItemKeyPress","handleChange","handleExit","handleBlur","handleFocus","prevState","isEqual","initialListItems","_this$props2","addEventListener","window","overrideValue","prevProps","_this$props3","isElements","isEmpty","_Users_wilson_PolicyPal_PolicyPal_Ecommerce_Reactjs_Dev_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","removeEventListener","_this$state","newHeight","selectedItemsContainer","childElementCount","getBoundingClientRect","bottom","top","error","inputValue","_this$props4","name","onChange","notForm","valueChangeCallback","inputField","event","wrapperRef","contains","target","isFromFocus","_this$state2","_this$props5","placeholderString","key","preventDefault","index","Math","max","listElements","focus","stopPropagation","isOpenOnly","arguments","undefined","_this$state3","_this$props6","item","_this$state4","_this$state5","newArr","find","i","push","selectedContainer","slice","indexOf","splice","result","filter","toString","toUpperCase","relatedTarget","_this$state7","_this$props7","resultValue","isError","finalString","some","obj","toLowerCase","_this3","_this$state8","map","react__WEBPACK_IMPORTED_MODULE_10___default","onClick","handleSelectItemClick","role","tabIndex","onKeyDown","ref","node","_this4","type","onMouseUp","src","Cross","alt","_this5","_this$props8","isDisableTyping","reactstrap__WEBPACK_IMPORTED_MODULE_11__","placeholder","autoComplete","disabled","_this6","_this$state9","_this$props9","maxWidth","noInternalDesc","logo","actualListheight","dropDownOpenStyle","arrowStyle","transitionStyle","listStyle","multipleStyle","isErrorStyle","noInternalDescStyle","titleStyle","marginTop","marginBottom","logoImg","MagnifyGlass","zIndexStyle","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_13__","onBlur","onFocus","minHeight","paddingTop","paddingBottom","renderMultipleSelectedElements","onKeyPress","Arrow","react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_12__","listContainer","Checkbox","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","id","checked"],"mappings":"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","file":"static/js/5.be544ed8.chunk.js","sourcesContent":["/**\n * FormInputWrapper.js\n * Custom form dropdown menu with input\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './FormInputWrapper.scss';\n\n/**\n * Custom Form Dropdown class\n */\nclass FormInputWrapper extends Component {\n  render() {\n    const {\n      extraInfo,\n      desc,\n      errorString,\n      smallMargin,\n      className,\n      isDateRange,\n    } = this.props;\n\n    return (\n      <div\n        className={['input-wrapper-main-v3 input-wrapper-error', smallMargin && 'my-1', className].join(' ')}\n      >\n        {\n          // eslint-disable-next-line\n          isDateRange ?\n            <div className=\"d-flex\">\n              <p className=\"input-wrapper-desc w-50\">Start Date</p>\n              <p className=\"input-wrapper-desc w-50\">End Date</p>\n            </div>\n          :\n          desc !== null ?\n            <p className=\"input-wrapper-desc\">{desc}</p>\n          :\n            null\n        }\n        {this.props.children}\n        {\n          extraInfo !== null ?\n            <div className=\"extra-info-container\">\n              {extraInfo}\n            </div>\n          :\n            null\n        }\n        {\n          errorString !== null ?\n            <div className=\"input-wrapper-error-text\">\n              <p>{errorString}</p>\n            </div>\n          :\n            null\n        }\n      </div>\n    );\n  }\n}\n\nFormInputWrapper.defaultProps = {\n  desc: null,\n  extraInfo: null,\n  errorString: null,\n  smallMargin: false,\n  className: '',\n  isDateRange: false,\n};\n\n\nFormInputWrapper.propTypes = {\n  desc: PropTypes.string,\n  extraInfo: PropTypes.object,\n  errorString: PropTypes.string,\n  smallMargin: PropTypes.bool,\n  className: PropTypes.string,\n  isDateRange: PropTypes.bool,\n};\n\nexport default FormInputWrapper;\n","/**\n * ChangeInitialFormData.js\n * This is the green pencil button that appears mainly on\n * the compare view which will render the Edit Detail forms\n * of each category.\n *\n * Users will be able to change that form through this component\n * and will do a callback to update any changes, eg for compare view.\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nimport './ModalPopup.scss';\n\nclass ModalPopup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showModal: props.showModal,\n    };\n\n    this.setHiddenAuto = this.setHiddenAuto.bind(this);\n  }\n\n  componentDidMount() {\n    const { showModal } = this.props;\n\n    if (!showModal) {\n      this.setHiddenAuto();\n    }\n  }\n\n  // Toggle modal\n  componentWillReceiveProps(nextProps) {\n    const { showModal } = this.props;\n    if (nextProps.showModal !== showModal) {\n      this.setState({ showModal: nextProps.showModal });\n\n      if (!nextProps.showModal) {\n        this.setHiddenAuto();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.setHiddenInterval);\n  }\n\n\n  setHiddenAuto() {\n    clearInterval(this.setHiddenInterval);\n    this.setHiddenInterval = setInterval(() => {\n      if (!this.props.showModal && !_.includes(document.body.style.overflow, 'auto')) {\n        document.body.style.overflow = 'hidden auto';\n        clearInterval(this.setHiddenInterval);\n      }\n    }, 100);\n  }\n\n  render() {\n    const { showModal } = this.state;\n    const {\n      closeModal,\n      header,\n      body,\n      footer,\n      className,\n      backdropClassName,\n      zIndex,\n    } = this.props;\n\n    return (\n      <Modal\n        isOpen={showModal}\n        size=\"lg\"\n        className={`modal-popup-custom ${className}`}\n        backdropClassName={backdropClassName}\n        zIndex={zIndex}\n      >\n        {\n          header &&\n          <ModalHeader\n            tag=\"h3\"\n            toggle={closeModal}\n          >\n            {header}\n          </ModalHeader>\n        }\n        {\n          body &&\n          <ModalBody>\n            {body}\n          </ModalBody>\n        }\n        {\n          footer &&\n          <ModalFooter>\n            {footer}\n          </ModalFooter>\n        }\n      </Modal>\n    );\n  }\n}\n\nModalPopup.defaultProps = {\n  showModal: false,\n  header: null,\n  body: null,\n  footer: null,\n  className: null,\n  backdropClassName: null,\n  zIndex: 1050,\n};\n\nModalPopup.propTypes = {\n  showModal: PropTypes.bool,\n  closeModal: PropTypes.func.isRequired,\n  header: PropTypes.object,\n  body: PropTypes.object,\n  footer: PropTypes.object,\n  className: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  zIndex: PropTypes.number,\n};\n\nexport default ModalPopup;\n","/**\n * DropDown.js\n * Custom form dropdown menu with input\n *\n * @version 0.0.1\n * @author [Wilson Phoo](wilson@policypal.com)\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\n\nimport Arrow from '../../../assets/images/forms/arrow.svg';\nimport Cross from '../../../assets/images/forms/cross.svg';\nimport MagnifyGlass from '../../../assets/images/forms/magnifyGlass.svg';\n\nimport './DropDown.scss';\nimport './MultipleSelectDropDown.scss';\n\n// How many items to display\nconst maxItemsDisplay = 5;\n// Height for dropdown\nconst defaultHeight = 48;\n// Padding for when multiple items overflow\nconst extraPaddingForMultiple = 5;\n// Error text to display when error\nconst resultNullString = {\n  display_name: 'No results found',\n  value: null,\n};\n\n/**\n * Custom Form Dropdown class\n */\nclass DropDown extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      dropList,\n      numItemsDisplay,\n    } = nextProps;\n\n    if (!_.isEqual(dropList, prevState.initialListItems)) {\n      const height = defaultHeight;\n      const numItems = numItemsDisplay || maxItemsDisplay;\n      const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\n\n      return {\n        initialListItems: dropList,\n        listItems: dropList,\n        maxheight,\n        listHeight: maxheight,\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Constructor\n   *\n   * @param {object} props Component props\n   */\n  constructor(props) {\n    super(props);\n\n    // dropList - The passed down dropdown list items\n    // placeholderString - Placeholder string for input\n    // size - Size of this control\n    // numItemsDisplay - Max items to display on view\n    const {\n      dropList,\n      numItemsDisplay,\n      value,\n      isMultiple,\n    } = this.props;\n\n    // Get the control height\n    const height = defaultHeight;\n    // Get number of items to display\n    const numItems = numItemsDisplay || maxItemsDisplay;\n    // Get the max height of list\n    const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\n    // isOpened - Whether dropdown is opened\n    // isError - Whether there is input error\n    // listItems - The actual dropdown list\n    // selectedString - The selected item string\n    // height - Preferred Control height\n    // numItemsDisplay - How many items to display\n    // maxheight - Max height of the list\n    // listHeight - Height of the list. (Items count + control)\n    // multipleSelectedElements - Array of multiple selected items\n    // listElementsCounter - Up down selection position\n    // clientHeight - Actual height of the control\n    this.state = {\n      isOpened: false,\n      listItems: dropList,\n      selectedString: (!isMultiple && value && value.display_name) || '',\n      height,\n      numItemsDisplay: numItems,\n      maxheight,\n      listHeight: maxheight,\n      multipleSelectedElements: null,\n      listElementsCounter: -1,\n      clientHeight: height,\n      extraPadding: 0,\n      noTransition: true,\n    };\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.renderListItems = this.renderListItems.bind(this);\n    this.renderTextInput = this.renderTextInput.bind(this);\n    this.handleSelectClick = this.handleSelectClick.bind(this);\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n    this.handleSetMultipleSelectedItem = this.handleSetMultipleSelectedItem.bind(this);\n    this.handleDestroySelected = this.handleDestroySelected.bind(this);\n    this.handleInputKeyPress = this.handleInputKeyPress.bind(this);\n    this.handleItemKeyPress = this.handleItemKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleExit = this.handleExit.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n  }\n\n  /**\n   * Lifecycle Method - componentDidMount\n   */\n  componentDidMount() {\n    const { value, isMultiple } = this.props;\n\n    // Add Handler to handle click outside of screen\n    document.addEventListener('mousedown', this.handleClickOutside);\n    // Update control height on resize in case it squeezes down\n    window.addEventListener('resize', this.updateDimensions);\n    // Update for the first time\n    this.updateDimensions();\n\n    const { overrideValue } = this.props;\n\n    if (value) {\n      if (isMultiple) {\n        this.setState({\n          multipleSelectedElements: value,\n        });\n      }\n    }\n\n    if (overrideValue) {\n      this.handleChange(overrideValue);\n    }\n\n    this.setState({ noTransition: false });\n  }\n\n  /**\n   * Lifecycle Method - componentDidUpdate\n   */\n  componentDidUpdate(prevProps) {\n    const { multipleSelectedElements } = this.state;\n    const { overrideValue, value, isMultiple } = this.props;\n\n    // Use override mode if not using form\n    if (!_.isEqual(overrideValue, prevProps.overrideValue)) {\n      this.handleChange(overrideValue);\n    }\n\n    const isElements = !_.isEmpty(multipleSelectedElements);\n\n    if (!_.isEqual(value, prevProps.value)) {\n      this.setState({\n        selectedString: (value && value.display_name) || '',\n      });\n    }\n\n    if (value) {\n      if (!isElements || (isElements && !_.isEqual(value, multipleSelectedElements))) {\n        if (isMultiple) {\n          this.setState({\n            multipleSelectedElements: [...value],\n          });\n        }\n      }\n    }\n\n    // For re-render fix where multiple changed to single\n    if (isElements && !value) {\n      this.setState({\n        multipleSelectedElements: null,\n      });\n    }\n    // Update control height if necessary, since the\n    // height may change after render\n    this.updateDimensions();\n  }\n\n  /**\n   * Lifecycle Method - componentWillUnmount\n   */\n  componentWillUnmount() {\n    // Remove Handler to handle click outside of screen\n    document.removeEventListener('mousedown', this.handleClickOutside);\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  /**\n   * Get client height of the selection container\n   * to determine the height of the whole control.\n   * (For multiple only)\n   *\n   * @param {object} event\n   */\n  updateDimensions() {\n    const { isMultiple } = this.props;\n\n    // Only multiple will expand\n    if (!isMultiple) {\n      return;\n    }\n\n    const {\n      clientHeight,\n      height,\n      extraPadding,\n    } = this.state;\n\n    let newHeight = defaultHeight;\n    try {\n      newHeight = this.selectedItemsContainer.children[this.selectedItemsContainer.childElementCount - 1].getBoundingClientRect().bottom - this.selectedItemsContainer.children[0].getBoundingClientRect().top;\n      newHeight = newHeight < defaultHeight ? defaultHeight : newHeight + 10;\n    } catch (error) {\n      // eslint-disable-next-line no-empty\n    }\n\n    // if client height is not same as DOM, update with padding if expanded\n    if (clientHeight !== newHeight) {\n      this.setState({\n        clientHeight: newHeight,\n        extraPadding: newHeight - 2 * extraPadding > height ? extraPaddingForMultiple : 0,\n      });\n    }\n  }\n\n  handleChange(inputValue) {\n    const {\n      name,\n      onChange,\n      notForm,\n      valueChangeCallback,\n      isMultiple,\n    } = this.props;\n\n    if (notForm) {\n      if (valueChangeCallback) {\n        valueChangeCallback(inputValue);\n      }\n      this.inputField.value = inputValue.display_name;\n      return;\n    }\n\n    onChange(isMultiple ? 'multiple_select' : 'select', name, inputValue);\n  }\n\n  /**\n   * End selection if click on outside\n   *\n   * @param {object} event\n   */\n  handleClickOutside(event) {\n    const { isOpened } = this.state;\n\n    // If clicked outside, go to exit\n    if (\n      isOpened &&\n      this.wrapperRef &&\n      !this.wrapperRef.contains(event.target)\n    ) {\n      // Close it\n      this.setState({\n        isOpened: false,\n      });\n\n      // Unset from focus\n      this.isFromFocus = false;\n    }\n  }\n\n  /**\n   * Handle on enter key\n   *\n   * @param {object} event\n   */\n  handleInputKeyPress(event) {\n    const {\n      isOpened,\n      listElementsCounter,\n      selectedString,\n      multipleSelectedElements,\n    } = this.state;\n\n    const { isMultiple, placeholderString } = this.props;\n\n    // If pressed on enter, go to exit\n    if (event.key === 'Enter') {\n      this.handleExit();\n      event.preventDefault();\n      return;\n    }\n\n    // Press down arrow from input\n    if (event.key === 'ArrowDown') {\n      if (isOpened) {\n        if (listElementsCounter === -1) {\n          event.preventDefault();\n        }\n        this.handleItemKeyPress(event);\n      } else {\n        this.setState({\n          isOpened: true,\n        });\n      }\n    }\n\n    if (\n      isMultiple &&\n      event.key === 'Backspace' &&\n      (selectedString === '' || selectedString === placeholderString) &&\n      !_.isEmpty(multipleSelectedElements)\n    ) {\n      this.handleDestroySelected(multipleSelectedElements[multipleSelectedElements.length - 1]);\n    }\n  }\n\n  /**\n   * Key press on list items\n   *\n   * @param {object} event\n   */\n  handleItemKeyPress(event, inputValue) {\n    const {\n      listElementsCounter,\n    } = this.state;\n\n    let index = listElementsCounter;\n\n    // If click enter on list item\n    if (event.key === 'Enter') {\n      // Focus input field\n      // this.inputField.focus();\n      // Handle exit with the item value\n      this.handleExit(inputValue);\n      event.preventDefault();\n      return;\n    }\n\n    // Navigate list with up down arrow\n    if (event.key === 'ArrowDown') {\n      index = listElementsCounter + 1;\n    } else if (event.key === 'ArrowUp') {\n      index = listElementsCounter - 1;\n    }\n\n    // Cap index within list\n    index = Math.max(0, Math.min(index, this.listElements.length - 1));\n    // Focus on the next item\n    this.listElements[index].focus();\n\n    // If index changed, update state\n    if (index !== listElementsCounter) {\n      this.setState({\n        listElementsCounter: index,\n      });\n    }\n\n    event.stopPropagation();\n  }\n\n  /**\n   * Handle toggling of dropdown list\n   *\n   * @param {bool} isOpenOnly - Only can open\n   */\n  handleSelectClick(isOpenOnly = false) {\n    const {\n      isOpened,\n      selectedString,\n      maxheight,\n      multipleSelectedElements,\n    } = this.state;\n\n    const {\n      dropList,\n      isMultiple,\n    } = this.props;\n\n    // If this frame is not from focus\n    if (!this.isFromFocus) {\n      // Set open state\n      if (!isOpenOnly || (isOpenOnly && !isOpened)) {\n        this.setState({\n          isOpened: !isOpened,\n        });\n      }\n\n      // If previously invalid, reset list\n      if (!selectedString || selectedString === resultNullString.display_name) {\n        this.setState({\n          listItems: dropList,\n          listHeight: maxheight,\n          listElementsCounter: -1,\n        });\n\n        if (!isMultiple || (isMultiple && _.isEmpty(multipleSelectedElements))) {\n          this.handleChange(null);\n        }\n      }\n    }\n\n    // Unlock from focus\n    this.isFromFocus = false;\n  }\n\n  /**\n   * Handles selection of dropdown item\n   *\n   * @param {object} event - Click event\n   * @param {string} item - Input string\n   */\n  handleSelectItemClick(event, item) {\n    // If click on null item return\n    if (item.value === resultNullString.value) {\n      return;\n    }\n\n    const { numItemsDisplay, height } = this.state;\n    const { dropList } = this.props;\n\n    const {\n      isMultiple,\n    } = this.props;\n\n    // Reset drop list items to all, set selected string,\n    // and reset any errors\n    this.setState({\n      listItems: dropList,\n      listHeight: (_.min([(dropList && dropList.length) || 0, numItemsDisplay]) + 1) * height,\n    });\n\n    // this.formParent.clearErrorString();\n\n    if (isMultiple) {\n      // If multiple dropdown, reset selected string\n      this.setState({\n        selectedString: '',\n      });\n\n      // Set input field text to empty\n      this.inputField.value = '';\n      // Refocus input bar\n      // this.inputField.focus();\n\n      // Set multiple selected item\n      this.handleSetMultipleSelectedItem(item);\n    } else {\n      this.setState({\n        selectedString: item.display_name,\n      }, () => {\n        // Toggle the dropdown menu\n        this.handleSelectClick();\n\n        // Update redux state\n        this.handleChange(item);\n\n        // Close dropdown\n        this.setState({\n          isOpened: false,\n        });\n      });\n    }\n\n    event.stopPropagation();\n  }\n\n  /**\n   * Selection of multi select dropdown\n   *\n   * @param {string} item\n   */\n  handleSetMultipleSelectedItem(item) {\n    const { multipleSelectedElements, height } = this.state;\n\n    const newArr = multipleSelectedElements || [];\n\n    // If item does not exists in the selected list\n    if (!_.find(newArr, i => i.value === item.value)) {\n      // Add item to list\n      newArr.push(item);\n\n      // Change state\n      this.setState({\n        multipleSelectedElements: newArr,\n        clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\n        isOpened: false,\n      });\n\n      // Update redux store\n      this.handleChange(newArr);\n    }\n  }\n\n  /**\n   * Destroys multi selected item\n   *\n   * @param {string} item\n   */\n  handleDestroySelected(item) {\n    const { height } = this.state;\n\n    const { multipleSelectedElements } = this.state;\n    // Duplicate clean copy\n    let newArr = multipleSelectedElements.slice();\n    // Delete chosen item\n    const index = newArr.indexOf(item);\n    newArr.splice(index, 1);\n    // Set null if empty\n    newArr = newArr.length === 0 ? null : newArr;\n\n    // Update state\n    this.setState({\n      multipleSelectedElements: newArr,\n      clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\n    });\n\n    // Update redux state\n    this.handleChange(newArr);\n    this.isFromFocus = false;\n  }\n\n  /**\n   * Handles on input changes\n   *\n   * @param {object} event\n   */\n  async handleOnInputChange(event) {\n    // Get current input value\n    const { value } = event.target;\n\n    const { dropList } = this.props;\n    const { height, numItemsDisplay } = this.state;\n\n    // Attempt to match value to list\n    const result = _.filter(\n      dropList,\n      item => item.display_name.toString().toUpperCase().indexOf(value.toString().toUpperCase()) === 0,\n    );\n\n    // Get length of new list, min 1 which is error string\n    const length = result.length ? result.length : 1;\n\n    // Set new list items, height of dropdown list,\n    // Force open list on type, and set selected string to value\n    this.setState({\n      listItems: result.length ? result : [resultNullString],\n      listHeight: (_.min([length, numItemsDisplay]) + 1) * height,\n      isOpened: true,\n      selectedString: value,\n      listElementsCounter: -1,\n    });\n  }\n\n  /**\n   * Handle Blur event\n   *\n   * @param {object} event\n   */\n  handleBlur(event) {\n    // Check if focus event contains children\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\n\n    // If outside of children\n    if (!isChildren) {\n      // Close dropdown\n      this.setState({\n        isOpened: false,\n      });\n      // Handle exit case\n      this.handleExit();\n      this.isFromFocus = false;\n    }\n  }\n\n  /**\n   * Handle Focus event\n   *\n   * @param {object} event\n   */\n  handleFocus(event) {\n    const { isOpened } = this.state;\n\n    // Check if focus event contains children\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\n    // If not from children\n    if (!isChildren) {\n      // Open dropdown\n      if (!isOpened) {\n        this.handleSelectClick(true);\n        // Prevent double click\n        this.isFromFocus = true;\n      }\n    }\n  }\n\n  /**\n   * Handle exit selection of entered input\n   *\n   * @param {string} inputValue - From selection\n   */\n  handleExit(inputValue = null) {\n    const {\n      selectedString,\n      listItems,\n    } = this.state;\n\n    const {\n      placeholderString,\n      dropList,\n      isMultiple,\n    } = this.props;\n\n    // Result string if match original list\n    let resultValue = null;\n    // If input causes an error\n    let isError = false;\n    // The string to use\n    const finalString = inputValue !== null ? inputValue.display_name : selectedString;\n\n    // If possible valid input\n    if (\n      finalString &&\n      finalString !== placeholderString &&\n      finalString !== ''\n    ) {\n      // Attempt to match finalString to original list\n      listItems.some((obj) => {\n        const result = obj.display_name.toString().toLowerCase() === finalString.toString().toLowerCase();\n        if (result) {\n          resultValue = obj;\n        }\n\n        return result;\n      });\n\n      // Check error if no match\n      isError = !resultValue;\n      // Set result string to match value or error value\n      resultValue = isError ? null : resultValue;\n\n      if (isMultiple) {\n        if (!isError) {\n          this.handleSetMultipleSelectedItem(resultValue);\n        }\n\n        this.inputField.value = '';\n      } else {\n        // Update redux value\n        this.handleChange(resultValue);\n\n        this.setState({\n          isOpened: false,\n        });\n      }\n    }\n\n    // If not error, reset list to list all,\n    // Set selected string and error if possible\n    // and close the list\n    this.setState({\n      listItems: isError ? listItems : dropList,\n      selectedString: (resultValue && resultValue.display_name) || '',\n    });\n  }\n\n  /**\n   * Renders the dropdown list items\n   */\n  renderListItems() {\n    const { listItems, height } = this.state;\n    this.listElements = [];\n\n    const result = _.map(listItems, item => (\n      <li key={item.value}>\n        <div\n          className=\"list-item text-style\"\n          style={{ height }}\n          onClick={event => this.handleSelectItemClick(event, item)}\n          role=\"button\"\n          tabIndex={-1}\n          onKeyDown={(event) => { this.handleItemKeyPress(event, item); }}\n          ref={(node) => { if (node !== null) this.listElements.push(node); }}\n        >\n          <p>{item.display_name}</p>\n        </div>\n      </li>\n    ));\n\n    return result;\n  }\n\n  /**\n   * Render the multiple selected elements in the input container\n   */\n  renderMultipleSelectedElements() {\n    const { multipleSelectedElements } = this.state;\n    const { isMultiple } = this.props;\n\n    if (!isMultiple) {\n      return null;\n    }\n\n    return _.map(multipleSelectedElements, item => (\n      <div className=\"selected-item-container\" key={item.value}>\n        <div className=\"selected-item\">\n          <p>{item.display_name}</p>\n          <button\n            type=\"button\"\n            className=\"selected-item-destroy\"\n            onMouseUp={() => this.handleDestroySelected(item)}\n            tabIndex={-1}\n          >\n            <img src={Cross} alt=\"cross.svg\" />\n          </button>\n        </div>\n      </div>\n    ));\n  }\n\n  renderTextInput() {\n    const { selectedString } = this.state;\n    const {\n      isMultiple,\n      isDisableTyping,\n      placeholderString,\n      name,\n      notForm,\n    } = this.props;\n\n    return (\n      <Input\n        value={selectedString || ''}\n        name={name}\n        placeholder={((isMultiple || notForm) && placeholderString) || ''}\n        autoComplete=\"off\"\n        ref={node => (this.inputField = node)}\n        onChange={event => this.handleOnInputChange(event)}\n        onKeyDown={event => this.handleInputKeyPress(event)}\n        onClick={() => this.handleSelectClick(true)}\n        disabled={isDisableTyping}\n      />\n    );\n  }\n\n  /**\n   * Render component\n   */\n  render() {\n    const {\n      isOpened,\n      listHeight,\n      height,\n      clientHeight,\n      extraPadding,\n      noTransition,\n    } = this.state;\n\n    // const isOpened = true;\n\n    if (height && listHeight) {\n      const {\n        maxWidth,\n        isMultiple,\n        desc,\n        extraInfo,\n        errorString,\n        noInternalDesc,\n        logo,\n        placeholderString,\n        value,\n      } = this.props;\n\n      // Actual height of the whole control\n      const actualheight = isOpened ? listHeight : height;\n      // Actual height of only the list\n      const actualListheight = actualheight - height;\n\n      // Dynamic styles\n      const dropDownOpenStyle = isOpened ? 'dropdown-container-opened' : 'dropdown-container-closed';\n      const arrowStyle = isOpened ? 'angle-up' : 'angle-down';\n      const transitionStyle = noTransition ? '' : 'do-transition';\n      const listStyle = isOpened ? `list-opened ${transitionStyle}` : `list-closed ${transitionStyle}`;\n      const multipleStyle = isMultiple || logo ? 'multi-drop-v3' : '';\n      const isErrorStyle = errorString ? 'error' : '';\n\n      const noInternalDescStyle = noInternalDesc ? 'no-internal-desc' : '';\n\n      const titleStyle = value ? 'focused-title' : '';\n      const marginTop = clientHeight > defaultHeight || isOpened ? clientHeight : 0;\n      const marginBottom = clientHeight > defaultHeight ? 6 : 0;\n\n      const logoImg = isMultiple ? MagnifyGlass : logo;\n      const zIndexStyle = isOpened ? 'drop-open' : 'drop-close';\n\n      return (\n        <FormInputWrapper\n          desc={desc}\n          extraInfo={extraInfo}\n          errorString={errorString}\n        >\n          <div\n            className={`dropdown-container-v3 ${zIndexStyle} ${multipleStyle} ${noInternalDescStyle}`}\n            style={{\n              height: clientHeight,\n              maxWidth,\n              marginBottom,\n            }}\n            ref={node => (this.wrapperRef = node)}\n            onBlur={event => this.handleBlur(event)}\n            onFocus={event => this.handleFocus(event)}\n          >\n            <div\n              className={`dropdown-container ${dropDownOpenStyle} ${isErrorStyle}`}\n            >\n              {\n                isMultiple || noInternalDesc ? null :\n                <div className={`title-header ${titleStyle}`}>\n                  {placeholderString}\n                </div>\n              }\n              <div\n                className=\"selected-container\"\n                onKeyDown={event => this.handleInputKeyPress(event)}\n                role=\"button\"\n                style={{ minHeight: height }}\n                tabIndex={-1}\n                ref={node => (this.selectedContainer = node)}\n              >\n                {\n                  logoImg ?\n                    <div className=\"icon-container\" style={{ minHeight: height }}>\n                      <img\n                        src={logoImg}\n                        alt=\"DropdownImage.svg\"\n                      />\n                    </div>\n                  :\n                    null\n                }\n                <div\n                  className=\"selected-items-container\"\n                  ref={node => this.selectedItemsContainer = node}\n                  style={{ paddingTop: extraPadding, paddingBottom: extraPadding }}\n                >\n                  {this.renderMultipleSelectedElements()}\n                  <div className=\"selected-text selected-text-multi\">\n                    {this.renderTextInput()}\n                  </div>\n                </div>\n                <div\n                  className=\"selected-arrow\"\n                  onClick={() => this.handleSelectClick()}\n                  onKeyPress={() => {}}\n                  role=\"button\"\n                  tabIndex={-1}\n                >\n                  <img\n                    src={Arrow}\n                    alt=\"arrow.svg\"\n                    className={`selected-arrow-style ${arrowStyle}`}\n                  />\n                </div>\n              </div>\n              <Scrollbars\n                className={`list-container ${listStyle}`}\n                style={{\n                  minHeight: actualListheight,\n                  marginTop,\n                }}\n                ref={node => this.listContainer = node}\n                tabIndex={-1}\n              >\n                {\n                  isOpened ?\n                    this.renderListItems()\n                  :\n                    null\n                }\n              </Scrollbars>\n            </div>\n          </div>\n        </FormInputWrapper>\n      );\n    }\n\n    return null;\n  }\n}\n\nDropDown.defaultProps = {\n  maxWidth: '100%',\n  numItemsDisplay: maxItemsDisplay,\n  isMultiple: false,\n  desc: null,\n  isDisableTyping: false,\n  extraInfo: null,\n  notForm: false,\n  overrideValue: null,\n  errorString: null,\n  dropList: null,\n  valueChangeCallback: null,\n  name: null,\n  noInternalDesc: false,\n  logo: null,\n  value: null,\n};\n\nDropDown.propTypes = {\n  dropList: PropTypes.array,\n  placeholderString: PropTypes.string.isRequired,\n  maxWidth: PropTypes.string,\n  name: PropTypes.string,\n  numItemsDisplay: PropTypes.number,\n  isMultiple: PropTypes.bool,\n  desc: PropTypes.string,\n  isDisableTyping: PropTypes.bool,\n  extraInfo: PropTypes.object,\n  notForm: PropTypes.bool,\n  overrideValue: PropTypes.string,\n  errorString: PropTypes.string,\n  valueChangeCallback: PropTypes.func,\n  noInternalDesc: PropTypes.bool,\n  logo: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nexport default DropDown;\n","import React, { Component } from 'react';\nimport { CustomInput } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\n\nimport './Checkbox.scss';\n\nexport default class Checkbox extends Component {\n  render() {\n    const {\n      name,\n      value,\n      desc,\n      onChange,\n      errorString,\n      extraInfo,\n    } = this.props;\n\n    return (\n      <FormInputWrapper\n        errorString={errorString}\n        extraInfo={extraInfo}\n        smallMargin\n      >\n        <div className=\"checkbox-container-v3\">\n          <CustomInput\n            id={name}\n            className=\"checkbox-input\"\n            type=\"checkbox\"\n            onChange={() => onChange('checkbox', name, !value)}\n            checked={!!value}\n          />\n          {/* eslint-disable-next-line */}\n          <p\n            className=\"checkbox-input-desc\"\n            // onClick={() => onChange('checkbox', name, !value)}\n          >\n            {desc}\n          </p>\n        </div>\n      </FormInputWrapper>\n    );\n  }\n}\n\nCheckbox.defaultProps = {\n  value: null,\n  errorString: null,\n  extraInfo: null,\n};\n\nCheckbox.propTypes = {\n  value: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  desc: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.array]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  errorString: PropTypes.string,\n  extraInfo: PropTypes.object,\n};\n"],"sourceRoot":""}