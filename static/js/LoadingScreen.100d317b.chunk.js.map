{"version":3,"sources":["components/Templates/LoadingScreen/LogoSlider.js","components/Templates/LoadingScreen/LoadingScreen.js"],"names":["LogoSlider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logos","_","map","Logos","small","logo","keyFrameLogo","keyframes","_templateObject","length","AnimatedContainer","styled","div","_templateObject2","state","renderLogos","bind","assertThisInitialized","clearInterval","interval","key","index","react_default","a","createElement","concat","src","alt","className","Component","LoadingScreen","isLoading","zIndex","loadingData","handleTimeout","handleOnClick","nextProps","prevState","prevProps","_this2","setState","popupRef","closePopup","clearTimeout","timeout","time","setTimeout","openPopup","loadingEnd","callBack","_this3","_this$state","loadingStyle","mainMessage","mainMsg","extraMessage","errorMsg","react","style","SpinnerAnimation","LoadingScreen_LogoSlider","Popup","ref","r","hideCloseButton","reactstrap_es","noGutters","Button","variant","width","height","onClick","defaultProps","connect","loadingScreen","dispatch","clearLoading"],"mappings":"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","file":"static/js/LoadingScreen.100d317b.chunk.js","sourcesContent":["/**\r\n * LoadingScreen.js\r\n * Loading screen for anywhere use\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nimport Logos from 'assets/images/InsurerLogos';\r\nimport './LoadingScreen.scss';\r\n\r\nclass LogoSlider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const logos = _.map(Logos.small, logo => logo);\r\n    const keyFrameLogo = keyframes`\r\n      0%    { transform: translateX(0); }\r\n      100%  { transform: translateX(calc(-84px * ${logos.length})); }\r\n    `;\r\n\r\n    const AnimatedContainer = styled.div`\r\n      animation: ${keyFrameLogo} 5s linear infinite;\r\n    `;\r\n\r\n    this.state = {\r\n      logos: _.map(Logos.small, logo => logo),\r\n      AnimatedContainer,\r\n    };\r\n\r\n    this.renderLogos = this.renderLogos.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  renderLogos(key) {\r\n    const { logos } = this.state;\r\n    return _.map(logos, (logo, index) => (\r\n      <img key={`loading-icon-${key}-${index}`} src={logo} alt={`loading-icon-${index}.svg`} />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    const { AnimatedContainer } = this.state;\r\n\r\n    return (\r\n      <AnimatedContainer\r\n        className=\"logo-container\"\r\n      >\r\n        {this.renderLogos(0)}\r\n        {this.renderLogos(1)}\r\n      </AnimatedContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogoSlider;\r\n","/**\r\n * LoadingScreen.js\r\n * Loading screen for anywhere use\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport Button from 'components/FormsV3/Button/Button';\r\nimport LogoSlider from './LogoSlider';\r\nimport SpinnerAnimation from '../SpinnerAnimation/SpinnerAnimation';\r\nimport Popup from '../Popup/Popup';\r\n\r\nimport { clearLoading } from '../../../actions/loadingScreenActions';\r\nimport './LoadingScreen.scss';\r\n\r\nconst timeOutTimer = 5000;\r\n\r\nclass LoadingScreen extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.isLoading !== prevState.isLoading) {\r\n      return ({\r\n        isLoading: nextProps.isLoading,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: this.props.isLoading,\r\n      zIndex: -1,\r\n      loadingData: null,\r\n    };\r\n\r\n    this.handleTimeout = this.handleTimeout.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { isLoading } = this.state;\r\n    const { loadingData } = this.props;\r\n\r\n    if (isLoading !== prevState.isLoading) {\r\n      if (isLoading) {\r\n        this.setState({\r\n          zIndex: 9999,\r\n          loadingData,\r\n        });\r\n\r\n        this.popupRef.closePopup();\r\n        clearTimeout(this.timeout);\r\n        const time = loadingData && loadingData.time ? loadingData.time : timeOutTimer;\r\n        this.timeout = setTimeout(this.handleTimeout, time);\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => this.setState({\r\n        zIndex: -1,\r\n      }), 400);\r\n    }\r\n  }\r\n\r\n  handleTimeout() {\r\n    const { isLoading } = this.state;\r\n\r\n    if (isLoading) {\r\n      this.popupRef.openPopup();\r\n    }\r\n  }\r\n\r\n  handleOnClick() {\r\n    const { loadingData } = this.state;\r\n    const { loadingEnd } = this.props;\r\n    this.popupRef.closePopup();\r\n    loadingEnd();\r\n\r\n    if (loadingData && loadingData.callBack) {\r\n      loadingData.callBack();\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoading,\r\n      zIndex,\r\n      loadingData,\r\n    } = this.state;\r\n\r\n    const loadingStyle = isLoading ? 'loading-active' : 'loading-inactive';\r\n    const mainMessage = loadingData && loadingData.mainMsg !== null ? loadingData.mainMsg : 'An error has occured!';\r\n    const extraMessage = loadingData && loadingData.errorMsg !== null ? loadingData.errorMsg : 'Your session has expired. If the problem persists, please refresh your browser.';\r\n\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          className={`loading-screen ${loadingStyle}`}\r\n          style={{ zIndex }}\r\n        >\r\n          {\r\n            isLoading ?\r\n              <Fragment>\r\n                <SpinnerAnimation />\r\n                <div className=\"bottom-container\">\r\n                  <p>Searching from esteemed partners...</p>\r\n                  <LogoSlider />\r\n                </div>\r\n              </Fragment>\r\n            : null\r\n          }\r\n        </div>\r\n        <Popup ref={(r) => { this.popupRef = r; }} hideCloseButton>\r\n          <Fragment>\r\n            <Row className=\"w-100\" noGutters>\r\n              <Col className=\"loading-error\">\r\n                <p className=\"error-text-main\">{mainMessage}</p>\r\n                <p className=\"error-text-extra\">{extraMessage}</p>\r\n                <p className=\"error-text-try\">Please try again!</p>\r\n                <Button\r\n                  variant=\"medium-flat-green\"\r\n                  width={165}\r\n                  height={72}\r\n                  onClick={this.handleOnClick}\r\n                >\r\n                  <p>Continue</p>\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Fragment>\r\n        </Popup>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nLoadingScreen.defaultProps = {\r\n  loadingData: null,\r\n};\r\n\r\nLoadingScreen.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n  loadingData: PropTypes.object,\r\n  loadingEnd: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: state.loadingScreen.isLoading,\r\n  loadingData: state.loadingScreen.loadingData,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loadingEnd: () => {\r\n    dispatch(clearLoading());\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadingScreen);\r\n"],"sourceRoot":""}