{"version":3,"sources":["assets/images/forms/arrow.svg","assets/images/forms/magnifyGlass.svg","assets/images/forms/cross.svg","components/FormsNew/FormInputWrapper/FormInputWrapper.js","components/FormsNew/DropDown/DropDownV2.js","components/FormsNew/Slider/SliderNew.js","components/FormsV3/Slider/SliderNew.js","components/Templates/StepProgressBar/StepProgressBarNew.js"],"names":["module","exports","__webpack_require__","p","FormInputWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","errorString","setErrorString","bind","assertThisInitialized","clearErrorString","nextProps","prevState","refValue","validateForm","message","setState","_this$props","extraInfo","desc","react_default","a","createElement","className","children","Component","defaultProps","maxItemsDisplay","mediumHeight","bigHeight","DropDownV2","dropList","placeholderString","size","numItemsDisplay","height","numItems","maxheight","_","min","length","isOpened","listItems","selectedString","listHeight","multipleSelectedElements","listElementsCounter","clientHeight","extraPadding","noTransition","updateDimensions","handleClickOutside","renderListItems","renderTextInput","handleSelectClick","handleOnInputChange","handleSetMultipleSelectedItem","handleDestroySelected","handleInputKeyPress","handleItemKeyPress","handleChange","handleExit","handleBlur","handleFocus","isEqual","initialListItems","document","addEventListener","window","_this$props2","formStore","name","overrideValue","formValues","constructor","Array","_this$props3","isForm","isElements","isEmpty","toConsumableArray","removeEventListener","isMultiple","_this$state","newHeight","selectedItemsContainer","childElementCount","getBoundingClientRect","bottom","top","error","value","_this$props4","form","formChange","notForm","valueChangeCallback","inputField","event","wrapperRef","contains","target","isFromFocus","_this$state2","_this$props5","key","preventDefault","index","listElements","getAttribute","Math","max","focus","stopPropagation","isOpenOnly","arguments","undefined","_this$state3","_this$props6","item","_this$state4","newArr","indexOf","push","selectedContainer","slice","splice","result","filter","toString","toUpperCase","relatedTarget","inputString","_this$state6","_this$props7","resultString","isError","finalString","some","obj","toLowerCase","_this2","_this$state7","map","style","onClick","handleSelectItemClick","role","tabIndex","onKeyDown","ref","node","_this3","onMouseUp","src","Cross","alt","_this4","_this$props8","isDisableTyping","component","type","placeholder","autoComplete","onChange","disabled","Field","_this5","_this$state8","_this$props9","maxWidth","noInternalDesc","logo","noExternalDesc","actualListheight","dropDownOpenStyle","arrowStyle","transitionStyle","listStyle","concat","multipleStyle","isErrorStyle","noInternalDescStyle","titleStyle","marginTop","marginBottom","logoImg","MagnifyGlass","externalDesc","zIndexStyle","FormsNew_FormInputWrapper_FormInputWrapper","formParent","minHeight","onBlur","onFocus","paddingTop","paddingBottom","renderMultipleSelectedElements","onKeyPress","Arrow","lib","listContainer","connect","ownProps","getFormValues","dispatch","change","marginTopDefault","SLIDERSTATE","ONIDLE","ONDOWN","ONUP","SliderNew","sliderWidth","sliderState","activeIndex","isUseDropDown","renderKnobs","renderSummary","handleResize","handleSliderDown","handleSliderMove","handleSliderUp","storeForm","inputList","formState","formStateList","indexToChange","selectedTabString","selectedTabIndex","formStateIndex","findIndex","listState","isProductSlider","hideWidth","isDrop","innerWidth","rect","sliderStart","position","clientX","x","width","handleClick","len","indexToUse","handleProductSlider","round","newWidth","IDLE","callback","isValidSelection","displayList","inputLength","data","leftOffset","isProductPassedPage","activeStyle","sliderStyle","dataToUse","descStyle","left","e","prefix","suffix","valueToUse","knobColor1","knobColor2","react","DropDown_DropDownV2","slider","onMouseDown","FormsV3_FormInputWrapper_FormInputWrapper","DropDown_DropDown","StepProgressBarNew","getStateList","renderDescription","stateList","history","currIndex","s","go","stateDescriptions","charged","mainDesc","main","subDesc","sub","reactstrap_es","xs","goBack","formStates","v3Slider","FORMSTATES","MAIN","noGutters","components_FormsV3_Slider_SliderNew","FormsNew_Slider_SliderNew","withRouter","setInsurFormState","setInsuranceFormState"],"mappings":"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","file":"static/js/StepProgressBarNew.01a03fa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.6b6008ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/magnifyGlass.4cd15637.svg\";","module.exports = __webpack_public_path__ + \"static/media/cross.8df9f59e.svg\";","/**\r\n * FormInputWrapper.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FormInputWrapper.scss';\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass FormInputWrapper extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (prevState.errorString !== nextProps.errorString) {\r\n      return {\r\n        errorString: nextProps.errorString,\r\n        refValue: nextProps.refValue,\r\n      };\r\n    }\r\n\r\n    if (nextProps.validateForm && prevState.errorString && prevState.refValue !== nextProps.refValue) {\r\n      nextProps.validateForm();\r\n      return {\r\n        errorString: null,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {object} props Component props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      errorString: null,\r\n    };\r\n\r\n    this.setErrorString = this.setErrorString.bind(this);\r\n    this.clearErrorString = this.clearErrorString.bind(this);\r\n  }\r\n\r\n  setErrorString(message) {\r\n    this.setState({\r\n      errorString: message,\r\n    });\r\n  }\r\n\r\n  clearErrorString() {\r\n    this.setState({\r\n      errorString: null,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      errorString,\r\n    } = this.state;\r\n\r\n    const {\r\n      extraInfo,\r\n      desc,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className=\"input-wrapper-main-new input-wrapper-error\"\r\n      >\r\n        {\r\n          desc !== null ?\r\n            <p className=\"input-wrapper-desc\">{desc}</p>\r\n          :\r\n            null\r\n        }\r\n        {this.props.children}\r\n        {\r\n          extraInfo !== null ?\r\n            <div className=\"extra-info-container\">\r\n              {extraInfo}\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n        {\r\n          errorString !== null ?\r\n            <div className=\"input-wrapper-error-text\">\r\n              <p>{errorString}</p>\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormInputWrapper.defaultProps = {\r\n  desc: null,\r\n  extraInfo: null,\r\n};\r\n\r\n\r\nFormInputWrapper.propTypes = {\r\n  desc: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n};\r\n\r\nexport default FormInputWrapper;\r\n","/**\r\n * DropDown.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport document from 'global/document';\r\nimport window from 'global/window';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, getFormValues, change } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\n\r\nimport Arrow from '../../../assets/images/forms/arrow.svg';\r\nimport Cross from '../../../assets/images/forms/cross.svg';\r\nimport MagnifyGlass from '../../../assets/images/forms/magnifyGlass.svg';\r\n\r\nimport './DropDown.scss';\r\nimport './MultipleSelectDropDown.scss';\r\n\r\n// How many items to display\r\nconst maxItemsDisplay = 5;\r\n// Height for medium dropdown\r\nconst mediumHeight = 48;\r\n// Height for big dropdown\r\nconst bigHeight = 72;\r\n// Padding for when multiple items overflow\r\nconst extraPaddingForMultiple = 5;\r\n// Error text to display when error\r\nconst resultNullString = 'No results found';\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass DropDownV2 extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      dropList,\r\n      numItemsDisplay,\r\n      size,\r\n    } = nextProps;\r\n\r\n    if (!_.isEqual(dropList, prevState.initialListItems)) {\r\n      const height = size === 'big' ? bigHeight : mediumHeight;\r\n      const numItems = numItemsDisplay || maxItemsDisplay;\r\n      const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n\r\n      return {\r\n        initialListItems: dropList,\r\n        listItems: dropList,\r\n        maxheight,\r\n        listHeight: maxheight,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {object} props Component props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // dropList - The passed down dropdown list items\r\n    // placeholderString - Placeholder string for input\r\n    // size - Size of this control\r\n    // numItemsDisplay - Max items to display on view\r\n    const {\r\n      dropList,\r\n      placeholderString,\r\n      size,\r\n      numItemsDisplay,\r\n    } = this.props;\r\n\r\n    // Get the control height\r\n    const height = size === 'big' ? bigHeight : mediumHeight;\r\n    // Get number of items to display\r\n    const numItems = numItemsDisplay || maxItemsDisplay;\r\n    // Get the max height of list\r\n    const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n    // isOpened - Whether dropdown is opened\r\n    // isError - Whether there is input error\r\n    // listItems - The actual dropdown list\r\n    // selectedString - The selected item string\r\n    // height - Preferred Control height\r\n    // numItemsDisplay - How many items to display\r\n    // maxheight - Max height of the list\r\n    // listHeight - Height of the list. (Items count + control)\r\n    // multipleSelectedElements - Array of multiple selected items\r\n    // listElementsCounter - Up down selection position\r\n    // clientHeight - Actual height of the control\r\n    this.state = {\r\n      isOpened: false,\r\n      listItems: dropList,\r\n      selectedString: placeholderString,\r\n      height,\r\n      numItemsDisplay: numItems,\r\n      maxheight,\r\n      listHeight: maxheight,\r\n      multipleSelectedElements: null,\r\n      listElementsCounter: -1,\r\n      clientHeight: height,\r\n      extraPadding: 0,\r\n      noTransition: true,\r\n    };\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    this.renderListItems = this.renderListItems.bind(this);\r\n    this.renderTextInput = this.renderTextInput.bind(this);\r\n    this.handleSelectClick = this.handleSelectClick.bind(this);\r\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\r\n    this.handleSetMultipleSelectedItem = this.handleSetMultipleSelectedItem.bind(this);\r\n    this.handleDestroySelected = this.handleDestroySelected.bind(this);\r\n    this.handleInputKeyPress = this.handleInputKeyPress.bind(this);\r\n    this.handleItemKeyPress = this.handleItemKeyPress.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleExit = this.handleExit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    // Add Handler to handle click outside of screen\r\n    document.addEventListener('mousedown', this.handleClickOutside);\r\n    // Update control height on resize in case it squeezes down\r\n    window.addEventListener('resize', this.updateDimensions);\r\n    // Update for the first time\r\n    this.updateDimensions();\r\n\r\n    const { formStore, name, overrideValue } = this.props;\r\n    if (formStore && formStore[name]) {\r\n      const formValues = formStore[name];\r\n      if (formValues.constructor === Array) {\r\n        this.setState({\r\n          multipleSelectedElements: formValues,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (overrideValue) {\r\n      this.handleChange(overrideValue);\r\n    }\r\n\r\n    this.setState({ noTransition : false });\r\n  }\r\n\r\n\r\n  /**\r\n   * Lifecycle Method - shouldComponentUpdate\r\n   *\r\n   * @param {object} nextProps\r\n   * @param {object} nextState\r\n   */\r\n  shouldComponentUpdate(nextProps) {\r\n    /* const {\r\n      isOpened,\r\n      selectedString,\r\n      multipleSelectedElements,\r\n      clientHeight,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    const { formStore, name, isMultiple, overrideValue } = this.props; */\r\n    const { overrideValue } = this.props;\r\n\r\n    if (overrideValue !== nextProps.overrideValue) {\r\n      this.handleChange(nextProps.overrideValue);\r\n    }\r\n\r\n    return true;\r\n    // Render only when open state or selected string is different\r\n    /* return (\r\n      isOpened !== nextState.isOpened ||\r\n      selectedString !== nextState.selectedString ||\r\n      multipleSelectedElements !== nextState.multipleSelectedElements ||\r\n      clientHeight !== nextState.clientHeight ||\r\n      extraPadding !== nextState.extraPadding ||\r\n      !isMultiple && formStore && nextProps.formStore[name] && nextProps.formStore[name]\r\n    ); */\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate() {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { formStore, name } = this.props;\r\n    const isForm = formStore && formStore[name];\r\n\r\n    const isElements = !_.isEmpty(multipleSelectedElements);\r\n    if (isForm) {\r\n      const formValues = formStore[name];\r\n\r\n      if (!isElements || (isElements && !_.isEqual(formValues, multipleSelectedElements))) {\r\n        if (formValues.constructor === Array) {\r\n          this.setState({\r\n            multipleSelectedElements: [...formValues],\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isElements && !isForm) {\r\n      this.setState({\r\n        multipleSelectedElements: null,\r\n      });\r\n    }\r\n    // Update control height if necessary, since the\r\n    // height may change after render\r\n    this.updateDimensions();\r\n    /* const { isOpened } = this.state;\r\n    if (isOpened && !prevState.isOpened) {\r\n      setTimeout(() => {\r\n        const bodyRect = document.body.getBoundingClientRect();\r\n        const elemRect = this.wrapperRef.getBoundingClientRect();\r\n        const offset = elemRect.top - bodyRect.top;\r\n        window.scrollTo(0, offset);\r\n      }, 300);\r\n    } */\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentWillUnmount\r\n   */\r\n  componentWillUnmount() {\r\n    // Remove Handler to handle click outside of screen\r\n    document.removeEventListener('mousedown', this.handleClickOutside);\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  /**\r\n   * Get client height of the selection container\r\n   * to determine the height of the whole control.\r\n   * (For multiple only)\r\n   *\r\n   * @param {object} event\r\n   */\r\n  updateDimensions() {\r\n    const { isMultiple } = this.props;\r\n\r\n    // Only multiple will expand\r\n    if (!isMultiple) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      clientHeight,\r\n      height,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    let newHeight = mediumHeight;\r\n    try {\r\n      newHeight = this.selectedItemsContainer.children[this.selectedItemsContainer.childElementCount - 1].getBoundingClientRect().bottom - this.selectedItemsContainer.children[0].getBoundingClientRect().top;\r\n      newHeight = newHeight < mediumHeight ? mediumHeight : newHeight + 10;\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-empty\r\n    }\r\n\r\n    // if client height is not same as DOM, update with padding if expanded\r\n    if (clientHeight !== newHeight) {\r\n      this.setState({\r\n        clientHeight: newHeight,\r\n        extraPadding: newHeight - 2 * extraPadding > height ? extraPaddingForMultiple : 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange(value) {\r\n    const {\r\n      name,\r\n      form,\r\n      formChange,\r\n      notForm,\r\n      valueChangeCallback,\r\n    } = this.props;\r\n\r\n    if (notForm) {\r\n      if (valueChangeCallback) {\r\n        valueChangeCallback(value);\r\n      }\r\n      this.inputField.value = value;\r\n      return;\r\n    }\r\n\r\n    formChange(form, name, value);\r\n  }\r\n\r\n  /**\r\n   * End selection if click on outside\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleClickOutside(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // If clicked outside, go to exit\r\n    if (\r\n      isOpened &&\r\n      this.wrapperRef &&\r\n      !this.wrapperRef.contains(event.target)\r\n    ) {\r\n      // Close it\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n\r\n      // Unset from focus\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle on enter key\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleInputKeyPress(event) {\r\n    const {\r\n      isOpened,\r\n      listElementsCounter,\r\n      selectedString,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const { placeholderString, isMultiple } = this.props;\r\n\r\n    // If pressed on enter, go to exit\r\n    if (event.key === 'Enter') {\r\n      this.handleExit();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Press down arrow from input\r\n    if (event.key === 'ArrowDown') {\r\n      if (isOpened) {\r\n        if (listElementsCounter === -1) {\r\n          event.preventDefault();\r\n        }\r\n        this.handleItemKeyPress(event);\r\n      } else {\r\n        this.setState({\r\n          isOpened: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (\r\n      isMultiple &&\r\n      event.key === 'Backspace' &&\r\n      (selectedString === '' || selectedString === placeholderString) &&\r\n      !_.isEmpty(multipleSelectedElements)\r\n    ) {\r\n      this.handleDestroySelected(multipleSelectedElements[multipleSelectedElements.length - 1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Key press on list items\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleItemKeyPress(event) {\r\n    const {\r\n      listElementsCounter,\r\n    } = this.state;\r\n\r\n    let index = listElementsCounter;\r\n\r\n    // If click enter on list item\r\n    if (event.key === 'Enter') {\r\n      // Focus input field\r\n      // this.inputField.focus();\r\n      // Handle exit with the item value\r\n      this.handleExit(this.listElements[index].getAttribute('value'));\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Navigate list with up down arrow\r\n    if (event.key === 'ArrowDown') {\r\n      index = listElementsCounter + 1;\r\n    } else if (event.key === 'ArrowUp') {\r\n      index = listElementsCounter - 1;\r\n    }\r\n\r\n    // Cap index within list\r\n    index = Math.max(0, Math.min(index, this.listElements.length - 1));\r\n    // Focus on the next item\r\n    this.listElements[index].focus();\r\n\r\n    // If index changed, update state\r\n    if (index !== listElementsCounter) {\r\n      this.setState({\r\n        listElementsCounter: index,\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of dropdown list\r\n   *\r\n   * @param {bool} isOpenOnly - Only can open\r\n   */\r\n  handleSelectClick(isOpenOnly = false) {\r\n    const {\r\n      isOpened,\r\n      selectedString,\r\n      maxheight,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const {\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // If this frame is not from focus\r\n    if (!this.isFromFocus) {\r\n      // Set open state\r\n      if (!isOpenOnly || (isOpenOnly && !isOpened)) {\r\n        this.setState({\r\n          isOpened: !isOpened,\r\n        });\r\n      }\r\n\r\n      // If previously invalid, reset list\r\n      if (!selectedString || selectedString === resultNullString) {\r\n        this.setState({\r\n          listItems: dropList,\r\n          listHeight: maxheight,\r\n          listElementsCounter: -1,\r\n        });\r\n\r\n        if (!isMultiple || (isMultiple && _.isEmpty(multipleSelectedElements))) {\r\n          this.handleChange(null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Unlock from focus\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles selection of dropdown item\r\n   *\r\n   * @param {object} event - Click event\r\n   * @param {string} item - Input string\r\n   */\r\n  handleSelectItemClick(event, item) {\r\n    // If click on null item return\r\n    if (item === resultNullString) {\r\n      return;\r\n    }\r\n\r\n    const { dropList } = this.props;\r\n\r\n    const {\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Reset drop list items to all, set selected string,\r\n    // and reset any errors\r\n    this.setState({\r\n      listItems: dropList,\r\n    });\r\n\r\n    // this.formParent.clearErrorString();\r\n\r\n    if (isMultiple) {\r\n      // If multiple dropdown, reset selected string\r\n      this.setState({\r\n        selectedString: '',\r\n      });\r\n\r\n      // Set input field text to empty\r\n      this.inputField.value = '';\r\n      // Refocus input bar\r\n      // this.inputField.focus();\r\n\r\n      // Set multiple selected item\r\n      this.handleSetMultipleSelectedItem(item);\r\n    } else {\r\n      this.setState({\r\n        selectedString: item,\r\n      });\r\n\r\n      // Toggle the dropdown menu\r\n      this.handleSelectClick();\r\n\r\n      // Update redux state\r\n      this.handleChange(item);\r\n\r\n      // Close dropdown\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Selection of multi select dropdown\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleSetMultipleSelectedItem(item) {\r\n    const { multipleSelectedElements, height } = this.state;\r\n\r\n    const newArr = multipleSelectedElements || [];\r\n\r\n    // If item does not exists in the selected list\r\n    if (newArr.indexOf(item) < 0) {\r\n      // Add item to list\r\n      newArr.push(item);\r\n\r\n      // Change state\r\n      this.setState({\r\n        multipleSelectedElements: newArr,\r\n        clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n        isOpened: false,\r\n      });\r\n\r\n      // Update redux store\r\n      this.handleChange(newArr);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys multi selected item\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleDestroySelected(item) {\r\n    const { height } = this.state;\r\n\r\n    const { multipleSelectedElements } = this.state;\r\n    // Duplicate clean copy\r\n    let newArr = multipleSelectedElements.slice();\r\n    // Delete chosen item\r\n    const index = newArr.indexOf(item);\r\n    newArr.splice(index, 1);\r\n    // Set null if empty\r\n    newArr = newArr.length === 0 ? null : newArr;\r\n\r\n    // Update state\r\n    this.setState({\r\n      multipleSelectedElements: newArr,\r\n      clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n    });\r\n\r\n    // Update redux state\r\n    this.handleChange(newArr);\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles on input changes\r\n   *\r\n   * @param {object} event\r\n   */\r\n  async handleOnInputChange(event) {\r\n    // Get current input value\r\n    const { value } = event.target;\r\n\r\n    const { dropList } = this.props;\r\n    const { height, numItemsDisplay } = this.state;\r\n\r\n    // Attempt to match value to list\r\n    const result = _.filter(\r\n      dropList,\r\n      item => item.toString().toUpperCase().indexOf(value.toString().toUpperCase()) === 0,\r\n    );\r\n\r\n    // Get length of new list, min 1 which is error string\r\n    const length = result.length ? result.length : 1;\r\n\r\n    // Set new list items, height of dropdown list,\r\n    // Force open list on type, and set selected string to value\r\n    this.setState({\r\n      listItems: result.length ? result : [resultNullString],\r\n      listHeight: (_.min([length, numItemsDisplay]) + 1) * height,\r\n      isOpened: true,\r\n      selectedString: value,\r\n      listElementsCounter: -1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle Blur event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleBlur(event) {\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n\r\n    // If outside of children\r\n    if (!isChildren) {\r\n      // Close dropdown\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n      // Handle exit case\r\n      this.handleExit();\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Focus event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleFocus(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n    // If not from children\r\n    if (!isChildren) {\r\n      // Open dropdown\r\n      if (!isOpened) {\r\n        this.handleSelectClick(true);\r\n        // Prevent double click\r\n        this.isFromFocus = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle exit selection of entered input\r\n   *\r\n   * @param {string} inputString - From selection\r\n   */\r\n  handleExit(inputString = null) {\r\n    const {\r\n      selectedString,\r\n      listItems,\r\n    } = this.state;\r\n\r\n    const {\r\n      placeholderString,\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Result string if match original list\r\n    let resultString = null;\r\n    // If input causes an error\r\n    let isError = false;\r\n    // The string to use\r\n    const finalString = inputString !== null ? inputString : selectedString;\r\n    // If possible valid input\r\n    if (\r\n      finalString &&\r\n      finalString !== placeholderString &&\r\n      finalString !== ''\r\n    ) {\r\n      // Attempt to match finalString to original list\r\n      listItems.some((obj) => {\r\n        const result = obj.toString().toLowerCase() === finalString.toString().toLowerCase();\r\n        if (result) {\r\n          resultString = obj;\r\n        }\r\n\r\n        return result;\r\n      });\r\n\r\n      // Check error if no match\r\n      isError = !resultString;\r\n      // Set result string to match value or error value\r\n      resultString = isError ? null : resultString;\r\n\r\n      if (isMultiple) {\r\n        if (!isError) {\r\n          this.handleSetMultipleSelectedItem(resultString);\r\n        }\r\n\r\n        this.inputField.value = '';\r\n      } else {\r\n        // Update redux value\r\n        this.handleChange(resultString);\r\n\r\n        this.setState({\r\n          isOpened: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    // If not error, reset list to list all,\r\n    // Set selected string and error if possible\r\n    // and close the list\r\n    this.setState({\r\n      listItems: isError ? listItems : dropList,\r\n      selectedString: resultString,\r\n    });\r\n\r\n    if (isError) {\r\n      // this.formParent.setErrorString(resultNullString);\r\n    } else {\r\n      // this.formParent.clearErrorString();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the dropdown list items\r\n   */\r\n  renderListItems() {\r\n    const { listItems, height } = this.state;\r\n    this.listElements = [];\r\n\r\n    const result = _.map(listItems, item => (\r\n      <li key={item}>\r\n        <div\r\n          className=\"list-item text-style\"\r\n          style={{ height }}\r\n          onClick={event => this.handleSelectItemClick(event, item)}\r\n          role=\"button\"\r\n          tabIndex={-1}\r\n          value={item}\r\n          onKeyDown={(event) => { this.handleItemKeyPress(event); }}\r\n          ref={(node) => { if (node !== null) this.listElements.push(node); }}\r\n        >\r\n          <p>{item}</p>\r\n        </div>\r\n      </li>\r\n    ));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render the multiple selected elements in the input container\r\n   */\r\n  renderMultipleSelectedElements() {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { isMultiple } = this.props;\r\n\r\n    if (!isMultiple) {\r\n      return null;\r\n    }\r\n\r\n    return _.map(multipleSelectedElements, item => (\r\n      <div className=\"selected-item-container\" key={item}>\r\n        <div className=\"selected-item\">\r\n          <p>{item}</p>\r\n          <button\r\n            className=\"selected-item-destroy\"\r\n            onMouseUp={() => this.handleDestroySelected(item)}\r\n            tabIndex={-1}\r\n          >\r\n            <img src={Cross} alt=\"cross.svg\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  renderTextInput() {\r\n    const {\r\n      isMultiple,\r\n      isDisableTyping,\r\n      placeholderString,\r\n      name,\r\n      notForm,\r\n    } = this.props;\r\n\r\n    if (isMultiple || notForm) {\r\n      return (\r\n        isDisableTyping ?\r\n          <input\r\n            component=\"input\"\r\n            type=\"text\"\r\n            placeholder={placeholderString}\r\n            autoComplete=\"off\"\r\n            ref={node => (this.inputField = node)}\r\n            onChange={event => this.handleOnInputChange(event)}\r\n            onKeyDown={event => this.handleInputKeyPress(event)}\r\n            onClick={() => this.handleSelectClick(true)}\r\n            tabIndex={0}\r\n            disabled\r\n          />\r\n          :\r\n          <input\r\n            component=\"input\"\r\n            type=\"text\"\r\n            placeholder={placeholderString}\r\n            autoComplete=\"off\"\r\n            ref={node => (this.inputField = node)}\r\n            onChange={event => this.handleOnInputChange(event)}\r\n            onKeyDown={event => this.handleInputKeyPress(event)}\r\n            onClick={() => this.handleSelectClick(true)}\r\n            tabIndex={0}\r\n          />\r\n      );\r\n    }\r\n\r\n    return (\r\n      isDisableTyping ?\r\n        <Field\r\n          name={name}\r\n          component=\"input\"\r\n          type=\"text\"\r\n          // placeholder={placeholderString}\r\n          autoComplete=\"off\"\r\n          ref={node => (this.inputField = node)}\r\n          onChange={event => this.handleOnInputChange(event)}\r\n          onKeyDown={event => this.handleInputKeyPress(event)}\r\n          onClick={() => this.handleSelectClick(true)}\r\n          tabIndex={0}\r\n          disabled\r\n        />\r\n        :\r\n        <Field\r\n          name={name}\r\n          component=\"input\"\r\n          type=\"text\"\r\n          // placeholder={placeholderString}\r\n          autoComplete=\"off\"\r\n          ref={node => (this.inputField = node)}\r\n          onChange={event => this.handleOnInputChange(event)}\r\n          onKeyDown={event => this.handleInputKeyPress(event)}\r\n          onClick={() => this.handleSelectClick(true)}\r\n          tabIndex={0}\r\n        />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render component\r\n   */\r\n  render() {\r\n    const {\r\n      isOpened,\r\n      listHeight,\r\n      height,\r\n      clientHeight,\r\n      extraPadding,\r\n      noTransition,\r\n    } = this.state;\r\n\r\n    // const isOpened = true;\r\n\r\n    if (height && listHeight) {\r\n      const {\r\n        maxWidth,\r\n        isMultiple,\r\n        desc,\r\n        extraInfo,\r\n        errorString,\r\n        formStore,\r\n        name,\r\n        validateForm,\r\n        noInternalDesc,\r\n        logo,\r\n        noExternalDesc,\r\n        placeholderString,\r\n      } = this.props;\r\n\r\n      // Actual height of the whole control\r\n      const actualheight = isOpened ? listHeight : height;\r\n      // Actual height of only the list\r\n      const actualListheight = actualheight - height;\r\n\r\n      // Dynamic styles\r\n      const dropDownOpenStyle = isOpened ? 'dropdown-container-opened' : 'dropdown-container-closed';\r\n      const arrowStyle = isOpened ? 'angle-up' : 'angle-down';\r\n      const transitionStyle = noTransition ? '' : 'do-transition';\r\n      const listStyle = isOpened ? `list-opened ${transitionStyle}` : `list-closed ${transitionStyle}`;\r\n      const multipleStyle = isMultiple || logo ? 'multi-drop-new' : '';\r\n      const isErrorStyle = errorString ? 'error' : '';\r\n\r\n      const noInternalDescStyle = noInternalDesc ? 'no-internal-desc' : '';\r\n\r\n      const refValue = formStore ? formStore[name] : null;\r\n\r\n      const titleStyle = refValue ? 'focused-title' : '';\r\n      const marginTop = clientHeight > mediumHeight || isOpened ? clientHeight : 0;\r\n      const marginBottom = clientHeight > mediumHeight ? 6 : 0;\r\n\r\n      const logoImg = isMultiple ? MagnifyGlass : logo;\r\n      const externalDesc = noExternalDesc ? null : desc;\r\n      const zIndexStyle = isOpened ? 'drop-open' : 'drop-close';\r\n\r\n      return (\r\n        <FormInputWrapper\r\n          desc={externalDesc}\r\n          ref={node => (this.formParent = node)}\r\n          extraInfo={extraInfo}\r\n          errorString={errorString}\r\n          refValue={refValue}\r\n          validateForm={validateForm}\r\n          minHeight={clientHeight}\r\n        >\r\n          <div\r\n            className={`dropdown-new ${zIndexStyle} ${multipleStyle} ${noInternalDescStyle}`}\r\n            style={{\r\n              height: clientHeight,\r\n              maxWidth,\r\n              marginBottom,\r\n            }}\r\n            ref={node => (this.wrapperRef = node)}\r\n            onBlur={event => this.handleBlur(event)}\r\n            onFocus={event => this.handleFocus(event)}\r\n          >\r\n            <div\r\n              className={`dropdown-container ${dropDownOpenStyle} ${isErrorStyle}`}\r\n            >\r\n              {\r\n                isMultiple || noInternalDesc ? null :\r\n                <div className={`title-header ${titleStyle}`}>\r\n                  {placeholderString}\r\n                </div>\r\n              }\r\n              <div\r\n                className=\"selected-container\"\r\n                onKeyDown={event => this.handleInputKeyPress(event)}\r\n                role=\"button\"\r\n                style={{ minHeight: height }}\r\n                tabIndex={-1}\r\n                ref={node => (this.selectedContainer = node)}\r\n              >\r\n                {\r\n                  logoImg ?\r\n                    <div className=\"icon-container\" style={{ minHeight: height }}>\r\n                      <img\r\n                        src={logoImg}\r\n                        alt=\"DropdownImage.svg\"\r\n                      />\r\n                    </div>\r\n                  :\r\n                    null\r\n                }\r\n                <div\r\n                  className=\"selected-items-container\"\r\n                  ref={node => this.selectedItemsContainer = node}\r\n                  style={{ paddingTop: extraPadding, paddingBottom: extraPadding }}\r\n                >\r\n                  {this.renderMultipleSelectedElements()}\r\n                  <div className=\"selected-text selected-text-multi\">\r\n                    {this.renderTextInput()}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"selected-arrow\"\r\n                  onClick={() => this.handleSelectClick()}\r\n                  onKeyPress={() => {}}\r\n                  role=\"button\"\r\n                  tabIndex={-1}\r\n                >\r\n                  <img\r\n                    src={Arrow}\r\n                    alt=\"arrow.svg\"\r\n                    className={`selected-arrow-style ${arrowStyle}`}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Scrollbars\r\n                className={`list-container ${listStyle}`}\r\n                style={{\r\n                  minHeight: actualListheight,\r\n                  marginTop,\r\n                }}\r\n                ref={node => this.listContainer = node}\r\n                tabIndex={-1}\r\n              >\r\n                {\r\n                  isOpened ?\r\n                    this.renderListItems()\r\n                  :\r\n                    null\r\n                }\r\n              </Scrollbars>\r\n            </div>\r\n          </div>\r\n        </FormInputWrapper>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nDropDownV2.defaultProps = {\r\n  maxWidth: '100%',\r\n  numItemsDisplay: maxItemsDisplay,\r\n  isMultiple: false,\r\n  desc: null,\r\n  isDisableTyping: false,\r\n  extraInfo: null,\r\n  notForm: false,\r\n  overrideValue: null,\r\n  errorString: null,\r\n  dropList: null,\r\n  formStore: null,\r\n  valueChangeCallback: null,\r\n  name: null,\r\n  form: null,\r\n  validateForm: null,\r\n  noInternalDesc: false,\r\n  noExternalDesc: false,\r\n  logo: null,\r\n};\r\n\r\nDropDownV2.propTypes = {\r\n  formStore: PropTypes.object,\r\n  dropList: PropTypes.array,\r\n  placeholderString: PropTypes.string.isRequired,\r\n  maxWidth: PropTypes.string,\r\n  size: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  numItemsDisplay: PropTypes.number,\r\n  formChange: PropTypes.func.isRequired,\r\n  isMultiple: PropTypes.bool,\r\n  desc: PropTypes.string,\r\n  isDisableTyping: PropTypes.bool,\r\n  extraInfo: PropTypes.object,\r\n  notForm: PropTypes.bool,\r\n  overrideValue: PropTypes.string,\r\n  errorString: PropTypes.string,\r\n  valueChangeCallback: PropTypes.func,\r\n  form: PropTypes.string,\r\n  validateForm: PropTypes.func,\r\n  noInternalDesc: PropTypes.bool,\r\n  noExternalDesc: PropTypes.bool,\r\n  logo: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  formStore: (getFormValues(ownProps.form)(state)),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  formChange: (form, key, value) => {\r\n    dispatch(change(form, key, value));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DropDownV2);\r\n","/**\r\n * Slider.js\r\n * Selection with dynamic content\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport document from 'global/document';\r\nimport window from 'global/window';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Field, getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\nimport DropDownV2 from '../DropDown/DropDownV2';\r\n\r\nimport './SliderNew.scss';\r\n\r\nconst marginTopDefault = 0; // 60;\r\n\r\nconst SLIDERSTATE = {\r\n  ONIDLE: 0,\r\n  ONDOWN: 1,\r\n  ONUP: 2,\r\n};\r\n\r\n/**\r\n * Custom Selection Class\r\n */\r\nclass SliderNew extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      storeForm,\r\n      inputList,\r\n      name,\r\n      formState,\r\n      formStateList,\r\n    } = nextProps;\r\n\r\n    const { activeIndex } = prevState;\r\n\r\n    let indexToChange = null;\r\n    if (storeForm) {\r\n      const selectedTabString = storeForm[name];\r\n      const selectedTabIndex = inputList.indexOf(selectedTabString);\r\n      if (selectedTabIndex !== -1 && selectedTabIndex !== activeIndex) {\r\n        indexToChange = selectedTabIndex;\r\n      }\r\n    }\r\n\r\n    if (formState) {\r\n      const formStateIndex = _.findIndex(formStateList, listState => listState.state === formState);\r\n      if (formStateIndex !== activeIndex) {\r\n        indexToChange = formStateIndex;\r\n      }\r\n    }\r\n\r\n    if (indexToChange !== null) {\r\n      const len = inputList.length - 1;\r\n      const newWidth = indexToChange / len * 100;\r\n\r\n      return ({\r\n        activeIndex: indexToChange,\r\n        sliderWidth: newWidth,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sliderWidth: 0,\r\n      sliderState: SLIDERSTATE.ONIDLE,\r\n      activeIndex: 0,\r\n      isUseDropDown: false,\r\n      marginTop: marginTopDefault,\r\n    };\r\n\r\n    this.renderKnobs = this.renderKnobs.bind(this);\r\n    this.renderSummary = this.renderSummary.bind(this);\r\n\r\n    this.handleResize = this.handleResize.bind(this);\r\n\r\n    this.handleSliderDown = this.handleSliderDown.bind(this);\r\n    this.handleSliderMove = this.handleSliderMove.bind(this);\r\n    this.handleSliderUp = this.handleSliderUp.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('mousemove', this.handleSliderMove);\r\n    document.addEventListener('mouseup', this.handleSliderUp);\r\n    window.addEventListener('resize', this.handleResize);\r\n\r\n    const {\r\n      storeForm,\r\n      name,\r\n      change,\r\n      inputList,\r\n      isProductSlider,\r\n    } = this.props;\r\n\r\n    if (!isProductSlider && !(storeForm && storeForm[name])) {\r\n      change(name, inputList[0]);\r\n    }\r\n\r\n    this.handleResize();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousemove', this.handleSliderMove);\r\n    document.removeEventListener('mouseup', this.handleSliderUp);\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  handleResize() {\r\n    const { hideWidth, isProductSlider } = this.props;\r\n    if (!isProductSlider && hideWidth > 0) {\r\n      const isDrop = window.innerWidth <= hideWidth;\r\n      this.setState({\r\n        isUseDropDown: isDrop,\r\n        marginTop: isDrop ? 0 : marginTopDefault,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSliderDown() {\r\n    const { sliderState } = this.state;\r\n\r\n    if (sliderState !== SLIDERSTATE.ONDOWN) {\r\n      this.setState({\r\n        sliderState: SLIDERSTATE.ONDOWN,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSliderMove(event) {\r\n    const { sliderState } = this.state;\r\n\r\n    if (sliderState === SLIDERSTATE.ONDOWN) {\r\n      const rect = this.sliderStart.getBoundingClientRect();\r\n      const position = Math.max(0, Math.min(event.clientX - rect.x - 5, rect.width)) / rect.width * 100;\r\n      this.setState({\r\n        sliderWidth: position,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSliderUp() {\r\n    this.handleClick();\r\n  }\r\n\r\n  handleClick(index = null) {\r\n    const { inputList, isProductSlider } = this.props;\r\n\r\n    const { sliderWidth } = this.state;\r\n    const len = inputList.length - 1;\r\n    const indexToUse = this.handleProductSlider(index === null ? Math.round(sliderWidth / 100 * len) : index);\r\n    const newWidth = indexToUse / len * 100;\r\n\r\n    if (!isProductSlider) {\r\n      const {\r\n        name,\r\n        change,\r\n      } = this.props;\r\n\r\n      change(name, inputList[indexToUse]);\r\n    }\r\n\r\n    this.setState({\r\n      sliderState: SLIDERSTATE.IDLE,\r\n      sliderWidth: newWidth,\r\n      activeIndex: indexToUse,\r\n    });\r\n\r\n    if (inputList[indexToUse].callback) {\r\n      inputList[indexToUse].callback();\r\n    }\r\n  }\r\n\r\n  handleProductSlider(indexToUse) {\r\n    const { formState, formStateList } = this.props;\r\n    if (!formState) {\r\n      return indexToUse;\r\n    }\r\n\r\n    const formStateIndex = _.findIndex(formStateList, listState => listState.state === formState);\r\n    const isValidSelection = indexToUse < formStateIndex;\r\n    if (isValidSelection && formStateList[indexToUse].callback) {\r\n      formStateList[indexToUse].callback(formState);\r\n    }\r\n\r\n    return isValidSelection ? indexToUse : formStateIndex;\r\n  }\r\n\r\n  renderKnobs() {\r\n    const { activeIndex } = this.state;\r\n    const { inputList, isProductSlider, displayList } = this.props;\r\n\r\n    const inputLength = inputList.length - 1;\r\n    return _.map(inputList, (data, index) => {\r\n      const leftOffset = index / inputLength * 100;\r\n      const isProductPassedPage = isProductSlider && index <= activeIndex;\r\n      let activeStyle = '';\r\n      if (isProductPassedPage || (!isProductSlider && index === activeIndex)) {\r\n        activeStyle = 'desc-active';\r\n      }\r\n      const sliderStyle = isProductPassedPage ? 'knob-done' : 'knob-default';\r\n      const indexToUse = index;\r\n      const dataToUse = displayList && displayList[index] ? displayList[index] : data;\r\n      const descStyle = isProductSlider ? 'desc-bottom' : '';\r\n\r\n      return (\r\n        <button\r\n          key={data}\r\n          tabIndex={-1}\r\n          className={`knob ${sliderStyle}`}\r\n          style={{ left: `${leftOffset}%` }}\r\n          onClick={(e) => { e.preventDefault(); this.handleClick(indexToUse); }}\r\n          onKeyDown={() => {}}\r\n        >\r\n          <p className={`${activeStyle} desc ${descStyle}`}>\r\n            {dataToUse}\r\n          </p>\r\n        </button>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderSummary() {\r\n    const {\r\n      activeIndex,\r\n    } = this.state;\r\n\r\n    const {\r\n      inputList,\r\n      prefix,\r\n      suffix,\r\n      isProductSlider,\r\n      displayList,\r\n    } = this.props;\r\n\r\n    if (!isProductSlider) {\r\n      const value = inputList[activeIndex];\r\n      const valueToUse = displayList && displayList[activeIndex] ? displayList[activeIndex] : value;\r\n\r\n      return (\r\n        <div className=\"slider-summary-container-new\">\r\n          {\r\n            prefix ?\r\n              <span className=\"prefix-suffix\">{`${prefix} `}</span>\r\n            :\r\n              null\r\n          }\r\n          <span className=\"value\">{valueToUse}</span>\r\n          {\r\n            suffix ?\r\n              <span className=\"prefix-suffix\">{` ${suffix}`}</span>\r\n            :\r\n              null\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      sliderWidth,\r\n      isUseDropDown,\r\n      marginTop,\r\n    } = this.state;\r\n\r\n    const {\r\n      name,\r\n      desc,\r\n      form,\r\n      change,\r\n      inputList,\r\n      extraInfo,\r\n      isProductSlider,\r\n      maxWidth,\r\n      errorString,\r\n    } = this.props;\r\n\r\n    const knobColor1 = isProductSlider ? 'white-knob' : 'color-knob';\r\n    const knobColor2 = isProductSlider ? 'color-knob' : 'white-knob';\r\n\r\n    return (\r\n      <FormInputWrapper\r\n        desc={desc}\r\n        ref={node => (this.formParent = node)}\r\n        extraInfo={extraInfo}\r\n        errorString={errorString}\r\n      >\r\n        <Fragment>\r\n          {this.renderSummary()}\r\n          <div\r\n            className=\"slider-container-new\"\r\n            style={{ marginTop, maxWidth }}\r\n          >\r\n            {\r\n              isUseDropDown ?\r\n                <DropDownV2\r\n                  form={form}\r\n                  change={change}\r\n                  name={name}\r\n                  placeholderString=\"Enter or select your destinations\"\r\n                  dropList={inputList}\r\n                  size=\"medium\"\r\n                  isDisableTyping\r\n                />\r\n              :\r\n                <Fragment>\r\n                  <div\r\n                    className=\"line\"\r\n                    ref={node => this.sliderStart = node}\r\n                  />\r\n                  <div\r\n                    className=\"line-green\"\r\n                    style={{ width: `${sliderWidth}%` }}\r\n                  />\r\n                  <div\r\n                    className=\"knob-container\"\r\n                  >\r\n                    {this.renderKnobs()}\r\n                  </div>\r\n                  <div\r\n                    className=\"knob-container\"\r\n                  >\r\n                    <button\r\n                      tabIndex={0}\r\n                      className={`slider-knob ${knobColor1}`}\r\n                      ref={node => this.slider = node}\r\n                      onMouseDown={this.handleSliderDown}\r\n                      onClick={e => e.preventDefault()}\r\n                      style={{ left: `${sliderWidth}%` }}\r\n                    >\r\n                      <div className={`inner ${knobColor2}`} />\r\n                    </button>\r\n                    {\r\n                      isProductSlider ?\r\n                        null\r\n                      :\r\n                        <Field name={name} component={() => null} />\r\n                    }\r\n                  </div>\r\n                </Fragment>\r\n            }\r\n          </div>\r\n        </Fragment>\r\n      </FormInputWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nSliderNew.defaultProps = {\r\n  desc: null,\r\n  hideWidth: 0,\r\n  prefix: null,\r\n  suffix: null,\r\n  extraInfo: null,\r\n  isProductSlider: false,\r\n  name: null,\r\n  change: null,\r\n  storeForm: null,\r\n  form: null,\r\n  maxWidth: '100%',\r\n  errorString: null,\r\n  formState: null,\r\n  formStateList: null,\r\n  displayList: null,\r\n};\r\n\r\nSliderNew.propTypes = {\r\n  isProductSlider: PropTypes.bool,\r\n  inputList: PropTypes.array.isRequired,\r\n  name: PropTypes.string,\r\n  change: PropTypes.func,\r\n  desc: PropTypes.string,\r\n  storeForm: PropTypes.object,\r\n  hideWidth: PropTypes.number,\r\n  form: PropTypes.string,\r\n  prefix: PropTypes.string,\r\n  suffix: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n  maxWidth: PropTypes.string,\r\n  errorString: PropTypes.string,\r\n  formState: PropTypes.number,\r\n  formStateList: PropTypes.array,\r\n  displayList: PropTypes.array,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  storeForm: (getFormValues(ownProps.form)(state)),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(SliderNew);\r\n","/**\r\n * Slider.js\r\n * Selection with dynamic content\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport document from 'global/document';\r\nimport window from 'global/window';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Field, getFormValues } from 'redux-form';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\nimport DropDownV2 from '../DropDown/DropDown';\r\n\r\nimport './SliderNew.scss';\r\n\r\nconst marginTopDefault = 0; // 60;\r\n\r\nconst SLIDERSTATE = {\r\n  ONIDLE: 0,\r\n  ONDOWN: 1,\r\n  ONUP: 2,\r\n};\r\n\r\n/**\r\n * Custom Selection Class\r\n */\r\nclass SliderNew extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      storeForm,\r\n      inputList,\r\n      name,\r\n      formState,\r\n      formStateList,\r\n    } = nextProps;\r\n\r\n    const { activeIndex } = prevState;\r\n\r\n    let indexToChange = null;\r\n    if (storeForm) {\r\n      const selectedTabString = storeForm[name];\r\n      const selectedTabIndex = inputList.indexOf(selectedTabString);\r\n      if (selectedTabIndex !== -1 && selectedTabIndex !== activeIndex) {\r\n        indexToChange = selectedTabIndex;\r\n      }\r\n    }\r\n\r\n    if (formState) {\r\n      const formStateIndex = _.findIndex(formStateList, listState => listState.state === formState);\r\n      if (formStateIndex !== activeIndex) {\r\n        indexToChange = formStateIndex;\r\n      }\r\n    }\r\n\r\n    if (indexToChange !== null) {\r\n      const len = inputList.length - 1;\r\n      const newWidth = indexToChange / len * 100;\r\n\r\n      return ({\r\n        activeIndex: indexToChange,\r\n        sliderWidth: newWidth,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sliderWidth: 0,\r\n      sliderState: SLIDERSTATE.ONIDLE,\r\n      activeIndex: 0,\r\n      isUseDropDown: false,\r\n      marginTop: marginTopDefault,\r\n    };\r\n\r\n    this.renderKnobs = this.renderKnobs.bind(this);\r\n    this.renderSummary = this.renderSummary.bind(this);\r\n\r\n    this.handleResize = this.handleResize.bind(this);\r\n\r\n    this.handleSliderDown = this.handleSliderDown.bind(this);\r\n    this.handleSliderMove = this.handleSliderMove.bind(this);\r\n    this.handleSliderUp = this.handleSliderUp.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('mousemove', this.handleSliderMove);\r\n    document.addEventListener('mouseup', this.handleSliderUp);\r\n    window.addEventListener('resize', this.handleResize);\r\n\r\n    const {\r\n      storeForm,\r\n      name,\r\n      change,\r\n      inputList,\r\n      isProductSlider,\r\n    } = this.props;\r\n\r\n    if (!isProductSlider && !(storeForm && storeForm[name])) {\r\n      change(name, inputList[0]);\r\n    }\r\n\r\n    this.handleResize();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousemove', this.handleSliderMove);\r\n    document.removeEventListener('mouseup', this.handleSliderUp);\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  handleResize() {\r\n    const { hideWidth, isProductSlider } = this.props;\r\n    if (!isProductSlider && hideWidth > 0) {\r\n      const isDrop = window.innerWidth <= hideWidth;\r\n      this.setState({\r\n        isUseDropDown: isDrop,\r\n        marginTop: isDrop ? 0 : marginTopDefault,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSliderDown() {\r\n    const { sliderState } = this.state;\r\n\r\n    if (sliderState !== SLIDERSTATE.ONDOWN) {\r\n      this.setState({\r\n        sliderState: SLIDERSTATE.ONDOWN,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSliderMove(event) {\r\n    const { sliderState } = this.state;\r\n\r\n    if (sliderState === SLIDERSTATE.ONDOWN) {\r\n      const rect = this.sliderStart.getBoundingClientRect();\r\n      const position = Math.max(0, Math.min(event.clientX - rect.x - 5, rect.width)) / rect.width * 100;\r\n      this.setState({\r\n        sliderWidth: position,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSliderUp() {\r\n    this.handleClick();\r\n  }\r\n\r\n  handleClick(index = null) {\r\n    const { inputList, isProductSlider } = this.props;\r\n\r\n    const { sliderWidth } = this.state;\r\n    const len = inputList.length - 1;\r\n    const indexToUse = this.handleProductSlider(index === null ? Math.round(sliderWidth / 100 * len) : index);\r\n    const newWidth = indexToUse / len * 100;\r\n\r\n    if (!isProductSlider) {\r\n      const {\r\n        name,\r\n        change,\r\n      } = this.props;\r\n\r\n      change(name, inputList[indexToUse]);\r\n    }\r\n\r\n    this.setState({\r\n      sliderState: SLIDERSTATE.IDLE,\r\n      sliderWidth: newWidth,\r\n      activeIndex: indexToUse,\r\n    });\r\n\r\n    if (inputList[indexToUse].callback) {\r\n      inputList[indexToUse].callback();\r\n    }\r\n  }\r\n\r\n  handleProductSlider(indexToUse) {\r\n    const { formState, formStateList } = this.props;\r\n    if (!formState) {\r\n      return indexToUse;\r\n    }\r\n\r\n    const formStateIndex = _.findIndex(formStateList, listState => listState.state === formState);\r\n    const isValidSelection = indexToUse < formStateIndex;\r\n    if (isValidSelection && formStateList[indexToUse].callback) {\r\n      formStateList[indexToUse].callback(formState);\r\n    }\r\n\r\n    return isValidSelection ? indexToUse : formStateIndex;\r\n  }\r\n\r\n  renderKnobs() {\r\n    const { activeIndex } = this.state;\r\n    const { inputList, isProductSlider, displayList } = this.props;\r\n\r\n    const inputLength = inputList.length - 1;\r\n    return _.map(inputList, (data, index) => {\r\n      const leftOffset = index / inputLength * 100;\r\n      const isProductPassedPage = isProductSlider && index <= activeIndex;\r\n      let activeStyle = '';\r\n      if (isProductPassedPage || (!isProductSlider && index === activeIndex)) {\r\n        activeStyle = 'desc-active';\r\n      }\r\n      const sliderStyle = isProductPassedPage ? 'knob-done' : 'knob-default';\r\n      const indexToUse = index;\r\n      const dataToUse = displayList && displayList[index] ? displayList[index] : data;\r\n      const descStyle = isProductSlider ? 'desc-bottom' : '';\r\n\r\n      return (\r\n        <button\r\n          key={data}\r\n          tabIndex={-1}\r\n          className={`knob ${sliderStyle}`}\r\n          style={{ left: `${leftOffset}%` }}\r\n          onClick={(e) => { e.preventDefault(); this.handleClick(indexToUse); }}\r\n          onKeyDown={() => {}}\r\n        >\r\n          <p className={`${activeStyle} desc ${descStyle}`}>\r\n            {dataToUse}\r\n          </p>\r\n        </button>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderSummary() {\r\n    const {\r\n      activeIndex,\r\n    } = this.state;\r\n\r\n    const {\r\n      inputList,\r\n      prefix,\r\n      suffix,\r\n      isProductSlider,\r\n      displayList,\r\n    } = this.props;\r\n\r\n    if (!isProductSlider) {\r\n      const value = inputList[activeIndex];\r\n      const valueToUse = displayList && displayList[activeIndex] ? displayList[activeIndex] : value;\r\n\r\n      return (\r\n        <div className=\"slider-summary-container-new\">\r\n          {\r\n            prefix ?\r\n              <span className=\"prefix-suffix\">{`${prefix} `}</span>\r\n            :\r\n              null\r\n          }\r\n          <span className=\"value\">{valueToUse}</span>\r\n          {\r\n            suffix ?\r\n              <span className=\"prefix-suffix\">{` ${suffix}`}</span>\r\n            :\r\n              null\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      sliderWidth,\r\n      isUseDropDown,\r\n      marginTop,\r\n    } = this.state;\r\n\r\n    const {\r\n      name,\r\n      desc,\r\n      form,\r\n      change,\r\n      inputList,\r\n      extraInfo,\r\n      isProductSlider,\r\n      maxWidth,\r\n      errorString,\r\n    } = this.props;\r\n\r\n    const knobColor1 = isProductSlider ? 'white-knob' : 'color-knob';\r\n    const knobColor2 = isProductSlider ? 'color-knob' : 'white-knob';\r\n\r\n    return (\r\n      <FormInputWrapper\r\n        desc={desc}\r\n        ref={node => (this.formParent = node)}\r\n        extraInfo={extraInfo}\r\n        errorString={errorString}\r\n      >\r\n        <Fragment>\r\n          {this.renderSummary()}\r\n          <div\r\n            className=\"slider-container-v3\"\r\n            style={{ marginTop, maxWidth }}\r\n          >\r\n            {\r\n              isUseDropDown ?\r\n                <DropDownV2\r\n                  form={form}\r\n                  change={change}\r\n                  name={name}\r\n                  placeholderString=\"Enter or select your destinations\"\r\n                  dropList={inputList}\r\n                  size=\"medium\"\r\n                  isDisableTyping\r\n                />\r\n              :\r\n                <Fragment>\r\n                  <div\r\n                    className=\"line\"\r\n                    ref={node => this.sliderStart = node}\r\n                  />\r\n                  <div\r\n                    className=\"line-green\"\r\n                    style={{ width: `${sliderWidth}%` }}\r\n                  />\r\n                  <div\r\n                    className=\"knob-container\"\r\n                  >\r\n                    {this.renderKnobs()}\r\n                  </div>\r\n                  <div\r\n                    className=\"knob-container\"\r\n                  >\r\n                    <button\r\n                      tabIndex={0}\r\n                      className={`slider-knob ${knobColor1}`}\r\n                      ref={node => this.slider = node}\r\n                      onMouseDown={this.handleSliderDown}\r\n                      onClick={e => e.preventDefault()}\r\n                      style={{ left: `${sliderWidth}%` }}\r\n                    >\r\n                      <div className={`inner ${knobColor2}`} />\r\n                    </button>\r\n                    {\r\n                      isProductSlider ?\r\n                        null\r\n                      :\r\n                        <Field name={name} component={() => null} />\r\n                    }\r\n                  </div>\r\n                </Fragment>\r\n            }\r\n          </div>\r\n        </Fragment>\r\n      </FormInputWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nSliderNew.defaultProps = {\r\n  desc: null,\r\n  hideWidth: 0,\r\n  prefix: null,\r\n  suffix: null,\r\n  extraInfo: null,\r\n  isProductSlider: false,\r\n  name: null,\r\n  change: null,\r\n  storeForm: null,\r\n  form: null,\r\n  maxWidth: '100%',\r\n  errorString: null,\r\n  formState: null,\r\n  formStateList: null,\r\n  displayList: null,\r\n};\r\n\r\nSliderNew.propTypes = {\r\n  isProductSlider: PropTypes.bool,\r\n  inputList: PropTypes.array.isRequired,\r\n  name: PropTypes.string,\r\n  change: PropTypes.func,\r\n  desc: PropTypes.string,\r\n  storeForm: PropTypes.object,\r\n  hideWidth: PropTypes.number,\r\n  form: PropTypes.string,\r\n  prefix: PropTypes.string,\r\n  suffix: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n  maxWidth: PropTypes.string,\r\n  errorString: PropTypes.string,\r\n  formState: PropTypes.number,\r\n  formStateList: PropTypes.array,\r\n  displayList: PropTypes.array,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  storeForm: (getFormValues(ownProps.form)(state)),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(SliderNew);\r\n","/**\r\n * StepProgressBar.js\r\n * Used to display the progress steps used in all categories\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson](wilson@policypal.com)\r\n */\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport Slider from '../../FormsNew/Slider/SliderNew';\r\nimport SliderNew from '../../FormsV3/Slider/SliderNew';\r\n\r\nimport { setInsuranceFormState, FORMSTATES } from '../../../actions/insuranceActions';\r\n\r\nimport './StepProgressBarNew.scss';\r\n\r\nclass StepProgressBarNew extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getStateList = this.getStateList.bind(this);\r\n    this.renderDescription = this.renderDescription.bind(this);\r\n  }\r\n\r\n  getStateList() {\r\n    const {\r\n      stateList,\r\n      history,\r\n    } = this.props;\r\n\r\n    return _.map(stateList, (state, index) => ({\r\n      state: state.index,\r\n      callback: (formState) => {\r\n        const currIndex = _.findIndex(stateList, s => s.index === formState);\r\n        history.go(-(currIndex - index));\r\n      },\r\n    }));\r\n  }\r\n\r\n  renderDescription() {\r\n    const {\r\n      formState,\r\n      stateList,\r\n      stateDescriptions,\r\n      charged,\r\n      history,\r\n    } = this.props;\r\n\r\n    try {\r\n      const currIndex = _.findIndex(stateList, state => state.index === formState);\r\n      const mainDesc = charged ? 'Receipt' : stateDescriptions[currIndex].main;\r\n      const subDesc = stateDescriptions[currIndex].sub;\r\n\r\n      if (!mainDesc && !subDesc) {\r\n        return null;\r\n      }\r\n\r\n      return (\r\n        <Col className=\"step-progress-description-container-new\" xs={12}>\r\n          {\r\n            currIndex !== 0 ?\r\n              <button\r\n                className=\"back-button\"\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              >\r\n                Back\r\n              </button>\r\n            :\r\n              null\r\n          }\r\n          {\r\n            mainDesc ?\r\n              <p className=\"main\">{mainDesc}</p>\r\n            :\r\n              null\r\n          }\r\n          {\r\n            subDesc ?\r\n              <p className=\"sub\">{subDesc}</p>\r\n            :\r\n              null\r\n          }\r\n        </Col>\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      formState,\r\n      charged,\r\n      inputList,\r\n      maxWidth,\r\n      className,\r\n      formStates,\r\n      v3Slider,\r\n    } = this.props;\r\n\r\n    const formStatesToUse = formStates || FORMSTATES;\r\n\r\n    if (formState !== formStatesToUse.MAIN.index && !charged) {\r\n      return (\r\n        <Row className={`justify-content-center ${className}`} noGutters>\r\n          <Col className=\"mx-auto product-slider-new\" xs={12}>\r\n            {\r\n              v3Slider ?\r\n                <SliderNew\r\n                  isProductSlider\r\n                  hideWidth={576}\r\n                  maxWidth={maxWidth}\r\n                  inputList={inputList}\r\n                  formStateList={this.getStateList()}\r\n                  formState={formState}\r\n                />\r\n              :\r\n                <Slider\r\n                  isProductSlider\r\n                  hideWidth={576}\r\n                  maxWidth={maxWidth}\r\n                  inputList={inputList}\r\n                  formStateList={this.getStateList()}\r\n                  formState={formState}\r\n                />\r\n            }\r\n          </Col>\r\n          {this.renderDescription()}\r\n        </Row>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nStepProgressBarNew.defaultProps = {\r\n  charged: null,\r\n  maxWidth: '400px',\r\n  className: '',\r\n  formStates: null,\r\n  v3Slider: false,\r\n};\r\n\r\nStepProgressBarNew.propTypes = {\r\n  formState: PropTypes.number.isRequired,\r\n  // setInsurFormState: PropTypes.func.isRequired,\r\n  inputList: PropTypes.array.isRequired,\r\n  stateList: PropTypes.array.isRequired,\r\n  charged: PropTypes.bool,\r\n  stateDescriptions: PropTypes.array.isRequired,\r\n  maxWidth: PropTypes.string,\r\n  history: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  formStates: PropTypes.object,\r\n  v3Slider: PropTypes.bool,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setInsurFormState: (state) => {\r\n    dispatch(setInsuranceFormState(state));\r\n  },\r\n});\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(StepProgressBarNew));\r\n"],"sourceRoot":""}