{"version":3,"sources":["components/FormsV3/FormInputWrapper/FormInputWrapper.js","components/FormsV3/DropDown/DropDown.js"],"names":["FormInputWrapper","_this$props","this","props","extraInfo","desc","errorString","smallMargin","className","isDateRange","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","join","children","Component","defaultProps","maxItemsDisplay","defaultHeight","resultNullString","display_name","value","DropDown","_this","Object","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","dropList","numItemsDisplay","isMultiple","height","numItems","maxheight","_","min","length","state","isOpened","listItems","selectedString","listHeight","multipleSelectedElements","listElementsCounter","clientHeight","extraPadding","noTransition","updateDimensions","bind","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","handleClickOutside","renderListItems","renderTextInput","handleSelectClick","handleOnInputChange","handleSetMultipleSelectedItem","handleDestroySelected","handleInputKeyPress","handleItemKeyPress","handleChange","handleExit","handleBlur","handleFocus","nextProps","prevState","isEqual","initialListItems","_this$props2","document","addEventListener","window","overrideValue","setState","prevProps","_this$props3","isElements","isEmpty","C_Users_Kaiser_Desktop_policypal_web_reactjs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","removeEventListener","_this$state","newHeight","selectedItemsContainer","childElementCount","getBoundingClientRect","bottom","top","error","inputValue","_this$props4","name","onChange","notForm","valueChangeCallback","inputField","event","wrapperRef","contains","target","isFromFocus","_this$state2","_this$props5","placeholderString","key","preventDefault","index","Math","max","listElements","focus","stopPropagation","isOpenOnly","arguments","undefined","_this$state3","_this$props6","item","_this2","_this$state4","_this$state5","newArr","find","i","push","selectedContainer","slice","indexOf","splice","result","filter","toString","toUpperCase","relatedTarget","_this$state7","_this$props7","resultValue","isError","finalString","some","obj","toLowerCase","_this3","_this$state8","map","react__WEBPACK_IMPORTED_MODULE_12___default","style","onClick","handleSelectItemClick","role","tabIndex","onKeyDown","ref","node","_this4","type","onMouseUp","src","Cross","alt","_this5","_this$props8","isDisableTyping","reactstrap__WEBPACK_IMPORTED_MODULE_13__","placeholder","autoComplete","disabled","_this6","_this$state9","_this$props9","maxWidth","noInternalDesc","logo","actualListheight","dropDownOpenStyle","arrowStyle","transitionStyle","listStyle","concat","multipleStyle","isErrorStyle","noInternalDescStyle","titleStyle","marginTop","marginBottom","logoImg","MagnifyGlass","zIndexStyle","_FormInputWrapper_FormInputWrapper__WEBPACK_IMPORTED_MODULE_15__","onBlur","onFocus","minHeight","paddingTop","paddingBottom","renderMultipleSelectedElements","onKeyPress","Arrow","react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_14__","listContainer"],"mappings":"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","file":"static/js/11.80b5db35.chunk.js","sourcesContent":["/**\r\n * FormInputWrapper.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FormInputWrapper.scss';\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass FormInputWrapper extends Component {\r\n  render() {\r\n    const {\r\n      extraInfo,\r\n      desc,\r\n      errorString,\r\n      smallMargin,\r\n      className,\r\n      isDateRange,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className={['input-wrapper-main-v3 input-wrapper-error', smallMargin && 'my-1', className].join(' ')}\r\n      >\r\n        {\r\n          // eslint-disable-next-line\r\n          isDateRange ?\r\n            <div className=\"d-flex\">\r\n              <p className=\"input-wrapper-desc w-50\">Start Date</p>\r\n              <p className=\"input-wrapper-desc w-50\">End Date</p>\r\n            </div>\r\n          :\r\n          desc !== null ?\r\n            <p className=\"input-wrapper-desc\">{desc}</p>\r\n          :\r\n            null\r\n        }\r\n        {this.props.children}\r\n        {\r\n          extraInfo !== null ?\r\n            <div className=\"extra-info-container\">\r\n              {extraInfo}\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n        {\r\n          errorString !== null ?\r\n            <div className=\"input-wrapper-error-text\">\r\n              <p>{errorString}</p>\r\n            </div>\r\n          :\r\n            null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormInputWrapper.defaultProps = {\r\n  desc: null,\r\n  extraInfo: null,\r\n  errorString: null,\r\n  smallMargin: false,\r\n  className: '',\r\n  isDateRange: false,\r\n};\r\n\r\n\r\nFormInputWrapper.propTypes = {\r\n  desc: PropTypes.string,\r\n  extraInfo: PropTypes.object,\r\n  errorString: PropTypes.string,\r\n  smallMargin: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  isDateRange: PropTypes.bool,\r\n};\r\n\r\nexport default FormInputWrapper;\r\n","/**\r\n * DropDown.js\r\n * Custom form dropdown menu with input\r\n *\r\n * @version 0.0.1\r\n * @author [Wilson Phoo](wilson@policypal.com)\r\n */\r\nimport document from 'global/document';\r\nimport window from 'global/window';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport FormInputWrapper from '../FormInputWrapper/FormInputWrapper';\r\n\r\nimport Arrow from '../../../assets/images/forms/arrow.svg';\r\nimport Cross from '../../../assets/images/forms/cross.svg';\r\nimport MagnifyGlass from '../../../assets/images/forms/magnifyGlass.svg';\r\n\r\nimport './DropDown.scss';\r\nimport './MultipleSelectDropDown.scss';\r\n\r\n// How many items to display\r\nconst maxItemsDisplay = 5;\r\n// Height for dropdown\r\nconst defaultHeight = 48;\r\n// Padding for when multiple items overflow\r\nconst extraPaddingForMultiple = 5;\r\n// Error text to display when error\r\nconst resultNullString = {\r\n  display_name: 'No results found',\r\n  value: null,\r\n};\r\n\r\n/**\r\n * Custom Form Dropdown class\r\n */\r\nclass DropDown extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      dropList,\r\n      numItemsDisplay,\r\n    } = nextProps;\r\n\r\n    if (!_.isEqual(dropList, prevState.initialListItems)) {\r\n      const height = defaultHeight;\r\n      const numItems = numItemsDisplay || maxItemsDisplay;\r\n      const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n\r\n      return {\r\n        initialListItems: dropList,\r\n        listItems: dropList,\r\n        maxheight,\r\n        listHeight: maxheight,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {object} props Component props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // dropList - The passed down dropdown list items\r\n    // placeholderString - Placeholder string for input\r\n    // size - Size of this control\r\n    // numItemsDisplay - Max items to display on view\r\n    const {\r\n      dropList,\r\n      numItemsDisplay,\r\n      value,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Get the control height\r\n    const height = defaultHeight;\r\n    // Get number of items to display\r\n    const numItems = numItemsDisplay || maxItemsDisplay;\r\n    // Get the max height of list\r\n    const maxheight = (_.min([dropList ? dropList.length : 0, numItems]) + 1) * height;\r\n    // isOpened - Whether dropdown is opened\r\n    // isError - Whether there is input error\r\n    // listItems - The actual dropdown list\r\n    // selectedString - The selected item string\r\n    // height - Preferred Control height\r\n    // numItemsDisplay - How many items to display\r\n    // maxheight - Max height of the list\r\n    // listHeight - Height of the list. (Items count + control)\r\n    // multipleSelectedElements - Array of multiple selected items\r\n    // listElementsCounter - Up down selection position\r\n    // clientHeight - Actual height of the control\r\n    this.state = {\r\n      isOpened: false,\r\n      listItems: dropList,\r\n      selectedString: (!isMultiple && value && value.display_name) || '',\r\n      height,\r\n      numItemsDisplay: numItems,\r\n      maxheight,\r\n      listHeight: maxheight,\r\n      multipleSelectedElements: null,\r\n      listElementsCounter: -1,\r\n      clientHeight: height,\r\n      extraPadding: 0,\r\n      noTransition: true,\r\n    };\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    this.renderListItems = this.renderListItems.bind(this);\r\n    this.renderTextInput = this.renderTextInput.bind(this);\r\n    this.handleSelectClick = this.handleSelectClick.bind(this);\r\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\r\n    this.handleSetMultipleSelectedItem = this.handleSetMultipleSelectedItem.bind(this);\r\n    this.handleDestroySelected = this.handleDestroySelected.bind(this);\r\n    this.handleInputKeyPress = this.handleInputKeyPress.bind(this);\r\n    this.handleItemKeyPress = this.handleItemKeyPress.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleExit = this.handleExit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidMount\r\n   */\r\n  componentDidMount() {\r\n    const { value, isMultiple } = this.props;\r\n\r\n    // Add Handler to handle click outside of screen\r\n    document.addEventListener('mousedown', this.handleClickOutside);\r\n    // Update control height on resize in case it squeezes down\r\n    window.addEventListener('resize', this.updateDimensions);\r\n    // Update for the first time\r\n    this.updateDimensions();\r\n\r\n    const { overrideValue } = this.props;\r\n\r\n    if (value) {\r\n      if (isMultiple) {\r\n        this.setState({\r\n          multipleSelectedElements: value,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (overrideValue) {\r\n      this.handleChange(overrideValue);\r\n    }\r\n\r\n    this.setState({ noTransition: false });\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentDidUpdate\r\n   */\r\n  componentDidUpdate(prevProps) {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { overrideValue, value, isMultiple } = this.props;\r\n\r\n    // Use override mode if not using form\r\n    if (!_.isEqual(overrideValue, prevProps.overrideValue)) {\r\n      this.handleChange(overrideValue);\r\n    }\r\n\r\n    const isElements = !_.isEmpty(multipleSelectedElements);\r\n\r\n    if (!_.isEqual(value, prevProps.value)) {\r\n      this.setState({\r\n        selectedString: (value && value.display_name) || '',\r\n      });\r\n    }\r\n\r\n    if (value) {\r\n      if (!isElements || (isElements && !_.isEqual(value, multipleSelectedElements))) {\r\n        if (isMultiple) {\r\n          this.setState({\r\n            multipleSelectedElements: [...value],\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // For re-render fix where multiple changed to single\r\n    if (isElements && !value) {\r\n      this.setState({\r\n        multipleSelectedElements: null,\r\n      });\r\n    }\r\n    // Update control height if necessary, since the\r\n    // height may change after render\r\n    this.updateDimensions();\r\n  }\r\n\r\n  /**\r\n   * Lifecycle Method - componentWillUnmount\r\n   */\r\n  componentWillUnmount() {\r\n    // Remove Handler to handle click outside of screen\r\n    document.removeEventListener('mousedown', this.handleClickOutside);\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  /**\r\n   * Get client height of the selection container\r\n   * to determine the height of the whole control.\r\n   * (For multiple only)\r\n   *\r\n   * @param {object} event\r\n   */\r\n  updateDimensions() {\r\n    const { isMultiple } = this.props;\r\n\r\n    // Only multiple will expand\r\n    if (!isMultiple) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      clientHeight,\r\n      height,\r\n      extraPadding,\r\n    } = this.state;\r\n\r\n    let newHeight = defaultHeight;\r\n    try {\r\n      newHeight = this.selectedItemsContainer.children[this.selectedItemsContainer.childElementCount - 1].getBoundingClientRect().bottom - this.selectedItemsContainer.children[0].getBoundingClientRect().top;\r\n      newHeight = newHeight < defaultHeight ? defaultHeight : newHeight + 10;\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-empty\r\n    }\r\n\r\n    // if client height is not same as DOM, update with padding if expanded\r\n    if (clientHeight !== newHeight) {\r\n      this.setState({\r\n        clientHeight: newHeight,\r\n        extraPadding: newHeight - 2 * extraPadding > height ? extraPaddingForMultiple : 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange(inputValue) {\r\n    const {\r\n      name,\r\n      onChange,\r\n      notForm,\r\n      valueChangeCallback,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    if (notForm) {\r\n      if (valueChangeCallback) {\r\n        valueChangeCallback(inputValue);\r\n      }\r\n      this.inputField.value = inputValue.display_name;\r\n      return;\r\n    }\r\n\r\n    onChange(isMultiple ? 'multiple_select' : 'select', name, inputValue);\r\n  }\r\n\r\n  /**\r\n   * End selection if click on outside\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleClickOutside(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // If clicked outside, go to exit\r\n    if (\r\n      isOpened &&\r\n      this.wrapperRef &&\r\n      !this.wrapperRef.contains(event.target)\r\n    ) {\r\n      // Close it\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n\r\n      // Unset from focus\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle on enter key\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleInputKeyPress(event) {\r\n    const {\r\n      isOpened,\r\n      listElementsCounter,\r\n      selectedString,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const { isMultiple, placeholderString } = this.props;\r\n\r\n    // If pressed on enter, go to exit\r\n    if (event.key === 'Enter') {\r\n      this.handleExit();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Press down arrow from input\r\n    if (event.key === 'ArrowDown') {\r\n      if (isOpened) {\r\n        if (listElementsCounter === -1) {\r\n          event.preventDefault();\r\n        }\r\n        this.handleItemKeyPress(event);\r\n      } else {\r\n        this.setState({\r\n          isOpened: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (\r\n      isMultiple &&\r\n      event.key === 'Backspace' &&\r\n      (selectedString === '' || selectedString === placeholderString) &&\r\n      !_.isEmpty(multipleSelectedElements)\r\n    ) {\r\n      this.handleDestroySelected(multipleSelectedElements[multipleSelectedElements.length - 1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Key press on list items\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleItemKeyPress(event, inputValue) {\r\n    const {\r\n      listElementsCounter,\r\n    } = this.state;\r\n\r\n    let index = listElementsCounter;\r\n\r\n    // If click enter on list item\r\n    if (event.key === 'Enter') {\r\n      // Focus input field\r\n      // this.inputField.focus();\r\n      // Handle exit with the item value\r\n      this.handleExit(inputValue);\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // Navigate list with up down arrow\r\n    if (event.key === 'ArrowDown') {\r\n      index = listElementsCounter + 1;\r\n    } else if (event.key === 'ArrowUp') {\r\n      index = listElementsCounter - 1;\r\n    }\r\n\r\n    // Cap index within list\r\n    index = Math.max(0, Math.min(index, this.listElements.length - 1));\r\n    // Focus on the next item\r\n    this.listElements[index].focus();\r\n\r\n    // If index changed, update state\r\n    if (index !== listElementsCounter) {\r\n      this.setState({\r\n        listElementsCounter: index,\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of dropdown list\r\n   *\r\n   * @param {bool} isOpenOnly - Only can open\r\n   */\r\n  handleSelectClick(isOpenOnly = false) {\r\n    const {\r\n      isOpened,\r\n      selectedString,\r\n      maxheight,\r\n      multipleSelectedElements,\r\n    } = this.state;\r\n\r\n    const {\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // If this frame is not from focus\r\n    if (!this.isFromFocus) {\r\n      // Set open state\r\n      if (!isOpenOnly || (isOpenOnly && !isOpened)) {\r\n        this.setState({\r\n          isOpened: !isOpened,\r\n        });\r\n      }\r\n\r\n      // If previously invalid, reset list\r\n      if (!selectedString || selectedString === resultNullString.display_name) {\r\n        this.setState({\r\n          listItems: dropList,\r\n          listHeight: maxheight,\r\n          listElementsCounter: -1,\r\n        });\r\n\r\n        if (!isMultiple || (isMultiple && _.isEmpty(multipleSelectedElements))) {\r\n          this.handleChange(null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Unlock from focus\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles selection of dropdown item\r\n   *\r\n   * @param {object} event - Click event\r\n   * @param {string} item - Input string\r\n   */\r\n  handleSelectItemClick(event, item) {\r\n    // If click on null item return\r\n    if (item.value === resultNullString.value) {\r\n      return;\r\n    }\r\n\r\n    const { numItemsDisplay, height } = this.state;\r\n    const { dropList } = this.props;\r\n\r\n    const {\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Reset drop list items to all, set selected string,\r\n    // and reset any errors\r\n    this.setState({\r\n      listItems: dropList,\r\n      listHeight: (_.min([(dropList && dropList.length) || 0, numItemsDisplay]) + 1) * height,\r\n    });\r\n\r\n    // this.formParent.clearErrorString();\r\n\r\n    if (isMultiple) {\r\n      // If multiple dropdown, reset selected string\r\n      this.setState({\r\n        selectedString: '',\r\n      });\r\n\r\n      // Set input field text to empty\r\n      this.inputField.value = '';\r\n      // Refocus input bar\r\n      // this.inputField.focus();\r\n\r\n      // Set multiple selected item\r\n      this.handleSetMultipleSelectedItem(item);\r\n    } else {\r\n      this.setState({\r\n        selectedString: item.display_name,\r\n      }, () => {\r\n        // Toggle the dropdown menu\r\n        this.handleSelectClick();\r\n\r\n        // Update redux state\r\n        this.handleChange(item);\r\n\r\n        // Close dropdown\r\n        this.setState({\r\n          isOpened: false,\r\n        });\r\n      });\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Selection of multi select dropdown\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleSetMultipleSelectedItem(item) {\r\n    const { multipleSelectedElements, height } = this.state;\r\n\r\n    const newArr = multipleSelectedElements || [];\r\n\r\n    // If item does not exists in the selected list\r\n    if (!_.find(newArr, i => i.value === item.value)) {\r\n      // Add item to list\r\n      newArr.push(item);\r\n\r\n      // Change state\r\n      this.setState({\r\n        multipleSelectedElements: newArr,\r\n        clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n        isOpened: false,\r\n      });\r\n\r\n      // Update redux store\r\n      this.handleChange(newArr);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys multi selected item\r\n   *\r\n   * @param {string} item\r\n   */\r\n  handleDestroySelected(item) {\r\n    const { height } = this.state;\r\n\r\n    const { multipleSelectedElements } = this.state;\r\n    // Duplicate clean copy\r\n    let newArr = multipleSelectedElements.slice();\r\n    // Delete chosen item\r\n    const index = newArr.indexOf(item);\r\n    newArr.splice(index, 1);\r\n    // Set null if empty\r\n    newArr = newArr.length === 0 ? null : newArr;\r\n\r\n    // Update state\r\n    this.setState({\r\n      multipleSelectedElements: newArr,\r\n      clientHeight: this.selectedContainer ? this.selectedContainer.clientHeight : height,\r\n    });\r\n\r\n    // Update redux state\r\n    this.handleChange(newArr);\r\n    this.isFromFocus = false;\r\n  }\r\n\r\n  /**\r\n   * Handles on input changes\r\n   *\r\n   * @param {object} event\r\n   */\r\n  async handleOnInputChange(event) {\r\n    // Get current input value\r\n    const { value } = event.target;\r\n\r\n    const { dropList } = this.props;\r\n    const { height, numItemsDisplay } = this.state;\r\n\r\n    // Attempt to match value to list\r\n    const result = _.filter(\r\n      dropList,\r\n      item => item.display_name.toString().toUpperCase().indexOf(value.toString().toUpperCase()) === 0,\r\n    );\r\n\r\n    // Get length of new list, min 1 which is error string\r\n    const length = result.length ? result.length : 1;\r\n\r\n    // Set new list items, height of dropdown list,\r\n    // Force open list on type, and set selected string to value\r\n    this.setState({\r\n      listItems: result.length ? result : [resultNullString],\r\n      listHeight: (_.min([length, numItemsDisplay]) + 1) * height,\r\n      isOpened: true,\r\n      selectedString: value,\r\n      listElementsCounter: -1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle Blur event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleBlur(event) {\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n\r\n    // If outside of children\r\n    if (!isChildren) {\r\n      // Close dropdown\r\n      this.setState({\r\n        isOpened: false,\r\n      });\r\n      // Handle exit case\r\n      this.handleExit();\r\n      this.isFromFocus = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Focus event\r\n   *\r\n   * @param {object} event\r\n   */\r\n  handleFocus(event) {\r\n    const { isOpened } = this.state;\r\n\r\n    // Check if focus event contains children\r\n    const isChildren = this.wrapperRef.contains(event.relatedTarget);\r\n    // If not from children\r\n    if (!isChildren) {\r\n      // Open dropdown\r\n      if (!isOpened) {\r\n        this.handleSelectClick(true);\r\n        // Prevent double click\r\n        this.isFromFocus = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle exit selection of entered input\r\n   *\r\n   * @param {string} inputValue - From selection\r\n   */\r\n  handleExit(inputValue = null) {\r\n    const {\r\n      selectedString,\r\n      listItems,\r\n    } = this.state;\r\n\r\n    const {\r\n      placeholderString,\r\n      dropList,\r\n      isMultiple,\r\n    } = this.props;\r\n\r\n    // Result string if match original list\r\n    let resultValue = null;\r\n    // If input causes an error\r\n    let isError = false;\r\n    // The string to use\r\n    const finalString = inputValue !== null ? inputValue.display_name : selectedString;\r\n\r\n    // If possible valid input\r\n    if (\r\n      finalString &&\r\n      finalString !== placeholderString &&\r\n      finalString !== ''\r\n    ) {\r\n      // Attempt to match finalString to original list\r\n      listItems.some((obj) => {\r\n        const result = obj.display_name.toString().toLowerCase() === finalString.toString().toLowerCase();\r\n        if (result) {\r\n          resultValue = obj;\r\n        }\r\n\r\n        return result;\r\n      });\r\n\r\n      // Check error if no match\r\n      isError = !resultValue;\r\n      // Set result string to match value or error value\r\n      resultValue = isError ? null : resultValue;\r\n\r\n      if (isMultiple) {\r\n        if (!isError) {\r\n          this.handleSetMultipleSelectedItem(resultValue);\r\n        }\r\n\r\n        this.inputField.value = '';\r\n      } else {\r\n        // Update redux value\r\n        this.handleChange(resultValue);\r\n\r\n        this.setState({\r\n          isOpened: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    // If not error, reset list to list all,\r\n    // Set selected string and error if possible\r\n    // and close the list\r\n    this.setState({\r\n      listItems: isError ? listItems : dropList,\r\n      selectedString: (resultValue && resultValue.display_name) || '',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Renders the dropdown list items\r\n   */\r\n  renderListItems() {\r\n    const { listItems, height } = this.state;\r\n    this.listElements = [];\r\n\r\n    const result = _.map(listItems, item => (\r\n      <li key={item.value}>\r\n        <div\r\n          className=\"list-item text-style\"\r\n          style={{ height }}\r\n          onClick={event => this.handleSelectItemClick(event, item)}\r\n          role=\"button\"\r\n          tabIndex={-1}\r\n          onKeyDown={(event) => { this.handleItemKeyPress(event, item); }}\r\n          ref={(node) => { if (node !== null) this.listElements.push(node); }}\r\n        >\r\n          <p>{item.display_name}</p>\r\n        </div>\r\n      </li>\r\n    ));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render the multiple selected elements in the input container\r\n   */\r\n  renderMultipleSelectedElements() {\r\n    const { multipleSelectedElements } = this.state;\r\n    const { isMultiple } = this.props;\r\n\r\n    if (!isMultiple) {\r\n      return null;\r\n    }\r\n\r\n    return _.map(multipleSelectedElements, item => (\r\n      <div className=\"selected-item-container\" key={item.value}>\r\n        <div className=\"selected-item\">\r\n          <p>{item.display_name}</p>\r\n          <button\r\n            type=\"button\"\r\n            className=\"selected-item-destroy\"\r\n            onMouseUp={() => this.handleDestroySelected(item)}\r\n            tabIndex={-1}\r\n          >\r\n            <img src={Cross} alt=\"cross.svg\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  renderTextInput() {\r\n    const { selectedString } = this.state;\r\n    const {\r\n      isMultiple,\r\n      isDisableTyping,\r\n      placeholderString,\r\n      name,\r\n      notForm,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Input\r\n        value={selectedString || ''}\r\n        name={name}\r\n        placeholder={((isMultiple || notForm) && placeholderString) || ''}\r\n        autoComplete=\"off\"\r\n        ref={node => (this.inputField = node)}\r\n        onChange={event => this.handleOnInputChange(event)}\r\n        onKeyDown={event => this.handleInputKeyPress(event)}\r\n        onClick={() => this.handleSelectClick(true)}\r\n        disabled={isDisableTyping}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render component\r\n   */\r\n  render() {\r\n    const {\r\n      isOpened,\r\n      listHeight,\r\n      height,\r\n      clientHeight,\r\n      extraPadding,\r\n      noTransition,\r\n    } = this.state;\r\n\r\n    // const isOpened = true;\r\n\r\n    if (height && listHeight) {\r\n      const {\r\n        maxWidth,\r\n        isMultiple,\r\n        desc,\r\n        extraInfo,\r\n        errorString,\r\n        noInternalDesc,\r\n        logo,\r\n        placeholderString,\r\n        value,\r\n      } = this.props;\r\n\r\n      // Actual height of the whole control\r\n      const actualheight = isOpened ? listHeight : height;\r\n      // Actual height of only the list\r\n      const actualListheight = actualheight - height;\r\n\r\n      // Dynamic styles\r\n      const dropDownOpenStyle = isOpened ? 'dropdown-container-opened' : 'dropdown-container-closed';\r\n      const arrowStyle = isOpened ? 'angle-up' : 'angle-down';\r\n      const transitionStyle = noTransition ? '' : 'do-transition';\r\n      const listStyle = isOpened ? `list-opened ${transitionStyle}` : `list-closed ${transitionStyle}`;\r\n      const multipleStyle = isMultiple || logo ? 'multi-drop-v3' : '';\r\n      const isErrorStyle = errorString ? 'error' : '';\r\n\r\n      const noInternalDescStyle = noInternalDesc ? 'no-internal-desc' : '';\r\n\r\n      const titleStyle = value ? 'focused-title' : '';\r\n      const marginTop = clientHeight > defaultHeight || isOpened ? clientHeight : 0;\r\n      const marginBottom = clientHeight > defaultHeight ? 6 : 0;\r\n\r\n      const logoImg = isMultiple ? MagnifyGlass : logo;\r\n      const zIndexStyle = isOpened ? 'drop-open' : 'drop-close';\r\n\r\n      return (\r\n        <FormInputWrapper\r\n          desc={desc}\r\n          extraInfo={extraInfo}\r\n          errorString={errorString}\r\n        >\r\n          <div\r\n            className={`dropdown-container-v3 ${zIndexStyle} ${multipleStyle} ${noInternalDescStyle}`}\r\n            style={{\r\n              height: clientHeight,\r\n              maxWidth,\r\n              marginBottom,\r\n            }}\r\n            ref={node => (this.wrapperRef = node)}\r\n            onBlur={event => this.handleBlur(event)}\r\n            onFocus={event => this.handleFocus(event)}\r\n          >\r\n            <div\r\n              className={`dropdown-container ${dropDownOpenStyle} ${isErrorStyle}`}\r\n            >\r\n              {\r\n                isMultiple || noInternalDesc ? null :\r\n                <div className={`title-header ${titleStyle}`}>\r\n                  {placeholderString}\r\n                </div>\r\n              }\r\n              <div\r\n                className=\"selected-container\"\r\n                onKeyDown={event => this.handleInputKeyPress(event)}\r\n                role=\"button\"\r\n                style={{ minHeight: height }}\r\n                tabIndex={-1}\r\n                ref={node => (this.selectedContainer = node)}\r\n              >\r\n                {\r\n                  logoImg ?\r\n                    <div className=\"icon-container\" style={{ minHeight: height }}>\r\n                      <img\r\n                        src={logoImg}\r\n                        alt=\"DropdownImage.svg\"\r\n                      />\r\n                    </div>\r\n                  :\r\n                    null\r\n                }\r\n                <div\r\n                  className=\"selected-items-container\"\r\n                  ref={node => this.selectedItemsContainer = node}\r\n                  style={{ paddingTop: extraPadding, paddingBottom: extraPadding }}\r\n                >\r\n                  {this.renderMultipleSelectedElements()}\r\n                  <div className=\"selected-text selected-text-multi\">\r\n                    {this.renderTextInput()}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"selected-arrow\"\r\n                  onClick={() => this.handleSelectClick()}\r\n                  onKeyPress={() => {}}\r\n                  role=\"button\"\r\n                  tabIndex={-1}\r\n                >\r\n                  <img\r\n                    src={Arrow}\r\n                    alt=\"arrow.svg\"\r\n                    className={`selected-arrow-style ${arrowStyle}`}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Scrollbars\r\n                className={`list-container ${listStyle}`}\r\n                style={{\r\n                  minHeight: actualListheight,\r\n                  marginTop,\r\n                }}\r\n                ref={node => this.listContainer = node}\r\n                tabIndex={-1}\r\n              >\r\n                {\r\n                  isOpened ?\r\n                    this.renderListItems()\r\n                  :\r\n                    null\r\n                }\r\n              </Scrollbars>\r\n            </div>\r\n          </div>\r\n        </FormInputWrapper>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nDropDown.defaultProps = {\r\n  maxWidth: '100%',\r\n  numItemsDisplay: maxItemsDisplay,\r\n  isMultiple: false,\r\n  desc: null,\r\n  isDisableTyping: false,\r\n  extraInfo: null,\r\n  notForm: false,\r\n  overrideValue: null,\r\n  errorString: null,\r\n  dropList: null,\r\n  valueChangeCallback: null,\r\n  name: null,\r\n  noInternalDesc: false,\r\n  logo: null,\r\n  value: null,\r\n};\r\n\r\nDropDown.propTypes = {\r\n  dropList: PropTypes.array,\r\n  placeholderString: PropTypes.string.isRequired,\r\n  maxWidth: PropTypes.string,\r\n  name: PropTypes.string,\r\n  numItemsDisplay: PropTypes.number,\r\n  isMultiple: PropTypes.bool,\r\n  desc: PropTypes.string,\r\n  isDisableTyping: PropTypes.bool,\r\n  extraInfo: PropTypes.object,\r\n  notForm: PropTypes.bool,\r\n  overrideValue: PropTypes.string,\r\n  errorString: PropTypes.string,\r\n  valueChangeCallback: PropTypes.func,\r\n  noInternalDesc: PropTypes.bool,\r\n  logo: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n};\r\n\r\nexport default DropDown;\r\n"],"sourceRoot":""}